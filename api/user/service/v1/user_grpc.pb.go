// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: user/service/v1/user.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AvatarIrregular(ctx context.Context, in *AvatarIrregularReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddAvatarReviewDbAndCache(ctx context.Context, in *AddAvatarReviewDbAndCacheReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CoverIrregular(ctx context.Context, in *CoverIrregularReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddCoverReviewDbAndCache(ctx context.Context, in *AddCoverReviewDbAndCacheReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LoginByPassword(ctx context.Context, in *LoginByPasswordReq, opts ...grpc.CallOption) (*LoginReply, error)
	LoginByCode(ctx context.Context, in *LoginByCodeReq, opts ...grpc.CallOption) (*LoginReply, error)
	LoginByWeChat(ctx context.Context, in *LoginByWeChatReq, opts ...grpc.CallOption) (*LoginReply, error)
	LoginByQQ(ctx context.Context, in *LoginByQQReq, opts ...grpc.CallOption) (*LoginReply, error)
	LoginByGithub(ctx context.Context, in *LoginByGithubReq, opts ...grpc.CallOption) (*LoginReply, error)
	LoginByGitee(ctx context.Context, in *LoginByGiteeReq, opts ...grpc.CallOption) (*LoginReply, error)
	LoginPasswordReset(ctx context.Context, in *LoginPasswordResetReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendPhoneCode(ctx context.Context, in *SendPhoneCodeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendEmailCode(ctx context.Context, in *SendEmailCodeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCosSessionKey(ctx context.Context, in *GetCosSessionKeyReq, opts ...grpc.CallOption) (*GetCosSessionKeyReply, error)
	SetUserPhone(ctx context.Context, in *SetUserPhoneReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetUserEmail(ctx context.Context, in *SetUserEmailReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetUserPassword(ctx context.Context, in *SetUserPasswordReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetUserWechat(ctx context.Context, in *SetUserWechatReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetUserQQ(ctx context.Context, in *SetUserQQReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetUserGitee(ctx context.Context, in *SetUserGiteeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetUserGithub(ctx context.Context, in *SetUserGithubReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetUserFollow(ctx context.Context, in *SetUserFollowReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetFollowDbAndCache(ctx context.Context, in *SetFollowDbAndCacheReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CancelUserFollow(ctx context.Context, in *CancelUserFollowReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CancelFollowDbAndCache(ctx context.Context, in *CancelFollowDbAndCacheReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAccount(ctx context.Context, in *GetAccountReq, opts ...grpc.CallOption) (*GetAccountReply, error)
	GetProfile(ctx context.Context, in *GetProfileReq, opts ...grpc.CallOption) (*GetProfileReply, error)
	GetProfileList(ctx context.Context, in *GetProfileListReq, opts ...grpc.CallOption) (*GetProfileListReply, error)
	GetProfileUpdate(ctx context.Context, in *GetProfileUpdateReq, opts ...grpc.CallOption) (*GetProfileUpdateReply, error)
	GetUserFollow(ctx context.Context, in *GetUserFollowReq, opts ...grpc.CallOption) (*GetUserFollowReply, error)
	GetFollowList(ctx context.Context, in *GetFollowListReq, opts ...grpc.CallOption) (*GetFollowListReply, error)
	GetFollowListCount(ctx context.Context, in *GetFollowListCountReq, opts ...grpc.CallOption) (*GetFollowListCountReply, error)
	GetFollowedList(ctx context.Context, in *GetFollowedListReq, opts ...grpc.CallOption) (*GetFollowedListReply, error)
	GetFollowedListCount(ctx context.Context, in *GetFollowedListCountReq, opts ...grpc.CallOption) (*GetFollowedListCountReply, error)
	GetUserFollows(ctx context.Context, in *GetUserFollowsReq, opts ...grpc.CallOption) (*GetUserFollowsReply, error)
	GetUserSearch(ctx context.Context, in *GetUserSearchReq, opts ...grpc.CallOption) (*GetUserSearchReply, error)
	GetAvatarReview(ctx context.Context, in *GetAvatarReviewReq, opts ...grpc.CallOption) (*GetAvatarReviewReply, error)
	GetCoverReview(ctx context.Context, in *GetCoverReviewReq, opts ...grpc.CallOption) (*GetCoverReviewReply, error)
	SetProfileUpdate(ctx context.Context, in *SetProfileUpdateReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ProfileReviewPass(ctx context.Context, in *ProfileReviewPassReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ProfileReviewNotPass(ctx context.Context, in *ProfileReviewNotPassReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ChangeUserPassword(ctx context.Context, in *ChangeUserPasswordReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnbindUserPhone(ctx context.Context, in *UnbindUserAccountReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnbindUserEmail(ctx context.Context, in *UnbindUserAccountReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnbindUserWechat(ctx context.Context, in *UnbindUserAccountReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnbindUserQQ(ctx context.Context, in *UnbindUserAccountReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnbindUserGitee(ctx context.Context, in *UnbindUserAccountReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnbindUserGithub(ctx context.Context, in *UnbindUserAccountReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetHealth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.User/UserRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AvatarIrregular(ctx context.Context, in *AvatarIrregularReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.User/AvatarIrregular", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddAvatarReviewDbAndCache(ctx context.Context, in *AddAvatarReviewDbAndCacheReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.User/AddAvatarReviewDbAndCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CoverIrregular(ctx context.Context, in *CoverIrregularReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.User/CoverIrregular", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddCoverReviewDbAndCache(ctx context.Context, in *AddCoverReviewDbAndCacheReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.User/AddCoverReviewDbAndCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) LoginByPassword(ctx context.Context, in *LoginByPasswordReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/user.v1.User/LoginByPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) LoginByCode(ctx context.Context, in *LoginByCodeReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/user.v1.User/LoginByCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) LoginByWeChat(ctx context.Context, in *LoginByWeChatReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/user.v1.User/LoginByWeChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) LoginByQQ(ctx context.Context, in *LoginByQQReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/user.v1.User/LoginByQQ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) LoginByGithub(ctx context.Context, in *LoginByGithubReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/user.v1.User/LoginByGithub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) LoginByGitee(ctx context.Context, in *LoginByGiteeReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/user.v1.User/LoginByGitee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) LoginPasswordReset(ctx context.Context, in *LoginPasswordResetReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.User/LoginPasswordReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SendPhoneCode(ctx context.Context, in *SendPhoneCodeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.User/SendPhoneCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SendEmailCode(ctx context.Context, in *SendEmailCodeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.User/SendEmailCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetCosSessionKey(ctx context.Context, in *GetCosSessionKeyReq, opts ...grpc.CallOption) (*GetCosSessionKeyReply, error) {
	out := new(GetCosSessionKeyReply)
	err := c.cc.Invoke(ctx, "/user.v1.User/GetCosSessionKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetUserPhone(ctx context.Context, in *SetUserPhoneReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.User/SetUserPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetUserEmail(ctx context.Context, in *SetUserEmailReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.User/SetUserEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetUserPassword(ctx context.Context, in *SetUserPasswordReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.User/SetUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetUserWechat(ctx context.Context, in *SetUserWechatReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.User/SetUserWechat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetUserQQ(ctx context.Context, in *SetUserQQReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.User/SetUserQQ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetUserGitee(ctx context.Context, in *SetUserGiteeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.User/SetUserGitee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetUserGithub(ctx context.Context, in *SetUserGithubReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.User/SetUserGithub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetUserFollow(ctx context.Context, in *SetUserFollowReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.User/SetUserFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetFollowDbAndCache(ctx context.Context, in *SetFollowDbAndCacheReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.User/SetFollowDbAndCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CancelUserFollow(ctx context.Context, in *CancelUserFollowReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.User/CancelUserFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CancelFollowDbAndCache(ctx context.Context, in *CancelFollowDbAndCacheReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.User/CancelFollowDbAndCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetAccount(ctx context.Context, in *GetAccountReq, opts ...grpc.CallOption) (*GetAccountReply, error) {
	out := new(GetAccountReply)
	err := c.cc.Invoke(ctx, "/user.v1.User/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetProfile(ctx context.Context, in *GetProfileReq, opts ...grpc.CallOption) (*GetProfileReply, error) {
	out := new(GetProfileReply)
	err := c.cc.Invoke(ctx, "/user.v1.User/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetProfileList(ctx context.Context, in *GetProfileListReq, opts ...grpc.CallOption) (*GetProfileListReply, error) {
	out := new(GetProfileListReply)
	err := c.cc.Invoke(ctx, "/user.v1.User/GetProfileList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetProfileUpdate(ctx context.Context, in *GetProfileUpdateReq, opts ...grpc.CallOption) (*GetProfileUpdateReply, error) {
	out := new(GetProfileUpdateReply)
	err := c.cc.Invoke(ctx, "/user.v1.User/GetProfileUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserFollow(ctx context.Context, in *GetUserFollowReq, opts ...grpc.CallOption) (*GetUserFollowReply, error) {
	out := new(GetUserFollowReply)
	err := c.cc.Invoke(ctx, "/user.v1.User/GetUserFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetFollowList(ctx context.Context, in *GetFollowListReq, opts ...grpc.CallOption) (*GetFollowListReply, error) {
	out := new(GetFollowListReply)
	err := c.cc.Invoke(ctx, "/user.v1.User/GetFollowList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetFollowListCount(ctx context.Context, in *GetFollowListCountReq, opts ...grpc.CallOption) (*GetFollowListCountReply, error) {
	out := new(GetFollowListCountReply)
	err := c.cc.Invoke(ctx, "/user.v1.User/GetFollowListCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetFollowedList(ctx context.Context, in *GetFollowedListReq, opts ...grpc.CallOption) (*GetFollowedListReply, error) {
	out := new(GetFollowedListReply)
	err := c.cc.Invoke(ctx, "/user.v1.User/GetFollowedList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetFollowedListCount(ctx context.Context, in *GetFollowedListCountReq, opts ...grpc.CallOption) (*GetFollowedListCountReply, error) {
	out := new(GetFollowedListCountReply)
	err := c.cc.Invoke(ctx, "/user.v1.User/GetFollowedListCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserFollows(ctx context.Context, in *GetUserFollowsReq, opts ...grpc.CallOption) (*GetUserFollowsReply, error) {
	out := new(GetUserFollowsReply)
	err := c.cc.Invoke(ctx, "/user.v1.User/GetUserFollows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserSearch(ctx context.Context, in *GetUserSearchReq, opts ...grpc.CallOption) (*GetUserSearchReply, error) {
	out := new(GetUserSearchReply)
	err := c.cc.Invoke(ctx, "/user.v1.User/GetUserSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetAvatarReview(ctx context.Context, in *GetAvatarReviewReq, opts ...grpc.CallOption) (*GetAvatarReviewReply, error) {
	out := new(GetAvatarReviewReply)
	err := c.cc.Invoke(ctx, "/user.v1.User/GetAvatarReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetCoverReview(ctx context.Context, in *GetCoverReviewReq, opts ...grpc.CallOption) (*GetCoverReviewReply, error) {
	out := new(GetCoverReviewReply)
	err := c.cc.Invoke(ctx, "/user.v1.User/GetCoverReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetProfileUpdate(ctx context.Context, in *SetProfileUpdateReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.User/SetProfileUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ProfileReviewPass(ctx context.Context, in *ProfileReviewPassReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.User/ProfileReviewPass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ProfileReviewNotPass(ctx context.Context, in *ProfileReviewNotPassReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.User/ProfileReviewNotPass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ChangeUserPassword(ctx context.Context, in *ChangeUserPasswordReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.User/ChangeUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UnbindUserPhone(ctx context.Context, in *UnbindUserAccountReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.User/UnbindUserPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UnbindUserEmail(ctx context.Context, in *UnbindUserAccountReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.User/UnbindUserEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UnbindUserWechat(ctx context.Context, in *UnbindUserAccountReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.User/UnbindUserWechat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UnbindUserQQ(ctx context.Context, in *UnbindUserAccountReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.User/UnbindUserQQ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UnbindUserGitee(ctx context.Context, in *UnbindUserAccountReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.User/UnbindUserGitee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UnbindUserGithub(ctx context.Context, in *UnbindUserAccountReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.User/UnbindUserGithub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetHealth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.v1.User/GetHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	UserRegister(context.Context, *UserRegisterReq) (*emptypb.Empty, error)
	AvatarIrregular(context.Context, *AvatarIrregularReq) (*emptypb.Empty, error)
	AddAvatarReviewDbAndCache(context.Context, *AddAvatarReviewDbAndCacheReq) (*emptypb.Empty, error)
	CoverIrregular(context.Context, *CoverIrregularReq) (*emptypb.Empty, error)
	AddCoverReviewDbAndCache(context.Context, *AddCoverReviewDbAndCacheReq) (*emptypb.Empty, error)
	LoginByPassword(context.Context, *LoginByPasswordReq) (*LoginReply, error)
	LoginByCode(context.Context, *LoginByCodeReq) (*LoginReply, error)
	LoginByWeChat(context.Context, *LoginByWeChatReq) (*LoginReply, error)
	LoginByQQ(context.Context, *LoginByQQReq) (*LoginReply, error)
	LoginByGithub(context.Context, *LoginByGithubReq) (*LoginReply, error)
	LoginByGitee(context.Context, *LoginByGiteeReq) (*LoginReply, error)
	LoginPasswordReset(context.Context, *LoginPasswordResetReq) (*emptypb.Empty, error)
	SendPhoneCode(context.Context, *SendPhoneCodeReq) (*emptypb.Empty, error)
	SendEmailCode(context.Context, *SendEmailCodeReq) (*emptypb.Empty, error)
	GetCosSessionKey(context.Context, *GetCosSessionKeyReq) (*GetCosSessionKeyReply, error)
	SetUserPhone(context.Context, *SetUserPhoneReq) (*emptypb.Empty, error)
	SetUserEmail(context.Context, *SetUserEmailReq) (*emptypb.Empty, error)
	SetUserPassword(context.Context, *SetUserPasswordReq) (*emptypb.Empty, error)
	SetUserWechat(context.Context, *SetUserWechatReq) (*emptypb.Empty, error)
	SetUserQQ(context.Context, *SetUserQQReq) (*emptypb.Empty, error)
	SetUserGitee(context.Context, *SetUserGiteeReq) (*emptypb.Empty, error)
	SetUserGithub(context.Context, *SetUserGithubReq) (*emptypb.Empty, error)
	SetUserFollow(context.Context, *SetUserFollowReq) (*emptypb.Empty, error)
	SetFollowDbAndCache(context.Context, *SetFollowDbAndCacheReq) (*emptypb.Empty, error)
	CancelUserFollow(context.Context, *CancelUserFollowReq) (*emptypb.Empty, error)
	CancelFollowDbAndCache(context.Context, *CancelFollowDbAndCacheReq) (*emptypb.Empty, error)
	GetAccount(context.Context, *GetAccountReq) (*GetAccountReply, error)
	GetProfile(context.Context, *GetProfileReq) (*GetProfileReply, error)
	GetProfileList(context.Context, *GetProfileListReq) (*GetProfileListReply, error)
	GetProfileUpdate(context.Context, *GetProfileUpdateReq) (*GetProfileUpdateReply, error)
	GetUserFollow(context.Context, *GetUserFollowReq) (*GetUserFollowReply, error)
	GetFollowList(context.Context, *GetFollowListReq) (*GetFollowListReply, error)
	GetFollowListCount(context.Context, *GetFollowListCountReq) (*GetFollowListCountReply, error)
	GetFollowedList(context.Context, *GetFollowedListReq) (*GetFollowedListReply, error)
	GetFollowedListCount(context.Context, *GetFollowedListCountReq) (*GetFollowedListCountReply, error)
	GetUserFollows(context.Context, *GetUserFollowsReq) (*GetUserFollowsReply, error)
	GetUserSearch(context.Context, *GetUserSearchReq) (*GetUserSearchReply, error)
	GetAvatarReview(context.Context, *GetAvatarReviewReq) (*GetAvatarReviewReply, error)
	GetCoverReview(context.Context, *GetCoverReviewReq) (*GetCoverReviewReply, error)
	SetProfileUpdate(context.Context, *SetProfileUpdateReq) (*emptypb.Empty, error)
	ProfileReviewPass(context.Context, *ProfileReviewPassReq) (*emptypb.Empty, error)
	ProfileReviewNotPass(context.Context, *ProfileReviewNotPassReq) (*emptypb.Empty, error)
	ChangeUserPassword(context.Context, *ChangeUserPasswordReq) (*emptypb.Empty, error)
	UnbindUserPhone(context.Context, *UnbindUserAccountReq) (*emptypb.Empty, error)
	UnbindUserEmail(context.Context, *UnbindUserAccountReq) (*emptypb.Empty, error)
	UnbindUserWechat(context.Context, *UnbindUserAccountReq) (*emptypb.Empty, error)
	UnbindUserQQ(context.Context, *UnbindUserAccountReq) (*emptypb.Empty, error)
	UnbindUserGitee(context.Context, *UnbindUserAccountReq) (*emptypb.Empty, error)
	UnbindUserGithub(context.Context, *UnbindUserAccountReq) (*emptypb.Empty, error)
	GetHealth(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) UserRegister(context.Context, *UserRegisterReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (UnimplementedUserServer) AvatarIrregular(context.Context, *AvatarIrregularReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvatarIrregular not implemented")
}
func (UnimplementedUserServer) AddAvatarReviewDbAndCache(context.Context, *AddAvatarReviewDbAndCacheReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAvatarReviewDbAndCache not implemented")
}
func (UnimplementedUserServer) CoverIrregular(context.Context, *CoverIrregularReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoverIrregular not implemented")
}
func (UnimplementedUserServer) AddCoverReviewDbAndCache(context.Context, *AddCoverReviewDbAndCacheReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCoverReviewDbAndCache not implemented")
}
func (UnimplementedUserServer) LoginByPassword(context.Context, *LoginByPasswordReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByPassword not implemented")
}
func (UnimplementedUserServer) LoginByCode(context.Context, *LoginByCodeReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByCode not implemented")
}
func (UnimplementedUserServer) LoginByWeChat(context.Context, *LoginByWeChatReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByWeChat not implemented")
}
func (UnimplementedUserServer) LoginByQQ(context.Context, *LoginByQQReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByQQ not implemented")
}
func (UnimplementedUserServer) LoginByGithub(context.Context, *LoginByGithubReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByGithub not implemented")
}
func (UnimplementedUserServer) LoginByGitee(context.Context, *LoginByGiteeReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByGitee not implemented")
}
func (UnimplementedUserServer) LoginPasswordReset(context.Context, *LoginPasswordResetReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginPasswordReset not implemented")
}
func (UnimplementedUserServer) SendPhoneCode(context.Context, *SendPhoneCodeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPhoneCode not implemented")
}
func (UnimplementedUserServer) SendEmailCode(context.Context, *SendEmailCodeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailCode not implemented")
}
func (UnimplementedUserServer) GetCosSessionKey(context.Context, *GetCosSessionKeyReq) (*GetCosSessionKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCosSessionKey not implemented")
}
func (UnimplementedUserServer) SetUserPhone(context.Context, *SetUserPhoneReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserPhone not implemented")
}
func (UnimplementedUserServer) SetUserEmail(context.Context, *SetUserEmailReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserEmail not implemented")
}
func (UnimplementedUserServer) SetUserPassword(context.Context, *SetUserPasswordReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserPassword not implemented")
}
func (UnimplementedUserServer) SetUserWechat(context.Context, *SetUserWechatReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserWechat not implemented")
}
func (UnimplementedUserServer) SetUserQQ(context.Context, *SetUserQQReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserQQ not implemented")
}
func (UnimplementedUserServer) SetUserGitee(context.Context, *SetUserGiteeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserGitee not implemented")
}
func (UnimplementedUserServer) SetUserGithub(context.Context, *SetUserGithubReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserGithub not implemented")
}
func (UnimplementedUserServer) SetUserFollow(context.Context, *SetUserFollowReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserFollow not implemented")
}
func (UnimplementedUserServer) SetFollowDbAndCache(context.Context, *SetFollowDbAndCacheReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFollowDbAndCache not implemented")
}
func (UnimplementedUserServer) CancelUserFollow(context.Context, *CancelUserFollowReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelUserFollow not implemented")
}
func (UnimplementedUserServer) CancelFollowDbAndCache(context.Context, *CancelFollowDbAndCacheReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelFollowDbAndCache not implemented")
}
func (UnimplementedUserServer) GetAccount(context.Context, *GetAccountReq) (*GetAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedUserServer) GetProfile(context.Context, *GetProfileReq) (*GetProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedUserServer) GetProfileList(context.Context, *GetProfileListReq) (*GetProfileListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileList not implemented")
}
func (UnimplementedUserServer) GetProfileUpdate(context.Context, *GetProfileUpdateReq) (*GetProfileUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileUpdate not implemented")
}
func (UnimplementedUserServer) GetUserFollow(context.Context, *GetUserFollowReq) (*GetUserFollowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFollow not implemented")
}
func (UnimplementedUserServer) GetFollowList(context.Context, *GetFollowListReq) (*GetFollowListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowList not implemented")
}
func (UnimplementedUserServer) GetFollowListCount(context.Context, *GetFollowListCountReq) (*GetFollowListCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowListCount not implemented")
}
func (UnimplementedUserServer) GetFollowedList(context.Context, *GetFollowedListReq) (*GetFollowedListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowedList not implemented")
}
func (UnimplementedUserServer) GetFollowedListCount(context.Context, *GetFollowedListCountReq) (*GetFollowedListCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowedListCount not implemented")
}
func (UnimplementedUserServer) GetUserFollows(context.Context, *GetUserFollowsReq) (*GetUserFollowsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFollows not implemented")
}
func (UnimplementedUserServer) GetUserSearch(context.Context, *GetUserSearchReq) (*GetUserSearchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSearch not implemented")
}
func (UnimplementedUserServer) GetAvatarReview(context.Context, *GetAvatarReviewReq) (*GetAvatarReviewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvatarReview not implemented")
}
func (UnimplementedUserServer) GetCoverReview(context.Context, *GetCoverReviewReq) (*GetCoverReviewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoverReview not implemented")
}
func (UnimplementedUserServer) SetProfileUpdate(context.Context, *SetProfileUpdateReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProfileUpdate not implemented")
}
func (UnimplementedUserServer) ProfileReviewPass(context.Context, *ProfileReviewPassReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileReviewPass not implemented")
}
func (UnimplementedUserServer) ProfileReviewNotPass(context.Context, *ProfileReviewNotPassReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileReviewNotPass not implemented")
}
func (UnimplementedUserServer) ChangeUserPassword(context.Context, *ChangeUserPasswordReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserPassword not implemented")
}
func (UnimplementedUserServer) UnbindUserPhone(context.Context, *UnbindUserAccountReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindUserPhone not implemented")
}
func (UnimplementedUserServer) UnbindUserEmail(context.Context, *UnbindUserAccountReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindUserEmail not implemented")
}
func (UnimplementedUserServer) UnbindUserWechat(context.Context, *UnbindUserAccountReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindUserWechat not implemented")
}
func (UnimplementedUserServer) UnbindUserQQ(context.Context, *UnbindUserAccountReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindUserQQ not implemented")
}
func (UnimplementedUserServer) UnbindUserGitee(context.Context, *UnbindUserAccountReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindUserGitee not implemented")
}
func (UnimplementedUserServer) UnbindUserGithub(context.Context, *UnbindUserAccountReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindUserGithub not implemented")
}
func (UnimplementedUserServer) GetHealth(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/UserRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserRegister(ctx, req.(*UserRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AvatarIrregular_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvatarIrregularReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AvatarIrregular(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/AvatarIrregular",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AvatarIrregular(ctx, req.(*AvatarIrregularReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddAvatarReviewDbAndCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAvatarReviewDbAndCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddAvatarReviewDbAndCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/AddAvatarReviewDbAndCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddAvatarReviewDbAndCache(ctx, req.(*AddAvatarReviewDbAndCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CoverIrregular_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoverIrregularReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CoverIrregular(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/CoverIrregular",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CoverIrregular(ctx, req.(*CoverIrregularReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddCoverReviewDbAndCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCoverReviewDbAndCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddCoverReviewDbAndCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/AddCoverReviewDbAndCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddCoverReviewDbAndCache(ctx, req.(*AddCoverReviewDbAndCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_LoginByPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginByPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).LoginByPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/LoginByPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).LoginByPassword(ctx, req.(*LoginByPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_LoginByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginByCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).LoginByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/LoginByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).LoginByCode(ctx, req.(*LoginByCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_LoginByWeChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginByWeChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).LoginByWeChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/LoginByWeChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).LoginByWeChat(ctx, req.(*LoginByWeChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_LoginByQQ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginByQQReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).LoginByQQ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/LoginByQQ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).LoginByQQ(ctx, req.(*LoginByQQReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_LoginByGithub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginByGithubReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).LoginByGithub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/LoginByGithub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).LoginByGithub(ctx, req.(*LoginByGithubReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_LoginByGitee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginByGiteeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).LoginByGitee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/LoginByGitee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).LoginByGitee(ctx, req.(*LoginByGiteeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_LoginPasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginPasswordResetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).LoginPasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/LoginPasswordReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).LoginPasswordReset(ctx, req.(*LoginPasswordResetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SendPhoneCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPhoneCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SendPhoneCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/SendPhoneCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SendPhoneCode(ctx, req.(*SendPhoneCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SendEmailCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SendEmailCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/SendEmailCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SendEmailCode(ctx, req.(*SendEmailCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetCosSessionKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCosSessionKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetCosSessionKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/GetCosSessionKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetCosSessionKey(ctx, req.(*GetCosSessionKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetUserPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetUserPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/SetUserPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetUserPhone(ctx, req.(*SetUserPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/SetUserEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetUserEmail(ctx, req.(*SetUserEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/SetUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetUserPassword(ctx, req.(*SetUserPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetUserWechat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserWechatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetUserWechat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/SetUserWechat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetUserWechat(ctx, req.(*SetUserWechatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetUserQQ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserQQReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetUserQQ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/SetUserQQ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetUserQQ(ctx, req.(*SetUserQQReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetUserGitee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserGiteeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetUserGitee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/SetUserGitee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetUserGitee(ctx, req.(*SetUserGiteeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetUserGithub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserGithubReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetUserGithub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/SetUserGithub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetUserGithub(ctx, req.(*SetUserGithubReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetUserFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserFollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetUserFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/SetUserFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetUserFollow(ctx, req.(*SetUserFollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetFollowDbAndCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFollowDbAndCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetFollowDbAndCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/SetFollowDbAndCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetFollowDbAndCache(ctx, req.(*SetFollowDbAndCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CancelUserFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelUserFollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CancelUserFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/CancelUserFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CancelUserFollow(ctx, req.(*CancelUserFollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CancelFollowDbAndCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelFollowDbAndCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CancelFollowDbAndCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/CancelFollowDbAndCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CancelFollowDbAndCache(ctx, req.(*CancelFollowDbAndCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetAccount(ctx, req.(*GetAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetProfile(ctx, req.(*GetProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetProfileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetProfileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/GetProfileList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetProfileList(ctx, req.(*GetProfileListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetProfileUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetProfileUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/GetProfileUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetProfileUpdate(ctx, req.(*GetProfileUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/GetUserFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserFollow(ctx, req.(*GetUserFollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetFollowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetFollowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/GetFollowList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetFollowList(ctx, req.(*GetFollowListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetFollowListCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowListCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetFollowListCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/GetFollowListCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetFollowListCount(ctx, req.(*GetFollowListCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetFollowedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowedListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetFollowedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/GetFollowedList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetFollowedList(ctx, req.(*GetFollowedListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetFollowedListCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowedListCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetFollowedListCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/GetFollowedListCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetFollowedListCount(ctx, req.(*GetFollowedListCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserFollows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFollowsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserFollows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/GetUserFollows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserFollows(ctx, req.(*GetUserFollowsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/GetUserSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserSearch(ctx, req.(*GetUserSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetAvatarReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvatarReviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetAvatarReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/GetAvatarReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetAvatarReview(ctx, req.(*GetAvatarReviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetCoverReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoverReviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetCoverReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/GetCoverReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetCoverReview(ctx, req.(*GetCoverReviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetProfileUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetProfileUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetProfileUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/SetProfileUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetProfileUpdate(ctx, req.(*SetProfileUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ProfileReviewPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileReviewPassReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ProfileReviewPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/ProfileReviewPass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ProfileReviewPass(ctx, req.(*ProfileReviewPassReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ProfileReviewNotPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileReviewNotPassReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ProfileReviewNotPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/ProfileReviewNotPass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ProfileReviewNotPass(ctx, req.(*ProfileReviewNotPassReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ChangeUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ChangeUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/ChangeUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ChangeUserPassword(ctx, req.(*ChangeUserPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UnbindUserPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindUserAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UnbindUserPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/UnbindUserPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UnbindUserPhone(ctx, req.(*UnbindUserAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UnbindUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindUserAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UnbindUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/UnbindUserEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UnbindUserEmail(ctx, req.(*UnbindUserAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UnbindUserWechat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindUserAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UnbindUserWechat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/UnbindUserWechat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UnbindUserWechat(ctx, req.(*UnbindUserAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UnbindUserQQ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindUserAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UnbindUserQQ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/UnbindUserQQ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UnbindUserQQ(ctx, req.(*UnbindUserAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UnbindUserGitee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindUserAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UnbindUserGitee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/UnbindUserGitee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UnbindUserGitee(ctx, req.(*UnbindUserAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UnbindUserGithub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindUserAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UnbindUserGithub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/UnbindUserGithub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UnbindUserGithub(ctx, req.(*UnbindUserAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/GetHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetHealth(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.v1.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserRegister",
			Handler:    _User_UserRegister_Handler,
		},
		{
			MethodName: "AvatarIrregular",
			Handler:    _User_AvatarIrregular_Handler,
		},
		{
			MethodName: "AddAvatarReviewDbAndCache",
			Handler:    _User_AddAvatarReviewDbAndCache_Handler,
		},
		{
			MethodName: "CoverIrregular",
			Handler:    _User_CoverIrregular_Handler,
		},
		{
			MethodName: "AddCoverReviewDbAndCache",
			Handler:    _User_AddCoverReviewDbAndCache_Handler,
		},
		{
			MethodName: "LoginByPassword",
			Handler:    _User_LoginByPassword_Handler,
		},
		{
			MethodName: "LoginByCode",
			Handler:    _User_LoginByCode_Handler,
		},
		{
			MethodName: "LoginByWeChat",
			Handler:    _User_LoginByWeChat_Handler,
		},
		{
			MethodName: "LoginByQQ",
			Handler:    _User_LoginByQQ_Handler,
		},
		{
			MethodName: "LoginByGithub",
			Handler:    _User_LoginByGithub_Handler,
		},
		{
			MethodName: "LoginByGitee",
			Handler:    _User_LoginByGitee_Handler,
		},
		{
			MethodName: "LoginPasswordReset",
			Handler:    _User_LoginPasswordReset_Handler,
		},
		{
			MethodName: "SendPhoneCode",
			Handler:    _User_SendPhoneCode_Handler,
		},
		{
			MethodName: "SendEmailCode",
			Handler:    _User_SendEmailCode_Handler,
		},
		{
			MethodName: "GetCosSessionKey",
			Handler:    _User_GetCosSessionKey_Handler,
		},
		{
			MethodName: "SetUserPhone",
			Handler:    _User_SetUserPhone_Handler,
		},
		{
			MethodName: "SetUserEmail",
			Handler:    _User_SetUserEmail_Handler,
		},
		{
			MethodName: "SetUserPassword",
			Handler:    _User_SetUserPassword_Handler,
		},
		{
			MethodName: "SetUserWechat",
			Handler:    _User_SetUserWechat_Handler,
		},
		{
			MethodName: "SetUserQQ",
			Handler:    _User_SetUserQQ_Handler,
		},
		{
			MethodName: "SetUserGitee",
			Handler:    _User_SetUserGitee_Handler,
		},
		{
			MethodName: "SetUserGithub",
			Handler:    _User_SetUserGithub_Handler,
		},
		{
			MethodName: "SetUserFollow",
			Handler:    _User_SetUserFollow_Handler,
		},
		{
			MethodName: "SetFollowDbAndCache",
			Handler:    _User_SetFollowDbAndCache_Handler,
		},
		{
			MethodName: "CancelUserFollow",
			Handler:    _User_CancelUserFollow_Handler,
		},
		{
			MethodName: "CancelFollowDbAndCache",
			Handler:    _User_CancelFollowDbAndCache_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _User_GetAccount_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _User_GetProfile_Handler,
		},
		{
			MethodName: "GetProfileList",
			Handler:    _User_GetProfileList_Handler,
		},
		{
			MethodName: "GetProfileUpdate",
			Handler:    _User_GetProfileUpdate_Handler,
		},
		{
			MethodName: "GetUserFollow",
			Handler:    _User_GetUserFollow_Handler,
		},
		{
			MethodName: "GetFollowList",
			Handler:    _User_GetFollowList_Handler,
		},
		{
			MethodName: "GetFollowListCount",
			Handler:    _User_GetFollowListCount_Handler,
		},
		{
			MethodName: "GetFollowedList",
			Handler:    _User_GetFollowedList_Handler,
		},
		{
			MethodName: "GetFollowedListCount",
			Handler:    _User_GetFollowedListCount_Handler,
		},
		{
			MethodName: "GetUserFollows",
			Handler:    _User_GetUserFollows_Handler,
		},
		{
			MethodName: "GetUserSearch",
			Handler:    _User_GetUserSearch_Handler,
		},
		{
			MethodName: "GetAvatarReview",
			Handler:    _User_GetAvatarReview_Handler,
		},
		{
			MethodName: "GetCoverReview",
			Handler:    _User_GetCoverReview_Handler,
		},
		{
			MethodName: "SetProfileUpdate",
			Handler:    _User_SetProfileUpdate_Handler,
		},
		{
			MethodName: "ProfileReviewPass",
			Handler:    _User_ProfileReviewPass_Handler,
		},
		{
			MethodName: "ProfileReviewNotPass",
			Handler:    _User_ProfileReviewNotPass_Handler,
		},
		{
			MethodName: "ChangeUserPassword",
			Handler:    _User_ChangeUserPassword_Handler,
		},
		{
			MethodName: "UnbindUserPhone",
			Handler:    _User_UnbindUserPhone_Handler,
		},
		{
			MethodName: "UnbindUserEmail",
			Handler:    _User_UnbindUserEmail_Handler,
		},
		{
			MethodName: "UnbindUserWechat",
			Handler:    _User_UnbindUserWechat_Handler,
		},
		{
			MethodName: "UnbindUserQQ",
			Handler:    _User_UnbindUserQQ_Handler,
		},
		{
			MethodName: "UnbindUserGitee",
			Handler:    _User_UnbindUserGitee_Handler,
		},
		{
			MethodName: "UnbindUserGithub",
			Handler:    _User_UnbindUserGithub_Handler,
		},
		{
			MethodName: "GetHealth",
			Handler:    _User_GetHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/service/v1/user.proto",
}
