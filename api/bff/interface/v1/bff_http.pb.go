// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.0
// - protoc             v3.20.0
// source: bff/interface/v1/bff.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBffAddColumnIncludes = "/bff.v1.Bff/AddColumnIncludes"
const OperationBffArticleDraftMark = "/bff.v1.Bff/ArticleDraftMark"
const OperationBffArticleStatisticJudge = "/bff.v1.Bff/ArticleStatisticJudge"
const OperationBffCancelArticleAgree = "/bff.v1.Bff/CancelArticleAgree"
const OperationBffCancelArticleCollect = "/bff.v1.Bff/CancelArticleCollect"
const OperationBffCancelColumnAgree = "/bff.v1.Bff/CancelColumnAgree"
const OperationBffCancelColumnCollect = "/bff.v1.Bff/CancelColumnCollect"
const OperationBffCancelSubscribeColumn = "/bff.v1.Bff/CancelSubscribeColumn"
const OperationBffCancelTalkAgree = "/bff.v1.Bff/CancelTalkAgree"
const OperationBffCancelTalkCollect = "/bff.v1.Bff/CancelTalkCollect"
const OperationBffCancelUserFollow = "/bff.v1.Bff/CancelUserFollow"
const OperationBffChangeUserPassword = "/bff.v1.Bff/ChangeUserPassword"
const OperationBffColumnStatisticJudge = "/bff.v1.Bff/ColumnStatisticJudge"
const OperationBffCreateArticleDraft = "/bff.v1.Bff/CreateArticleDraft"
const OperationBffCreateCollections = "/bff.v1.Bff/CreateCollections"
const OperationBffCreateColumnDraft = "/bff.v1.Bff/CreateColumnDraft"
const OperationBffCreateTalkDraft = "/bff.v1.Bff/CreateTalkDraft"
const OperationBffDeleteArticle = "/bff.v1.Bff/DeleteArticle"
const OperationBffDeleteCollections = "/bff.v1.Bff/DeleteCollections"
const OperationBffDeleteColumn = "/bff.v1.Bff/DeleteColumn"
const OperationBffDeleteColumnIncludes = "/bff.v1.Bff/DeleteColumnIncludes"
const OperationBffDeleteTalk = "/bff.v1.Bff/DeleteTalk"
const OperationBffEditCollections = "/bff.v1.Bff/EditCollections"
const OperationBffGetAccount = "/bff.v1.Bff/GetAccount"
const OperationBffGetAchievementList = "/bff.v1.Bff/GetAchievementList"
const OperationBffGetArticleCount = "/bff.v1.Bff/GetArticleCount"
const OperationBffGetArticleCountVisitor = "/bff.v1.Bff/GetArticleCountVisitor"
const OperationBffGetArticleDraftList = "/bff.v1.Bff/GetArticleDraftList"
const OperationBffGetArticleList = "/bff.v1.Bff/GetArticleList"
const OperationBffGetArticleListHot = "/bff.v1.Bff/GetArticleListHot"
const OperationBffGetArticleListStatistic = "/bff.v1.Bff/GetArticleListStatistic"
const OperationBffGetArticleStatistic = "/bff.v1.Bff/GetArticleStatistic"
const OperationBffGetCollectArticle = "/bff.v1.Bff/GetCollectArticle"
const OperationBffGetCollectArticleCount = "/bff.v1.Bff/GetCollectArticleCount"
const OperationBffGetCollectColumn = "/bff.v1.Bff/GetCollectColumn"
const OperationBffGetCollectColumnCount = "/bff.v1.Bff/GetCollectColumnCount"
const OperationBffGetCollectTalk = "/bff.v1.Bff/GetCollectTalk"
const OperationBffGetCollectTalkCount = "/bff.v1.Bff/GetCollectTalkCount"
const OperationBffGetCollection = "/bff.v1.Bff/GetCollection"
const OperationBffGetCollections = "/bff.v1.Bff/GetCollections"
const OperationBffGetCollectionsByVisitor = "/bff.v1.Bff/GetCollectionsByVisitor"
const OperationBffGetCollectionsCount = "/bff.v1.Bff/GetCollectionsCount"
const OperationBffGetCollectionsVisitorCount = "/bff.v1.Bff/GetCollectionsVisitorCount"
const OperationBffGetColumnArticleList = "/bff.v1.Bff/GetColumnArticleList"
const OperationBffGetColumnCount = "/bff.v1.Bff/GetColumnCount"
const OperationBffGetColumnCountVisitor = "/bff.v1.Bff/GetColumnCountVisitor"
const OperationBffGetColumnList = "/bff.v1.Bff/GetColumnList"
const OperationBffGetColumnListHot = "/bff.v1.Bff/GetColumnListHot"
const OperationBffGetColumnListStatistic = "/bff.v1.Bff/GetColumnListStatistic"
const OperationBffGetColumnStatistic = "/bff.v1.Bff/GetColumnStatistic"
const OperationBffGetColumnSubscribes = "/bff.v1.Bff/GetColumnSubscribes"
const OperationBffGetCosSessionKey = "/bff.v1.Bff/GetCosSessionKey"
const OperationBffGetFollowList = "/bff.v1.Bff/GetFollowList"
const OperationBffGetFollowListCount = "/bff.v1.Bff/GetFollowListCount"
const OperationBffGetFollowedList = "/bff.v1.Bff/GetFollowedList"
const OperationBffGetFollowedListCount = "/bff.v1.Bff/GetFollowedListCount"
const OperationBffGetLastArticleDraft = "/bff.v1.Bff/GetLastArticleDraft"
const OperationBffGetLastColumnDraft = "/bff.v1.Bff/GetLastColumnDraft"
const OperationBffGetLastTalkDraft = "/bff.v1.Bff/GetLastTalkDraft"
const OperationBffGetLeaderBoard = "/bff.v1.Bff/GetLeaderBoard"
const OperationBffGetNews = "/bff.v1.Bff/GetNews"
const OperationBffGetProfile = "/bff.v1.Bff/GetProfile"
const OperationBffGetProfileList = "/bff.v1.Bff/GetProfileList"
const OperationBffGetProfileUpdate = "/bff.v1.Bff/GetProfileUpdate"
const OperationBffGetSubscribeList = "/bff.v1.Bff/GetSubscribeList"
const OperationBffGetSubscribeListCount = "/bff.v1.Bff/GetSubscribeListCount"
const OperationBffGetTalkCount = "/bff.v1.Bff/GetTalkCount"
const OperationBffGetTalkCountVisitor = "/bff.v1.Bff/GetTalkCountVisitor"
const OperationBffGetTalkList = "/bff.v1.Bff/GetTalkList"
const OperationBffGetTalkListHot = "/bff.v1.Bff/GetTalkListHot"
const OperationBffGetTalkListStatistic = "/bff.v1.Bff/GetTalkListStatistic"
const OperationBffGetTalkStatistic = "/bff.v1.Bff/GetTalkStatistic"
const OperationBffGetUserAchievement = "/bff.v1.Bff/GetUserAchievement"
const OperationBffGetUserArticleList = "/bff.v1.Bff/GetUserArticleList"
const OperationBffGetUserArticleListVisitor = "/bff.v1.Bff/GetUserArticleListVisitor"
const OperationBffGetUserColumnList = "/bff.v1.Bff/GetUserColumnList"
const OperationBffGetUserColumnListVisitor = "/bff.v1.Bff/GetUserColumnListVisitor"
const OperationBffGetUserFollow = "/bff.v1.Bff/GetUserFollow"
const OperationBffGetUserFollows = "/bff.v1.Bff/GetUserFollows"
const OperationBffGetUserInfo = "/bff.v1.Bff/GetUserInfo"
const OperationBffGetUserTalkList = "/bff.v1.Bff/GetUserTalkList"
const OperationBffGetUserTalkListVisitor = "/bff.v1.Bff/GetUserTalkListVisitor"
const OperationBffLoginByCode = "/bff.v1.Bff/LoginByCode"
const OperationBffLoginByGithub = "/bff.v1.Bff/LoginByGithub"
const OperationBffLoginByPassword = "/bff.v1.Bff/LoginByPassword"
const OperationBffLoginByWeChat = "/bff.v1.Bff/LoginByWeChat"
const OperationBffLoginPasswordReset = "/bff.v1.Bff/LoginPasswordReset"
const OperationBffSendArticle = "/bff.v1.Bff/SendArticle"
const OperationBffSendArticleEdit = "/bff.v1.Bff/SendArticleEdit"
const OperationBffSendColumn = "/bff.v1.Bff/SendColumn"
const OperationBffSendColumnEdit = "/bff.v1.Bff/SendColumnEdit"
const OperationBffSendEmailCode = "/bff.v1.Bff/SendEmailCode"
const OperationBffSendPhoneCode = "/bff.v1.Bff/SendPhoneCode"
const OperationBffSendTalk = "/bff.v1.Bff/SendTalk"
const OperationBffSendTalkEdit = "/bff.v1.Bff/SendTalkEdit"
const OperationBffSetArticleAgree = "/bff.v1.Bff/SetArticleAgree"
const OperationBffSetArticleCollect = "/bff.v1.Bff/SetArticleCollect"
const OperationBffSetArticleView = "/bff.v1.Bff/SetArticleView"
const OperationBffSetColumnAgree = "/bff.v1.Bff/SetColumnAgree"
const OperationBffSetColumnCollect = "/bff.v1.Bff/SetColumnCollect"
const OperationBffSetColumnView = "/bff.v1.Bff/SetColumnView"
const OperationBffSetProfileUpdate = "/bff.v1.Bff/SetProfileUpdate"
const OperationBffSetTalkAgree = "/bff.v1.Bff/SetTalkAgree"
const OperationBffSetTalkCollect = "/bff.v1.Bff/SetTalkCollect"
const OperationBffSetTalkView = "/bff.v1.Bff/SetTalkView"
const OperationBffSetUserEmail = "/bff.v1.Bff/SetUserEmail"
const OperationBffSetUserFollow = "/bff.v1.Bff/SetUserFollow"
const OperationBffSetUserPassword = "/bff.v1.Bff/SetUserPassword"
const OperationBffSetUserPhone = "/bff.v1.Bff/SetUserPhone"
const OperationBffSubscribeColumn = "/bff.v1.Bff/SubscribeColumn"
const OperationBffSubscribeJudge = "/bff.v1.Bff/SubscribeJudge"
const OperationBffTalkStatisticJudge = "/bff.v1.Bff/TalkStatisticJudge"
const OperationBffUnbindUserEmail = "/bff.v1.Bff/UnbindUserEmail"
const OperationBffUnbindUserPhone = "/bff.v1.Bff/UnbindUserPhone"
const OperationBffUserRegister = "/bff.v1.Bff/UserRegister"

type BffHTTPServer interface {
	AddColumnIncludes(context.Context, *AddColumnIncludesReq) (*emptypb.Empty, error)
	ArticleDraftMark(context.Context, *ArticleDraftMarkReq) (*emptypb.Empty, error)
	ArticleStatisticJudge(context.Context, *ArticleStatisticJudgeReq) (*ArticleStatisticJudgeReply, error)
	CancelArticleAgree(context.Context, *CancelArticleAgreeReq) (*emptypb.Empty, error)
	CancelArticleCollect(context.Context, *CancelArticleCollectReq) (*emptypb.Empty, error)
	CancelColumnAgree(context.Context, *CancelColumnAgreeReq) (*emptypb.Empty, error)
	CancelColumnCollect(context.Context, *CancelColumnCollectReq) (*emptypb.Empty, error)
	CancelSubscribeColumn(context.Context, *CancelSubscribeColumnReq) (*emptypb.Empty, error)
	CancelTalkAgree(context.Context, *CancelTalkAgreeReq) (*emptypb.Empty, error)
	CancelTalkCollect(context.Context, *CancelTalkCollectReq) (*emptypb.Empty, error)
	CancelUserFollow(context.Context, *CancelUserFollowReq) (*emptypb.Empty, error)
	ChangeUserPassword(context.Context, *ChangeUserPasswordReq) (*emptypb.Empty, error)
	ColumnStatisticJudge(context.Context, *ColumnStatisticJudgeReq) (*ColumnStatisticJudgeReply, error)
	CreateArticleDraft(context.Context, *emptypb.Empty) (*CreateArticleDraftReply, error)
	CreateCollections(context.Context, *CreateCollectionsReq) (*emptypb.Empty, error)
	CreateColumnDraft(context.Context, *emptypb.Empty) (*CreateColumnDraftReply, error)
	CreateTalkDraft(context.Context, *emptypb.Empty) (*CreateTalkDraftReply, error)
	DeleteArticle(context.Context, *DeleteArticleReq) (*emptypb.Empty, error)
	DeleteCollections(context.Context, *DeleteCollectionsReq) (*emptypb.Empty, error)
	DeleteColumn(context.Context, *DeleteColumnReq) (*emptypb.Empty, error)
	DeleteColumnIncludes(context.Context, *DeleteColumnIncludesReq) (*emptypb.Empty, error)
	DeleteTalk(context.Context, *DeleteTalkReq) (*emptypb.Empty, error)
	EditCollections(context.Context, *EditCollectionsReq) (*emptypb.Empty, error)
	GetAccount(context.Context, *emptypb.Empty) (*GetAccountReply, error)
	GetAchievementList(context.Context, *GetAchievementListReq) (*GetAchievementListReply, error)
	GetArticleCount(context.Context, *emptypb.Empty) (*GetArticleCountReply, error)
	GetArticleCountVisitor(context.Context, *GetArticleCountVisitorReq) (*GetArticleCountReply, error)
	GetArticleDraftList(context.Context, *emptypb.Empty) (*GetArticleDraftListReply, error)
	GetArticleList(context.Context, *GetArticleListReq) (*GetArticleListReply, error)
	GetArticleListHot(context.Context, *GetArticleListHotReq) (*GetArticleListHotReply, error)
	GetArticleListStatistic(context.Context, *GetArticleListStatisticReq) (*GetArticleListStatisticReply, error)
	GetArticleStatistic(context.Context, *GetArticleStatisticReq) (*GetArticleStatisticReply, error)
	GetCollectArticle(context.Context, *GetCollectArticleReq) (*GetArticleListReply, error)
	GetCollectArticleCount(context.Context, *GetCollectArticleCountReq) (*GetCollectArticleCountReply, error)
	GetCollectColumn(context.Context, *GetCollectColumnReq) (*GetColumnListReply, error)
	GetCollectColumnCount(context.Context, *GetCollectColumnCountReq) (*GetCollectColumnCountReply, error)
	GetCollectTalk(context.Context, *GetCollectTalkReq) (*GetTalkListReply, error)
	GetCollectTalkCount(context.Context, *GetCollectTalkCountReq) (*GetCollectTalkCountReply, error)
	GetCollection(context.Context, *GetCollectionReq) (*GetCollectionReply, error)
	GetCollections(context.Context, *GetCollectionsReq) (*GetCollectionsReply, error)
	GetCollectionsByVisitor(context.Context, *GetCollectionsByVisitorReq) (*GetCollectionsReply, error)
	GetCollectionsCount(context.Context, *emptypb.Empty) (*GetCollectionsCountReply, error)
	GetCollectionsVisitorCount(context.Context, *GetCollectionsVisitorCountReq) (*GetCollectionsCountReply, error)
	GetColumnArticleList(context.Context, *GetColumnArticleListReq) (*GetArticleListReply, error)
	GetColumnCount(context.Context, *emptypb.Empty) (*GetColumnCountReply, error)
	GetColumnCountVisitor(context.Context, *GetColumnCountVisitorReq) (*GetColumnCountReply, error)
	GetColumnList(context.Context, *GetColumnListReq) (*GetColumnListReply, error)
	GetColumnListHot(context.Context, *GetColumnListHotReq) (*GetColumnListHotReply, error)
	GetColumnListStatistic(context.Context, *GetColumnListStatisticReq) (*GetColumnListStatisticReply, error)
	GetColumnStatistic(context.Context, *GetColumnStatisticReq) (*GetColumnStatisticReply, error)
	GetColumnSubscribes(context.Context, *GetColumnSubscribesReq) (*GetColumnSubscribesReply, error)
	GetCosSessionKey(context.Context, *emptypb.Empty) (*GetCosSessionKeyReply, error)
	GetFollowList(context.Context, *GetFollowListReq) (*GetFollowListReply, error)
	GetFollowListCount(context.Context, *GetFollowListCountReq) (*GetFollowListCountReply, error)
	GetFollowedList(context.Context, *GetFollowedListReq) (*GetFollowedListReply, error)
	GetFollowedListCount(context.Context, *GetFollowedListCountReq) (*GetFollowedListCountReply, error)
	GetLastArticleDraft(context.Context, *emptypb.Empty) (*GetLastArticleDraftReply, error)
	GetLastColumnDraft(context.Context, *emptypb.Empty) (*GetLastColumnDraftReply, error)
	GetLastTalkDraft(context.Context, *emptypb.Empty) (*GetLastTalkDraftReply, error)
	GetLeaderBoard(context.Context, *emptypb.Empty) (*GetLeaderBoardReply, error)
	GetNews(context.Context, *GetNewsReq) (*GetNewsReply, error)
	GetProfile(context.Context, *emptypb.Empty) (*GetProfileReply, error)
	GetProfileList(context.Context, *GetProfileListReq) (*GetProfileListReply, error)
	GetProfileUpdate(context.Context, *emptypb.Empty) (*GetProfileUpdateReply, error)
	GetSubscribeList(context.Context, *GetSubscribeListReq) (*GetSubscribeListReply, error)
	GetSubscribeListCount(context.Context, *GetSubscribeListCountReq) (*GetSubscribeListCountReply, error)
	GetTalkCount(context.Context, *emptypb.Empty) (*GetTalkCountReply, error)
	GetTalkCountVisitor(context.Context, *GetTalkCountVisitorReq) (*GetTalkCountReply, error)
	GetTalkList(context.Context, *GetTalkListReq) (*GetTalkListReply, error)
	GetTalkListHot(context.Context, *GetTalkListHotReq) (*GetTalkListHotReply, error)
	GetTalkListStatistic(context.Context, *GetTalkListStatisticReq) (*GetTalkListStatisticReply, error)
	GetTalkStatistic(context.Context, *GetTalkStatisticReq) (*GetTalkStatisticReply, error)
	GetUserAchievement(context.Context, *GetUserAchievementReq) (*GetUserAchievementReply, error)
	GetUserArticleList(context.Context, *GetUserArticleListReq) (*GetArticleListReply, error)
	GetUserArticleListVisitor(context.Context, *GetUserArticleListVisitorReq) (*GetArticleListReply, error)
	GetUserColumnList(context.Context, *GetUserColumnListReq) (*GetColumnListReply, error)
	GetUserColumnListVisitor(context.Context, *GetUserColumnListVisitorReq) (*GetColumnListReply, error)
	GetUserFollow(context.Context, *GetUserFollowReq) (*GetUserFollowReply, error)
	GetUserFollows(context.Context, *GetUserFollowsReq) (*GetUserFollowsReply, error)
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoReply, error)
	GetUserTalkList(context.Context, *GetUserTalkListReq) (*GetTalkListReply, error)
	GetUserTalkListVisitor(context.Context, *GetUserTalkListVisitorReq) (*GetTalkListReply, error)
	LoginByCode(context.Context, *LoginByCodeReq) (*LoginReply, error)
	LoginByGithub(context.Context, *LoginByGithubReq) (*LoginReply, error)
	LoginByPassword(context.Context, *LoginByPasswordReq) (*LoginReply, error)
	LoginByWeChat(context.Context, *LoginByWeChatReq) (*LoginReply, error)
	LoginPasswordReset(context.Context, *LoginPasswordResetReq) (*emptypb.Empty, error)
	SendArticle(context.Context, *SendArticleReq) (*emptypb.Empty, error)
	SendArticleEdit(context.Context, *SendArticleEditReq) (*emptypb.Empty, error)
	SendColumn(context.Context, *SendColumnReq) (*emptypb.Empty, error)
	SendColumnEdit(context.Context, *SendColumnEditReq) (*emptypb.Empty, error)
	SendEmailCode(context.Context, *SendEmailCodeReq) (*emptypb.Empty, error)
	SendPhoneCode(context.Context, *SendPhoneCodeReq) (*emptypb.Empty, error)
	SendTalk(context.Context, *SendTalkReq) (*emptypb.Empty, error)
	SendTalkEdit(context.Context, *SendTalkEditReq) (*emptypb.Empty, error)
	SetArticleAgree(context.Context, *SetArticleAgreeReq) (*emptypb.Empty, error)
	SetArticleCollect(context.Context, *SetArticleCollectReq) (*emptypb.Empty, error)
	SetArticleView(context.Context, *SetArticleViewReq) (*emptypb.Empty, error)
	SetColumnAgree(context.Context, *SetColumnAgreeReq) (*emptypb.Empty, error)
	SetColumnCollect(context.Context, *SetColumnCollectReq) (*emptypb.Empty, error)
	SetColumnView(context.Context, *SetColumnViewReq) (*emptypb.Empty, error)
	SetProfileUpdate(context.Context, *SetProfileUpdateReq) (*emptypb.Empty, error)
	SetTalkAgree(context.Context, *SetTalkAgreeReq) (*emptypb.Empty, error)
	SetTalkCollect(context.Context, *SetTalkCollectReq) (*emptypb.Empty, error)
	SetTalkView(context.Context, *SetTalkViewReq) (*emptypb.Empty, error)
	SetUserEmail(context.Context, *SetUserEmailReq) (*emptypb.Empty, error)
	SetUserFollow(context.Context, *SetUserFollowReq) (*emptypb.Empty, error)
	SetUserPassword(context.Context, *SetUserPasswordReq) (*emptypb.Empty, error)
	SetUserPhone(context.Context, *SetUserPhoneReq) (*emptypb.Empty, error)
	SubscribeColumn(context.Context, *SubscribeColumnReq) (*emptypb.Empty, error)
	SubscribeJudge(context.Context, *SubscribeJudgeReq) (*SubscribeJudgeReply, error)
	TalkStatisticJudge(context.Context, *TalkStatisticJudgeReq) (*TalkStatisticJudgeReply, error)
	UnbindUserEmail(context.Context, *UnbindUserEmailReq) (*emptypb.Empty, error)
	UnbindUserPhone(context.Context, *UnbindUserPhoneReq) (*emptypb.Empty, error)
	UserRegister(context.Context, *UserRegisterReq) (*emptypb.Empty, error)
}

func RegisterBffHTTPServer(s *http.Server, srv BffHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/user/register", _Bff_UserRegister0_HTTP_Handler(srv))
	r.POST("/v1/user/login/password", _Bff_LoginByPassword0_HTTP_Handler(srv))
	r.POST("/v1/user/login/code", _Bff_LoginByCode0_HTTP_Handler(srv))
	r.POST("/v1/user/login/wechat", _Bff_LoginByWeChat0_HTTP_Handler(srv))
	r.POST("/v1/user/login/github", _Bff_LoginByGithub0_HTTP_Handler(srv))
	r.POST("/v1/user/login/password/reset", _Bff_LoginPasswordReset0_HTTP_Handler(srv))
	r.POST("/v1/user/code/phone", _Bff_SendPhoneCode0_HTTP_Handler(srv))
	r.POST("/v1/user/code/email", _Bff_SendEmailCode0_HTTP_Handler(srv))
	r.GET("/v1/get/cos/session/key", _Bff_GetCosSessionKey0_HTTP_Handler(srv))
	r.GET("/v1/get/user/account", _Bff_GetAccount0_HTTP_Handler(srv))
	r.GET("/v1/get/user/profile", _Bff_GetProfile0_HTTP_Handler(srv))
	r.GET("/v1/get/profile/list", _Bff_GetProfileList0_HTTP_Handler(srv))
	r.GET("/v1/get/user/info", _Bff_GetUserInfo0_HTTP_Handler(srv))
	r.POST("/v1/get/user/follow", _Bff_GetUserFollow0_HTTP_Handler(srv))
	r.POST("/v1/get/user/follows", _Bff_GetUserFollows0_HTTP_Handler(srv))
	r.GET("/v1/get/follow/list", _Bff_GetFollowList0_HTTP_Handler(srv))
	r.GET("/v1/get/follow/list/count", _Bff_GetFollowListCount0_HTTP_Handler(srv))
	r.GET("/v1/get/followed/list", _Bff_GetFollowedList0_HTTP_Handler(srv))
	r.GET("/v1/get/followed/list/count", _Bff_GetFollowedListCount0_HTTP_Handler(srv))
	r.GET("/v1/get/user/profile/update", _Bff_GetProfileUpdate0_HTTP_Handler(srv))
	r.POST("/v1/set/user/profile/update", _Bff_SetProfileUpdate0_HTTP_Handler(srv))
	r.POST("/v1/set/user/phone", _Bff_SetUserPhone0_HTTP_Handler(srv))
	r.POST("/v1/set/user/email", _Bff_SetUserEmail0_HTTP_Handler(srv))
	r.POST("/v1/set/user/password", _Bff_SetUserPassword0_HTTP_Handler(srv))
	r.POST("/v1/set/user/follow", _Bff_SetUserFollow0_HTTP_Handler(srv))
	r.POST("/v1/cancel/user/follow", _Bff_CancelUserFollow0_HTTP_Handler(srv))
	r.POST("/v1/change/user/password", _Bff_ChangeUserPassword0_HTTP_Handler(srv))
	r.POST("/v1/unbind/user/phone", _Bff_UnbindUserPhone0_HTTP_Handler(srv))
	r.POST("/v1/unbind/user/email", _Bff_UnbindUserEmail0_HTTP_Handler(srv))
	r.GET("/v1/get/leaderboard", _Bff_GetLeaderBoard0_HTTP_Handler(srv))
	r.GET("/v1/get/collect/article", _Bff_GetCollectArticle0_HTTP_Handler(srv))
	r.GET("/v1/get/collect/article/count", _Bff_GetCollectArticleCount0_HTTP_Handler(srv))
	r.GET("/v1/get/collect/talk", _Bff_GetCollectTalk0_HTTP_Handler(srv))
	r.GET("/v1/get/collect/talk/count", _Bff_GetCollectTalkCount0_HTTP_Handler(srv))
	r.GET("/v1/get/collect/column", _Bff_GetCollectColumn0_HTTP_Handler(srv))
	r.GET("/v1/get/collect/column/count", _Bff_GetCollectColumnCount0_HTTP_Handler(srv))
	r.GET("/v1/get/collection", _Bff_GetCollection0_HTTP_Handler(srv))
	r.POST("/v1/get/collections", _Bff_GetCollections0_HTTP_Handler(srv))
	r.POST("/v1/get/collections/count", _Bff_GetCollectionsCount0_HTTP_Handler(srv))
	r.GET("/v1/get/collections/visitor", _Bff_GetCollectionsByVisitor0_HTTP_Handler(srv))
	r.GET("/v1/get/collections/visitor/count", _Bff_GetCollectionsVisitorCount0_HTTP_Handler(srv))
	r.POST("/v1/create/collections", _Bff_CreateCollections0_HTTP_Handler(srv))
	r.POST("/v1/edit/collections", _Bff_EditCollections0_HTTP_Handler(srv))
	r.POST("/v1/delete/collections", _Bff_DeleteCollections0_HTTP_Handler(srv))
	r.GET("/v1/get/article/list", _Bff_GetArticleList0_HTTP_Handler(srv))
	r.GET("/v1/get/article/list/hot", _Bff_GetArticleListHot0_HTTP_Handler(srv))
	r.GET("/v1/get/column/article/list", _Bff_GetColumnArticleList0_HTTP_Handler(srv))
	r.POST("/v1/get/article/count", _Bff_GetArticleCount0_HTTP_Handler(srv))
	r.GET("/v1/get/article/count/visitor", _Bff_GetArticleCountVisitor0_HTTP_Handler(srv))
	r.POST("/v1/get/user/article/list", _Bff_GetUserArticleList0_HTTP_Handler(srv))
	r.GET("/v1/get/user/article/list/visitor", _Bff_GetUserArticleListVisitor0_HTTP_Handler(srv))
	r.GET("/v1/get/article/statistic", _Bff_GetArticleStatistic0_HTTP_Handler(srv))
	r.GET("/v1/get/article/list/statistic", _Bff_GetArticleListStatistic0_HTTP_Handler(srv))
	r.GET("/v1/get/last/article/draft", _Bff_GetLastArticleDraft0_HTTP_Handler(srv))
	r.POST("/v1/create/article/draft", _Bff_CreateArticleDraft0_HTTP_Handler(srv))
	r.POST("/v1/article/draft/mark", _Bff_ArticleDraftMark0_HTTP_Handler(srv))
	r.GET("/v1/get/article/draft/list", _Bff_GetArticleDraftList0_HTTP_Handler(srv))
	r.POST("/v1/send/article", _Bff_SendArticle0_HTTP_Handler(srv))
	r.POST("/v1/send/article/edit", _Bff_SendArticleEdit0_HTTP_Handler(srv))
	r.POST("/v1/delete/article", _Bff_DeleteArticle0_HTTP_Handler(srv))
	r.POST("/v1/set/article/agree", _Bff_SetArticleAgree0_HTTP_Handler(srv))
	r.POST("/v1/set/article/view", _Bff_SetArticleView0_HTTP_Handler(srv))
	r.POST("/v1/set/article/collect", _Bff_SetArticleCollect0_HTTP_Handler(srv))
	r.POST("/v1/cancel/article/agree", _Bff_CancelArticleAgree0_HTTP_Handler(srv))
	r.POST("/v1/cancel/article/collect", _Bff_CancelArticleCollect0_HTTP_Handler(srv))
	r.POST("/v1/article/statistic/judge", _Bff_ArticleStatisticJudge0_HTTP_Handler(srv))
	r.GET("/v1/get/talk/list", _Bff_GetTalkList0_HTTP_Handler(srv))
	r.GET("/v1/get/talk/list/hot", _Bff_GetTalkListHot0_HTTP_Handler(srv))
	r.GET("/v1/get/talk/list/statistic", _Bff_GetTalkListStatistic0_HTTP_Handler(srv))
	r.POST("/v1/get/user/talk/list", _Bff_GetUserTalkList0_HTTP_Handler(srv))
	r.GET("/v1/get/user/talk/list/visitor", _Bff_GetUserTalkListVisitor0_HTTP_Handler(srv))
	r.POST("/v1/get/talk/count", _Bff_GetTalkCount0_HTTP_Handler(srv))
	r.GET("/v1/get/talk/count/visitor", _Bff_GetTalkCountVisitor0_HTTP_Handler(srv))
	r.GET("/v1/get/talk/statistic", _Bff_GetTalkStatistic0_HTTP_Handler(srv))
	r.GET("/v1/get/last/talk/draft", _Bff_GetLastTalkDraft0_HTTP_Handler(srv))
	r.POST("/v1/create/talk/draft", _Bff_CreateTalkDraft0_HTTP_Handler(srv))
	r.POST("/v1/send/talk", _Bff_SendTalk0_HTTP_Handler(srv))
	r.POST("/v1/send/talk/edit", _Bff_SendTalkEdit0_HTTP_Handler(srv))
	r.POST("/v1/delete/talk", _Bff_DeleteTalk0_HTTP_Handler(srv))
	r.POST("/v1/set/talk/view", _Bff_SetTalkView0_HTTP_Handler(srv))
	r.POST("/v1/talk/statistic/judge", _Bff_TalkStatisticJudge0_HTTP_Handler(srv))
	r.POST("/v1/set/talk/agree", _Bff_SetTalkAgree0_HTTP_Handler(srv))
	r.POST("/v1/set/talk/collect", _Bff_SetTalkCollect0_HTTP_Handler(srv))
	r.POST("/v1/cancel/talk/agree", _Bff_CancelTalkAgree0_HTTP_Handler(srv))
	r.POST("/v1/cancel/talk/collect", _Bff_CancelTalkCollect0_HTTP_Handler(srv))
	r.GET("/v1/get/last/column/draft", _Bff_GetLastColumnDraft0_HTTP_Handler(srv))
	r.POST("/v1/create/column/draft", _Bff_CreateColumnDraft0_HTTP_Handler(srv))
	r.POST("/v1/subscribe/column", _Bff_SubscribeColumn0_HTTP_Handler(srv))
	r.POST("/v1/cancel/subscribe/column", _Bff_CancelSubscribeColumn0_HTTP_Handler(srv))
	r.POST("/v1/subscribe/column/judge", _Bff_SubscribeJudge0_HTTP_Handler(srv))
	r.POST("/v1/send/column", _Bff_SendColumn0_HTTP_Handler(srv))
	r.GET("/v1/get/subscribe/list", _Bff_GetSubscribeList0_HTTP_Handler(srv))
	r.GET("/v1/get/subscribe/list/count", _Bff_GetSubscribeListCount0_HTTP_Handler(srv))
	r.POST("/v1/get/column/subscribes", _Bff_GetColumnSubscribes0_HTTP_Handler(srv))
	r.GET("/v1/get/column/list", _Bff_GetColumnList0_HTTP_Handler(srv))
	r.GET("/v1/get/column/list/hot", _Bff_GetColumnListHot0_HTTP_Handler(srv))
	r.GET("/v1/get/column/list/statistic", _Bff_GetColumnListStatistic0_HTTP_Handler(srv))
	r.POST("/v1/get/user/column/list", _Bff_GetUserColumnList0_HTTP_Handler(srv))
	r.GET("/v1/get/user/column/list/visitor", _Bff_GetUserColumnListVisitor0_HTTP_Handler(srv))
	r.POST("/v1/get/column/count", _Bff_GetColumnCount0_HTTP_Handler(srv))
	r.GET("/v1/get/column/count/visitor", _Bff_GetColumnCountVisitor0_HTTP_Handler(srv))
	r.POST("/v1/send/column/edit", _Bff_SendColumnEdit0_HTTP_Handler(srv))
	r.POST("/v1/delete/column", _Bff_DeleteColumn0_HTTP_Handler(srv))
	r.GET("/v1/get/column/statistic", _Bff_GetColumnStatistic0_HTTP_Handler(srv))
	r.POST("/v1/column/statistic/judge", _Bff_ColumnStatisticJudge0_HTTP_Handler(srv))
	r.POST("/v1/set/column/agree", _Bff_SetColumnAgree0_HTTP_Handler(srv))
	r.POST("/v1/cancel/column/agree", _Bff_CancelColumnAgree0_HTTP_Handler(srv))
	r.POST("/v1/set/column/collect", _Bff_SetColumnCollect0_HTTP_Handler(srv))
	r.POST("/v1/cancel/column/collect", _Bff_CancelColumnCollect0_HTTP_Handler(srv))
	r.POST("/v1/set/column/view", _Bff_SetColumnView0_HTTP_Handler(srv))
	r.POST("/v1/add/column/includes", _Bff_AddColumnIncludes0_HTTP_Handler(srv))
	r.POST("/v1/delete/column/includes", _Bff_DeleteColumnIncludes0_HTTP_Handler(srv))
	r.GET("/v1/get/news", _Bff_GetNews0_HTTP_Handler(srv))
	r.GET("/v1/get/achievement/list", _Bff_GetAchievementList0_HTTP_Handler(srv))
	r.GET("/v1/get/user/achievement", _Bff_GetUserAchievement0_HTTP_Handler(srv))
}

func _Bff_UserRegister0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserRegisterReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffUserRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserRegister(ctx, req.(*UserRegisterReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_LoginByPassword0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginByPasswordReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffLoginByPassword)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginByPassword(ctx, req.(*LoginByPasswordReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_LoginByCode0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginByCodeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffLoginByCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginByCode(ctx, req.(*LoginByCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_LoginByWeChat0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginByWeChatReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffLoginByWeChat)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginByWeChat(ctx, req.(*LoginByWeChatReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_LoginByGithub0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginByGithubReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffLoginByGithub)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginByGithub(ctx, req.(*LoginByGithubReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_LoginPasswordReset0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginPasswordResetReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffLoginPasswordReset)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginPasswordReset(ctx, req.(*LoginPasswordResetReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SendPhoneCode0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendPhoneCodeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffSendPhoneCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendPhoneCode(ctx, req.(*SendPhoneCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SendEmailCode0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendEmailCodeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffSendEmailCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendEmailCode(ctx, req.(*SendEmailCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetCosSessionKey0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetCosSessionKey)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCosSessionKey(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCosSessionKeyReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetAccount0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAccount(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAccountReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetProfile0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetProfile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProfile(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetProfileReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetProfileList0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProfileListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetProfileList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProfileList(ctx, req.(*GetProfileListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetProfileListReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetUserInfo0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserInfoReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetUserInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserInfo(ctx, req.(*GetUserInfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetUserFollow0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserFollowReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetUserFollow)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserFollow(ctx, req.(*GetUserFollowReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserFollowReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetUserFollows0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserFollowsReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetUserFollows)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserFollows(ctx, req.(*GetUserFollowsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserFollowsReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetFollowList0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFollowListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetFollowList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFollowList(ctx, req.(*GetFollowListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetFollowListReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetFollowListCount0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFollowListCountReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetFollowListCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFollowListCount(ctx, req.(*GetFollowListCountReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetFollowListCountReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetFollowedList0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFollowedListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetFollowedList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFollowedList(ctx, req.(*GetFollowedListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetFollowedListReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetFollowedListCount0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFollowedListCountReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetFollowedListCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFollowedListCount(ctx, req.(*GetFollowedListCountReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetFollowedListCountReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetProfileUpdate0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetProfileUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProfileUpdate(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetProfileUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_SetProfileUpdate0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetProfileUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffSetProfileUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetProfileUpdate(ctx, req.(*SetProfileUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SetUserPhone0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetUserPhoneReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffSetUserPhone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetUserPhone(ctx, req.(*SetUserPhoneReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SetUserEmail0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetUserEmailReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffSetUserEmail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetUserEmail(ctx, req.(*SetUserEmailReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SetUserPassword0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetUserPasswordReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffSetUserPassword)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetUserPassword(ctx, req.(*SetUserPasswordReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SetUserFollow0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetUserFollowReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffSetUserFollow)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetUserFollow(ctx, req.(*SetUserFollowReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_CancelUserFollow0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CancelUserFollowReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffCancelUserFollow)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CancelUserFollow(ctx, req.(*CancelUserFollowReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_ChangeUserPassword0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ChangeUserPasswordReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffChangeUserPassword)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ChangeUserPassword(ctx, req.(*ChangeUserPasswordReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_UnbindUserPhone0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UnbindUserPhoneReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffUnbindUserPhone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UnbindUserPhone(ctx, req.(*UnbindUserPhoneReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_UnbindUserEmail0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UnbindUserEmailReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffUnbindUserEmail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UnbindUserEmail(ctx, req.(*UnbindUserEmailReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetLeaderBoard0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetLeaderBoard)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLeaderBoard(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetLeaderBoardReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetCollectArticle0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCollectArticleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetCollectArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCollectArticle(ctx, req.(*GetCollectArticleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleListReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetCollectArticleCount0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCollectArticleCountReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetCollectArticleCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCollectArticleCount(ctx, req.(*GetCollectArticleCountReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCollectArticleCountReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetCollectTalk0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCollectTalkReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetCollectTalk)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCollectTalk(ctx, req.(*GetCollectTalkReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTalkListReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetCollectTalkCount0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCollectTalkCountReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetCollectTalkCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCollectTalkCount(ctx, req.(*GetCollectTalkCountReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCollectTalkCountReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetCollectColumn0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCollectColumnReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetCollectColumn)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCollectColumn(ctx, req.(*GetCollectColumnReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetColumnListReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetCollectColumnCount0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCollectColumnCountReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetCollectColumnCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCollectColumnCount(ctx, req.(*GetCollectColumnCountReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCollectColumnCountReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetCollection0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCollectionReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetCollection)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCollection(ctx, req.(*GetCollectionReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCollectionReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetCollections0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCollectionsReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetCollections)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCollections(ctx, req.(*GetCollectionsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCollectionsReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetCollectionsCount0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetCollectionsCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCollectionsCount(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCollectionsCountReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetCollectionsByVisitor0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCollectionsByVisitorReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetCollectionsByVisitor)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCollectionsByVisitor(ctx, req.(*GetCollectionsByVisitorReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCollectionsReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetCollectionsVisitorCount0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCollectionsVisitorCountReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetCollectionsVisitorCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCollectionsVisitorCount(ctx, req.(*GetCollectionsVisitorCountReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCollectionsCountReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_CreateCollections0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCollectionsReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffCreateCollections)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCollections(ctx, req.(*CreateCollectionsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_EditCollections0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EditCollectionsReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffEditCollections)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EditCollections(ctx, req.(*EditCollectionsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_DeleteCollections0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCollectionsReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffDeleteCollections)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCollections(ctx, req.(*DeleteCollectionsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetArticleList0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetArticleListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetArticleList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArticleList(ctx, req.(*GetArticleListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleListReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetArticleListHot0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetArticleListHotReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetArticleListHot)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArticleListHot(ctx, req.(*GetArticleListHotReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleListHotReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetColumnArticleList0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetColumnArticleListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetColumnArticleList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetColumnArticleList(ctx, req.(*GetColumnArticleListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleListReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetArticleCount0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetArticleCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArticleCount(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleCountReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetArticleCountVisitor0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetArticleCountVisitorReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetArticleCountVisitor)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArticleCountVisitor(ctx, req.(*GetArticleCountVisitorReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleCountReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetUserArticleList0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserArticleListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetUserArticleList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserArticleList(ctx, req.(*GetUserArticleListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleListReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetUserArticleListVisitor0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserArticleListVisitorReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetUserArticleListVisitor)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserArticleListVisitor(ctx, req.(*GetUserArticleListVisitorReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleListReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetArticleStatistic0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetArticleStatisticReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetArticleStatistic)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArticleStatistic(ctx, req.(*GetArticleStatisticReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleStatisticReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetArticleListStatistic0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetArticleListStatisticReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetArticleListStatistic)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArticleListStatistic(ctx, req.(*GetArticleListStatisticReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleListStatisticReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetLastArticleDraft0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetLastArticleDraft)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLastArticleDraft(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetLastArticleDraftReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_CreateArticleDraft0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffCreateArticleDraft)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateArticleDraft(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateArticleDraftReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_ArticleDraftMark0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ArticleDraftMarkReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffArticleDraftMark)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ArticleDraftMark(ctx, req.(*ArticleDraftMarkReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetArticleDraftList0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetArticleDraftList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArticleDraftList(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleDraftListReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_SendArticle0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendArticleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffSendArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendArticle(ctx, req.(*SendArticleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SendArticleEdit0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendArticleEditReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffSendArticleEdit)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendArticleEdit(ctx, req.(*SendArticleEditReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_DeleteArticle0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteArticleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffDeleteArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteArticle(ctx, req.(*DeleteArticleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SetArticleAgree0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetArticleAgreeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffSetArticleAgree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetArticleAgree(ctx, req.(*SetArticleAgreeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SetArticleView0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetArticleViewReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffSetArticleView)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetArticleView(ctx, req.(*SetArticleViewReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SetArticleCollect0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetArticleCollectReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffSetArticleCollect)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetArticleCollect(ctx, req.(*SetArticleCollectReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_CancelArticleAgree0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CancelArticleAgreeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffCancelArticleAgree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CancelArticleAgree(ctx, req.(*CancelArticleAgreeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_CancelArticleCollect0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CancelArticleCollectReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffCancelArticleCollect)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CancelArticleCollect(ctx, req.(*CancelArticleCollectReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_ArticleStatisticJudge0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ArticleStatisticJudgeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffArticleStatisticJudge)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ArticleStatisticJudge(ctx, req.(*ArticleStatisticJudgeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ArticleStatisticJudgeReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetTalkList0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTalkListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetTalkList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTalkList(ctx, req.(*GetTalkListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTalkListReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetTalkListHot0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTalkListHotReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetTalkListHot)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTalkListHot(ctx, req.(*GetTalkListHotReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTalkListHotReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetTalkListStatistic0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTalkListStatisticReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetTalkListStatistic)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTalkListStatistic(ctx, req.(*GetTalkListStatisticReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTalkListStatisticReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetUserTalkList0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserTalkListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetUserTalkList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserTalkList(ctx, req.(*GetUserTalkListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTalkListReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetUserTalkListVisitor0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserTalkListVisitorReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetUserTalkListVisitor)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserTalkListVisitor(ctx, req.(*GetUserTalkListVisitorReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTalkListReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetTalkCount0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetTalkCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTalkCount(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTalkCountReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetTalkCountVisitor0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTalkCountVisitorReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetTalkCountVisitor)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTalkCountVisitor(ctx, req.(*GetTalkCountVisitorReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTalkCountReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetTalkStatistic0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTalkStatisticReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetTalkStatistic)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTalkStatistic(ctx, req.(*GetTalkStatisticReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTalkStatisticReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetLastTalkDraft0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetLastTalkDraft)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLastTalkDraft(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetLastTalkDraftReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_CreateTalkDraft0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffCreateTalkDraft)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTalkDraft(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTalkDraftReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_SendTalk0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendTalkReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffSendTalk)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendTalk(ctx, req.(*SendTalkReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SendTalkEdit0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendTalkEditReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffSendTalkEdit)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendTalkEdit(ctx, req.(*SendTalkEditReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_DeleteTalk0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTalkReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffDeleteTalk)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTalk(ctx, req.(*DeleteTalkReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SetTalkView0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetTalkViewReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffSetTalkView)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetTalkView(ctx, req.(*SetTalkViewReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_TalkStatisticJudge0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TalkStatisticJudgeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffTalkStatisticJudge)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TalkStatisticJudge(ctx, req.(*TalkStatisticJudgeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TalkStatisticJudgeReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_SetTalkAgree0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetTalkAgreeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffSetTalkAgree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetTalkAgree(ctx, req.(*SetTalkAgreeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SetTalkCollect0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetTalkCollectReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffSetTalkCollect)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetTalkCollect(ctx, req.(*SetTalkCollectReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_CancelTalkAgree0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CancelTalkAgreeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffCancelTalkAgree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CancelTalkAgree(ctx, req.(*CancelTalkAgreeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_CancelTalkCollect0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CancelTalkCollectReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffCancelTalkCollect)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CancelTalkCollect(ctx, req.(*CancelTalkCollectReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetLastColumnDraft0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetLastColumnDraft)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLastColumnDraft(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetLastColumnDraftReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_CreateColumnDraft0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffCreateColumnDraft)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateColumnDraft(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateColumnDraftReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_SubscribeColumn0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SubscribeColumnReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffSubscribeColumn)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SubscribeColumn(ctx, req.(*SubscribeColumnReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_CancelSubscribeColumn0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CancelSubscribeColumnReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffCancelSubscribeColumn)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CancelSubscribeColumn(ctx, req.(*CancelSubscribeColumnReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SubscribeJudge0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SubscribeJudgeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffSubscribeJudge)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SubscribeJudge(ctx, req.(*SubscribeJudgeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SubscribeJudgeReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_SendColumn0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendColumnReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffSendColumn)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendColumn(ctx, req.(*SendColumnReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetSubscribeList0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSubscribeListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetSubscribeList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSubscribeList(ctx, req.(*GetSubscribeListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSubscribeListReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetSubscribeListCount0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSubscribeListCountReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetSubscribeListCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSubscribeListCount(ctx, req.(*GetSubscribeListCountReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSubscribeListCountReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetColumnSubscribes0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetColumnSubscribesReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetColumnSubscribes)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetColumnSubscribes(ctx, req.(*GetColumnSubscribesReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetColumnSubscribesReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetColumnList0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetColumnListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetColumnList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetColumnList(ctx, req.(*GetColumnListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetColumnListReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetColumnListHot0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetColumnListHotReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetColumnListHot)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetColumnListHot(ctx, req.(*GetColumnListHotReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetColumnListHotReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetColumnListStatistic0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetColumnListStatisticReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetColumnListStatistic)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetColumnListStatistic(ctx, req.(*GetColumnListStatisticReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetColumnListStatisticReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetUserColumnList0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserColumnListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetUserColumnList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserColumnList(ctx, req.(*GetUserColumnListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetColumnListReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetUserColumnListVisitor0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserColumnListVisitorReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetUserColumnListVisitor)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserColumnListVisitor(ctx, req.(*GetUserColumnListVisitorReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetColumnListReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetColumnCount0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetColumnCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetColumnCount(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetColumnCountReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetColumnCountVisitor0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetColumnCountVisitorReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetColumnCountVisitor)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetColumnCountVisitor(ctx, req.(*GetColumnCountVisitorReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetColumnCountReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_SendColumnEdit0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendColumnEditReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffSendColumnEdit)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendColumnEdit(ctx, req.(*SendColumnEditReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_DeleteColumn0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteColumnReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffDeleteColumn)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteColumn(ctx, req.(*DeleteColumnReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetColumnStatistic0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetColumnStatisticReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetColumnStatistic)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetColumnStatistic(ctx, req.(*GetColumnStatisticReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetColumnStatisticReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_ColumnStatisticJudge0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ColumnStatisticJudgeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffColumnStatisticJudge)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ColumnStatisticJudge(ctx, req.(*ColumnStatisticJudgeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ColumnStatisticJudgeReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_SetColumnAgree0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetColumnAgreeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffSetColumnAgree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetColumnAgree(ctx, req.(*SetColumnAgreeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_CancelColumnAgree0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CancelColumnAgreeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffCancelColumnAgree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CancelColumnAgree(ctx, req.(*CancelColumnAgreeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SetColumnCollect0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetColumnCollectReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffSetColumnCollect)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetColumnCollect(ctx, req.(*SetColumnCollectReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_CancelColumnCollect0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CancelColumnCollectReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffCancelColumnCollect)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CancelColumnCollect(ctx, req.(*CancelColumnCollectReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SetColumnView0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetColumnViewReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffSetColumnView)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetColumnView(ctx, req.(*SetColumnViewReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_AddColumnIncludes0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddColumnIncludesReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffAddColumnIncludes)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddColumnIncludes(ctx, req.(*AddColumnIncludesReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_DeleteColumnIncludes0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteColumnIncludesReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffDeleteColumnIncludes)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteColumnIncludes(ctx, req.(*DeleteColumnIncludesReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetNews0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetNewsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetNews)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNews(ctx, req.(*GetNewsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetNewsReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetAchievementList0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAchievementListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetAchievementList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAchievementList(ctx, req.(*GetAchievementListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAchievementListReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetUserAchievement0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserAchievementReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBffGetUserAchievement)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserAchievement(ctx, req.(*GetUserAchievementReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserAchievementReply)
		return ctx.Result(200, reply)
	}
}

type BffHTTPClient interface {
	AddColumnIncludes(ctx context.Context, req *AddColumnIncludesReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	ArticleDraftMark(ctx context.Context, req *ArticleDraftMarkReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	ArticleStatisticJudge(ctx context.Context, req *ArticleStatisticJudgeReq, opts ...http.CallOption) (rsp *ArticleStatisticJudgeReply, err error)
	CancelArticleAgree(ctx context.Context, req *CancelArticleAgreeReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	CancelArticleCollect(ctx context.Context, req *CancelArticleCollectReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	CancelColumnAgree(ctx context.Context, req *CancelColumnAgreeReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	CancelColumnCollect(ctx context.Context, req *CancelColumnCollectReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	CancelSubscribeColumn(ctx context.Context, req *CancelSubscribeColumnReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	CancelTalkAgree(ctx context.Context, req *CancelTalkAgreeReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	CancelTalkCollect(ctx context.Context, req *CancelTalkCollectReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	CancelUserFollow(ctx context.Context, req *CancelUserFollowReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	ChangeUserPassword(ctx context.Context, req *ChangeUserPasswordReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	ColumnStatisticJudge(ctx context.Context, req *ColumnStatisticJudgeReq, opts ...http.CallOption) (rsp *ColumnStatisticJudgeReply, err error)
	CreateArticleDraft(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *CreateArticleDraftReply, err error)
	CreateCollections(ctx context.Context, req *CreateCollectionsReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	CreateColumnDraft(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *CreateColumnDraftReply, err error)
	CreateTalkDraft(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *CreateTalkDraftReply, err error)
	DeleteArticle(ctx context.Context, req *DeleteArticleReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteCollections(ctx context.Context, req *DeleteCollectionsReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteColumn(ctx context.Context, req *DeleteColumnReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteColumnIncludes(ctx context.Context, req *DeleteColumnIncludesReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteTalk(ctx context.Context, req *DeleteTalkReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	EditCollections(ctx context.Context, req *EditCollectionsReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetAccount(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetAccountReply, err error)
	GetAchievementList(ctx context.Context, req *GetAchievementListReq, opts ...http.CallOption) (rsp *GetAchievementListReply, err error)
	GetArticleCount(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetArticleCountReply, err error)
	GetArticleCountVisitor(ctx context.Context, req *GetArticleCountVisitorReq, opts ...http.CallOption) (rsp *GetArticleCountReply, err error)
	GetArticleDraftList(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetArticleDraftListReply, err error)
	GetArticleList(ctx context.Context, req *GetArticleListReq, opts ...http.CallOption) (rsp *GetArticleListReply, err error)
	GetArticleListHot(ctx context.Context, req *GetArticleListHotReq, opts ...http.CallOption) (rsp *GetArticleListHotReply, err error)
	GetArticleListStatistic(ctx context.Context, req *GetArticleListStatisticReq, opts ...http.CallOption) (rsp *GetArticleListStatisticReply, err error)
	GetArticleStatistic(ctx context.Context, req *GetArticleStatisticReq, opts ...http.CallOption) (rsp *GetArticleStatisticReply, err error)
	GetCollectArticle(ctx context.Context, req *GetCollectArticleReq, opts ...http.CallOption) (rsp *GetArticleListReply, err error)
	GetCollectArticleCount(ctx context.Context, req *GetCollectArticleCountReq, opts ...http.CallOption) (rsp *GetCollectArticleCountReply, err error)
	GetCollectColumn(ctx context.Context, req *GetCollectColumnReq, opts ...http.CallOption) (rsp *GetColumnListReply, err error)
	GetCollectColumnCount(ctx context.Context, req *GetCollectColumnCountReq, opts ...http.CallOption) (rsp *GetCollectColumnCountReply, err error)
	GetCollectTalk(ctx context.Context, req *GetCollectTalkReq, opts ...http.CallOption) (rsp *GetTalkListReply, err error)
	GetCollectTalkCount(ctx context.Context, req *GetCollectTalkCountReq, opts ...http.CallOption) (rsp *GetCollectTalkCountReply, err error)
	GetCollection(ctx context.Context, req *GetCollectionReq, opts ...http.CallOption) (rsp *GetCollectionReply, err error)
	GetCollections(ctx context.Context, req *GetCollectionsReq, opts ...http.CallOption) (rsp *GetCollectionsReply, err error)
	GetCollectionsByVisitor(ctx context.Context, req *GetCollectionsByVisitorReq, opts ...http.CallOption) (rsp *GetCollectionsReply, err error)
	GetCollectionsCount(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetCollectionsCountReply, err error)
	GetCollectionsVisitorCount(ctx context.Context, req *GetCollectionsVisitorCountReq, opts ...http.CallOption) (rsp *GetCollectionsCountReply, err error)
	GetColumnArticleList(ctx context.Context, req *GetColumnArticleListReq, opts ...http.CallOption) (rsp *GetArticleListReply, err error)
	GetColumnCount(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetColumnCountReply, err error)
	GetColumnCountVisitor(ctx context.Context, req *GetColumnCountVisitorReq, opts ...http.CallOption) (rsp *GetColumnCountReply, err error)
	GetColumnList(ctx context.Context, req *GetColumnListReq, opts ...http.CallOption) (rsp *GetColumnListReply, err error)
	GetColumnListHot(ctx context.Context, req *GetColumnListHotReq, opts ...http.CallOption) (rsp *GetColumnListHotReply, err error)
	GetColumnListStatistic(ctx context.Context, req *GetColumnListStatisticReq, opts ...http.CallOption) (rsp *GetColumnListStatisticReply, err error)
	GetColumnStatistic(ctx context.Context, req *GetColumnStatisticReq, opts ...http.CallOption) (rsp *GetColumnStatisticReply, err error)
	GetColumnSubscribes(ctx context.Context, req *GetColumnSubscribesReq, opts ...http.CallOption) (rsp *GetColumnSubscribesReply, err error)
	GetCosSessionKey(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetCosSessionKeyReply, err error)
	GetFollowList(ctx context.Context, req *GetFollowListReq, opts ...http.CallOption) (rsp *GetFollowListReply, err error)
	GetFollowListCount(ctx context.Context, req *GetFollowListCountReq, opts ...http.CallOption) (rsp *GetFollowListCountReply, err error)
	GetFollowedList(ctx context.Context, req *GetFollowedListReq, opts ...http.CallOption) (rsp *GetFollowedListReply, err error)
	GetFollowedListCount(ctx context.Context, req *GetFollowedListCountReq, opts ...http.CallOption) (rsp *GetFollowedListCountReply, err error)
	GetLastArticleDraft(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetLastArticleDraftReply, err error)
	GetLastColumnDraft(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetLastColumnDraftReply, err error)
	GetLastTalkDraft(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetLastTalkDraftReply, err error)
	GetLeaderBoard(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetLeaderBoardReply, err error)
	GetNews(ctx context.Context, req *GetNewsReq, opts ...http.CallOption) (rsp *GetNewsReply, err error)
	GetProfile(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetProfileReply, err error)
	GetProfileList(ctx context.Context, req *GetProfileListReq, opts ...http.CallOption) (rsp *GetProfileListReply, err error)
	GetProfileUpdate(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetProfileUpdateReply, err error)
	GetSubscribeList(ctx context.Context, req *GetSubscribeListReq, opts ...http.CallOption) (rsp *GetSubscribeListReply, err error)
	GetSubscribeListCount(ctx context.Context, req *GetSubscribeListCountReq, opts ...http.CallOption) (rsp *GetSubscribeListCountReply, err error)
	GetTalkCount(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetTalkCountReply, err error)
	GetTalkCountVisitor(ctx context.Context, req *GetTalkCountVisitorReq, opts ...http.CallOption) (rsp *GetTalkCountReply, err error)
	GetTalkList(ctx context.Context, req *GetTalkListReq, opts ...http.CallOption) (rsp *GetTalkListReply, err error)
	GetTalkListHot(ctx context.Context, req *GetTalkListHotReq, opts ...http.CallOption) (rsp *GetTalkListHotReply, err error)
	GetTalkListStatistic(ctx context.Context, req *GetTalkListStatisticReq, opts ...http.CallOption) (rsp *GetTalkListStatisticReply, err error)
	GetTalkStatistic(ctx context.Context, req *GetTalkStatisticReq, opts ...http.CallOption) (rsp *GetTalkStatisticReply, err error)
	GetUserAchievement(ctx context.Context, req *GetUserAchievementReq, opts ...http.CallOption) (rsp *GetUserAchievementReply, err error)
	GetUserArticleList(ctx context.Context, req *GetUserArticleListReq, opts ...http.CallOption) (rsp *GetArticleListReply, err error)
	GetUserArticleListVisitor(ctx context.Context, req *GetUserArticleListVisitorReq, opts ...http.CallOption) (rsp *GetArticleListReply, err error)
	GetUserColumnList(ctx context.Context, req *GetUserColumnListReq, opts ...http.CallOption) (rsp *GetColumnListReply, err error)
	GetUserColumnListVisitor(ctx context.Context, req *GetUserColumnListVisitorReq, opts ...http.CallOption) (rsp *GetColumnListReply, err error)
	GetUserFollow(ctx context.Context, req *GetUserFollowReq, opts ...http.CallOption) (rsp *GetUserFollowReply, err error)
	GetUserFollows(ctx context.Context, req *GetUserFollowsReq, opts ...http.CallOption) (rsp *GetUserFollowsReply, err error)
	GetUserInfo(ctx context.Context, req *GetUserInfoReq, opts ...http.CallOption) (rsp *GetUserInfoReply, err error)
	GetUserTalkList(ctx context.Context, req *GetUserTalkListReq, opts ...http.CallOption) (rsp *GetTalkListReply, err error)
	GetUserTalkListVisitor(ctx context.Context, req *GetUserTalkListVisitorReq, opts ...http.CallOption) (rsp *GetTalkListReply, err error)
	LoginByCode(ctx context.Context, req *LoginByCodeReq, opts ...http.CallOption) (rsp *LoginReply, err error)
	LoginByGithub(ctx context.Context, req *LoginByGithubReq, opts ...http.CallOption) (rsp *LoginReply, err error)
	LoginByPassword(ctx context.Context, req *LoginByPasswordReq, opts ...http.CallOption) (rsp *LoginReply, err error)
	LoginByWeChat(ctx context.Context, req *LoginByWeChatReq, opts ...http.CallOption) (rsp *LoginReply, err error)
	LoginPasswordReset(ctx context.Context, req *LoginPasswordResetReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SendArticle(ctx context.Context, req *SendArticleReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SendArticleEdit(ctx context.Context, req *SendArticleEditReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SendColumn(ctx context.Context, req *SendColumnReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SendColumnEdit(ctx context.Context, req *SendColumnEditReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SendEmailCode(ctx context.Context, req *SendEmailCodeReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SendPhoneCode(ctx context.Context, req *SendPhoneCodeReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SendTalk(ctx context.Context, req *SendTalkReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SendTalkEdit(ctx context.Context, req *SendTalkEditReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetArticleAgree(ctx context.Context, req *SetArticleAgreeReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetArticleCollect(ctx context.Context, req *SetArticleCollectReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetArticleView(ctx context.Context, req *SetArticleViewReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetColumnAgree(ctx context.Context, req *SetColumnAgreeReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetColumnCollect(ctx context.Context, req *SetColumnCollectReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetColumnView(ctx context.Context, req *SetColumnViewReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetProfileUpdate(ctx context.Context, req *SetProfileUpdateReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetTalkAgree(ctx context.Context, req *SetTalkAgreeReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetTalkCollect(ctx context.Context, req *SetTalkCollectReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetTalkView(ctx context.Context, req *SetTalkViewReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetUserEmail(ctx context.Context, req *SetUserEmailReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetUserFollow(ctx context.Context, req *SetUserFollowReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetUserPassword(ctx context.Context, req *SetUserPasswordReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetUserPhone(ctx context.Context, req *SetUserPhoneReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SubscribeColumn(ctx context.Context, req *SubscribeColumnReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SubscribeJudge(ctx context.Context, req *SubscribeJudgeReq, opts ...http.CallOption) (rsp *SubscribeJudgeReply, err error)
	TalkStatisticJudge(ctx context.Context, req *TalkStatisticJudgeReq, opts ...http.CallOption) (rsp *TalkStatisticJudgeReply, err error)
	UnbindUserEmail(ctx context.Context, req *UnbindUserEmailReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UnbindUserPhone(ctx context.Context, req *UnbindUserPhoneReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UserRegister(ctx context.Context, req *UserRegisterReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type BffHTTPClientImpl struct {
	cc *http.Client
}

func NewBffHTTPClient(client *http.Client) BffHTTPClient {
	return &BffHTTPClientImpl{client}
}

func (c *BffHTTPClientImpl) AddColumnIncludes(ctx context.Context, in *AddColumnIncludesReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/add/column/includes"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffAddColumnIncludes))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) ArticleDraftMark(ctx context.Context, in *ArticleDraftMarkReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/article/draft/mark"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffArticleDraftMark))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) ArticleStatisticJudge(ctx context.Context, in *ArticleStatisticJudgeReq, opts ...http.CallOption) (*ArticleStatisticJudgeReply, error) {
	var out ArticleStatisticJudgeReply
	pattern := "/v1/article/statistic/judge"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffArticleStatisticJudge))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) CancelArticleAgree(ctx context.Context, in *CancelArticleAgreeReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/cancel/article/agree"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffCancelArticleAgree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) CancelArticleCollect(ctx context.Context, in *CancelArticleCollectReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/cancel/article/collect"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffCancelArticleCollect))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) CancelColumnAgree(ctx context.Context, in *CancelColumnAgreeReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/cancel/column/agree"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffCancelColumnAgree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) CancelColumnCollect(ctx context.Context, in *CancelColumnCollectReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/cancel/column/collect"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffCancelColumnCollect))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) CancelSubscribeColumn(ctx context.Context, in *CancelSubscribeColumnReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/cancel/subscribe/column"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffCancelSubscribeColumn))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) CancelTalkAgree(ctx context.Context, in *CancelTalkAgreeReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/cancel/talk/agree"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffCancelTalkAgree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) CancelTalkCollect(ctx context.Context, in *CancelTalkCollectReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/cancel/talk/collect"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffCancelTalkCollect))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) CancelUserFollow(ctx context.Context, in *CancelUserFollowReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/cancel/user/follow"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffCancelUserFollow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) ChangeUserPassword(ctx context.Context, in *ChangeUserPasswordReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/change/user/password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffChangeUserPassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) ColumnStatisticJudge(ctx context.Context, in *ColumnStatisticJudgeReq, opts ...http.CallOption) (*ColumnStatisticJudgeReply, error) {
	var out ColumnStatisticJudgeReply
	pattern := "/v1/column/statistic/judge"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffColumnStatisticJudge))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) CreateArticleDraft(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*CreateArticleDraftReply, error) {
	var out CreateArticleDraftReply
	pattern := "/v1/create/article/draft"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffCreateArticleDraft))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) CreateCollections(ctx context.Context, in *CreateCollectionsReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/create/collections"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffCreateCollections))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) CreateColumnDraft(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*CreateColumnDraftReply, error) {
	var out CreateColumnDraftReply
	pattern := "/v1/create/column/draft"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffCreateColumnDraft))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) CreateTalkDraft(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*CreateTalkDraftReply, error) {
	var out CreateTalkDraftReply
	pattern := "/v1/create/talk/draft"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffCreateTalkDraft))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) DeleteArticle(ctx context.Context, in *DeleteArticleReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/delete/article"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffDeleteArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) DeleteCollections(ctx context.Context, in *DeleteCollectionsReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/delete/collections"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffDeleteCollections))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) DeleteColumn(ctx context.Context, in *DeleteColumnReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/delete/column"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffDeleteColumn))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) DeleteColumnIncludes(ctx context.Context, in *DeleteColumnIncludesReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/delete/column/includes"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffDeleteColumnIncludes))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) DeleteTalk(ctx context.Context, in *DeleteTalkReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/delete/talk"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffDeleteTalk))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) EditCollections(ctx context.Context, in *EditCollectionsReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/edit/collections"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffEditCollections))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetAccount(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetAccountReply, error) {
	var out GetAccountReply
	pattern := "/v1/get/user/account"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetAchievementList(ctx context.Context, in *GetAchievementListReq, opts ...http.CallOption) (*GetAchievementListReply, error) {
	var out GetAchievementListReply
	pattern := "/v1/get/achievement/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetAchievementList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetArticleCount(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetArticleCountReply, error) {
	var out GetArticleCountReply
	pattern := "/v1/get/article/count"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffGetArticleCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetArticleCountVisitor(ctx context.Context, in *GetArticleCountVisitorReq, opts ...http.CallOption) (*GetArticleCountReply, error) {
	var out GetArticleCountReply
	pattern := "/v1/get/article/count/visitor"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetArticleCountVisitor))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetArticleDraftList(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetArticleDraftListReply, error) {
	var out GetArticleDraftListReply
	pattern := "/v1/get/article/draft/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetArticleDraftList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetArticleList(ctx context.Context, in *GetArticleListReq, opts ...http.CallOption) (*GetArticleListReply, error) {
	var out GetArticleListReply
	pattern := "/v1/get/article/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetArticleList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetArticleListHot(ctx context.Context, in *GetArticleListHotReq, opts ...http.CallOption) (*GetArticleListHotReply, error) {
	var out GetArticleListHotReply
	pattern := "/v1/get/article/list/hot"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetArticleListHot))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetArticleListStatistic(ctx context.Context, in *GetArticleListStatisticReq, opts ...http.CallOption) (*GetArticleListStatisticReply, error) {
	var out GetArticleListStatisticReply
	pattern := "/v1/get/article/list/statistic"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetArticleListStatistic))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetArticleStatistic(ctx context.Context, in *GetArticleStatisticReq, opts ...http.CallOption) (*GetArticleStatisticReply, error) {
	var out GetArticleStatisticReply
	pattern := "/v1/get/article/statistic"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetArticleStatistic))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetCollectArticle(ctx context.Context, in *GetCollectArticleReq, opts ...http.CallOption) (*GetArticleListReply, error) {
	var out GetArticleListReply
	pattern := "/v1/get/collect/article"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetCollectArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetCollectArticleCount(ctx context.Context, in *GetCollectArticleCountReq, opts ...http.CallOption) (*GetCollectArticleCountReply, error) {
	var out GetCollectArticleCountReply
	pattern := "/v1/get/collect/article/count"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetCollectArticleCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetCollectColumn(ctx context.Context, in *GetCollectColumnReq, opts ...http.CallOption) (*GetColumnListReply, error) {
	var out GetColumnListReply
	pattern := "/v1/get/collect/column"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetCollectColumn))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetCollectColumnCount(ctx context.Context, in *GetCollectColumnCountReq, opts ...http.CallOption) (*GetCollectColumnCountReply, error) {
	var out GetCollectColumnCountReply
	pattern := "/v1/get/collect/column/count"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetCollectColumnCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetCollectTalk(ctx context.Context, in *GetCollectTalkReq, opts ...http.CallOption) (*GetTalkListReply, error) {
	var out GetTalkListReply
	pattern := "/v1/get/collect/talk"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetCollectTalk))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetCollectTalkCount(ctx context.Context, in *GetCollectTalkCountReq, opts ...http.CallOption) (*GetCollectTalkCountReply, error) {
	var out GetCollectTalkCountReply
	pattern := "/v1/get/collect/talk/count"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetCollectTalkCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetCollection(ctx context.Context, in *GetCollectionReq, opts ...http.CallOption) (*GetCollectionReply, error) {
	var out GetCollectionReply
	pattern := "/v1/get/collection"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetCollection))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetCollections(ctx context.Context, in *GetCollectionsReq, opts ...http.CallOption) (*GetCollectionsReply, error) {
	var out GetCollectionsReply
	pattern := "/v1/get/collections"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffGetCollections))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetCollectionsByVisitor(ctx context.Context, in *GetCollectionsByVisitorReq, opts ...http.CallOption) (*GetCollectionsReply, error) {
	var out GetCollectionsReply
	pattern := "/v1/get/collections/visitor"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetCollectionsByVisitor))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetCollectionsCount(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetCollectionsCountReply, error) {
	var out GetCollectionsCountReply
	pattern := "/v1/get/collections/count"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffGetCollectionsCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetCollectionsVisitorCount(ctx context.Context, in *GetCollectionsVisitorCountReq, opts ...http.CallOption) (*GetCollectionsCountReply, error) {
	var out GetCollectionsCountReply
	pattern := "/v1/get/collections/visitor/count"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetCollectionsVisitorCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetColumnArticleList(ctx context.Context, in *GetColumnArticleListReq, opts ...http.CallOption) (*GetArticleListReply, error) {
	var out GetArticleListReply
	pattern := "/v1/get/column/article/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetColumnArticleList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetColumnCount(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetColumnCountReply, error) {
	var out GetColumnCountReply
	pattern := "/v1/get/column/count"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffGetColumnCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetColumnCountVisitor(ctx context.Context, in *GetColumnCountVisitorReq, opts ...http.CallOption) (*GetColumnCountReply, error) {
	var out GetColumnCountReply
	pattern := "/v1/get/column/count/visitor"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetColumnCountVisitor))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetColumnList(ctx context.Context, in *GetColumnListReq, opts ...http.CallOption) (*GetColumnListReply, error) {
	var out GetColumnListReply
	pattern := "/v1/get/column/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetColumnList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetColumnListHot(ctx context.Context, in *GetColumnListHotReq, opts ...http.CallOption) (*GetColumnListHotReply, error) {
	var out GetColumnListHotReply
	pattern := "/v1/get/column/list/hot"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetColumnListHot))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetColumnListStatistic(ctx context.Context, in *GetColumnListStatisticReq, opts ...http.CallOption) (*GetColumnListStatisticReply, error) {
	var out GetColumnListStatisticReply
	pattern := "/v1/get/column/list/statistic"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetColumnListStatistic))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetColumnStatistic(ctx context.Context, in *GetColumnStatisticReq, opts ...http.CallOption) (*GetColumnStatisticReply, error) {
	var out GetColumnStatisticReply
	pattern := "/v1/get/column/statistic"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetColumnStatistic))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetColumnSubscribes(ctx context.Context, in *GetColumnSubscribesReq, opts ...http.CallOption) (*GetColumnSubscribesReply, error) {
	var out GetColumnSubscribesReply
	pattern := "/v1/get/column/subscribes"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffGetColumnSubscribes))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetCosSessionKey(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetCosSessionKeyReply, error) {
	var out GetCosSessionKeyReply
	pattern := "/v1/get/cos/session/key"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetCosSessionKey))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetFollowList(ctx context.Context, in *GetFollowListReq, opts ...http.CallOption) (*GetFollowListReply, error) {
	var out GetFollowListReply
	pattern := "/v1/get/follow/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetFollowList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetFollowListCount(ctx context.Context, in *GetFollowListCountReq, opts ...http.CallOption) (*GetFollowListCountReply, error) {
	var out GetFollowListCountReply
	pattern := "/v1/get/follow/list/count"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetFollowListCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetFollowedList(ctx context.Context, in *GetFollowedListReq, opts ...http.CallOption) (*GetFollowedListReply, error) {
	var out GetFollowedListReply
	pattern := "/v1/get/followed/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetFollowedList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetFollowedListCount(ctx context.Context, in *GetFollowedListCountReq, opts ...http.CallOption) (*GetFollowedListCountReply, error) {
	var out GetFollowedListCountReply
	pattern := "/v1/get/followed/list/count"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetFollowedListCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetLastArticleDraft(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetLastArticleDraftReply, error) {
	var out GetLastArticleDraftReply
	pattern := "/v1/get/last/article/draft"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetLastArticleDraft))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetLastColumnDraft(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetLastColumnDraftReply, error) {
	var out GetLastColumnDraftReply
	pattern := "/v1/get/last/column/draft"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetLastColumnDraft))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetLastTalkDraft(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetLastTalkDraftReply, error) {
	var out GetLastTalkDraftReply
	pattern := "/v1/get/last/talk/draft"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetLastTalkDraft))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetLeaderBoard(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetLeaderBoardReply, error) {
	var out GetLeaderBoardReply
	pattern := "/v1/get/leaderboard"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetLeaderBoard))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetNews(ctx context.Context, in *GetNewsReq, opts ...http.CallOption) (*GetNewsReply, error) {
	var out GetNewsReply
	pattern := "/v1/get/news"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetNews))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetProfile(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetProfileReply, error) {
	var out GetProfileReply
	pattern := "/v1/get/user/profile"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetProfile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetProfileList(ctx context.Context, in *GetProfileListReq, opts ...http.CallOption) (*GetProfileListReply, error) {
	var out GetProfileListReply
	pattern := "/v1/get/profile/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetProfileList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetProfileUpdate(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetProfileUpdateReply, error) {
	var out GetProfileUpdateReply
	pattern := "/v1/get/user/profile/update"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetProfileUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetSubscribeList(ctx context.Context, in *GetSubscribeListReq, opts ...http.CallOption) (*GetSubscribeListReply, error) {
	var out GetSubscribeListReply
	pattern := "/v1/get/subscribe/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetSubscribeList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetSubscribeListCount(ctx context.Context, in *GetSubscribeListCountReq, opts ...http.CallOption) (*GetSubscribeListCountReply, error) {
	var out GetSubscribeListCountReply
	pattern := "/v1/get/subscribe/list/count"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetSubscribeListCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetTalkCount(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetTalkCountReply, error) {
	var out GetTalkCountReply
	pattern := "/v1/get/talk/count"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffGetTalkCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetTalkCountVisitor(ctx context.Context, in *GetTalkCountVisitorReq, opts ...http.CallOption) (*GetTalkCountReply, error) {
	var out GetTalkCountReply
	pattern := "/v1/get/talk/count/visitor"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetTalkCountVisitor))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetTalkList(ctx context.Context, in *GetTalkListReq, opts ...http.CallOption) (*GetTalkListReply, error) {
	var out GetTalkListReply
	pattern := "/v1/get/talk/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetTalkList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetTalkListHot(ctx context.Context, in *GetTalkListHotReq, opts ...http.CallOption) (*GetTalkListHotReply, error) {
	var out GetTalkListHotReply
	pattern := "/v1/get/talk/list/hot"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetTalkListHot))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetTalkListStatistic(ctx context.Context, in *GetTalkListStatisticReq, opts ...http.CallOption) (*GetTalkListStatisticReply, error) {
	var out GetTalkListStatisticReply
	pattern := "/v1/get/talk/list/statistic"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetTalkListStatistic))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetTalkStatistic(ctx context.Context, in *GetTalkStatisticReq, opts ...http.CallOption) (*GetTalkStatisticReply, error) {
	var out GetTalkStatisticReply
	pattern := "/v1/get/talk/statistic"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetTalkStatistic))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetUserAchievement(ctx context.Context, in *GetUserAchievementReq, opts ...http.CallOption) (*GetUserAchievementReply, error) {
	var out GetUserAchievementReply
	pattern := "/v1/get/user/achievement"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetUserAchievement))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetUserArticleList(ctx context.Context, in *GetUserArticleListReq, opts ...http.CallOption) (*GetArticleListReply, error) {
	var out GetArticleListReply
	pattern := "/v1/get/user/article/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffGetUserArticleList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetUserArticleListVisitor(ctx context.Context, in *GetUserArticleListVisitorReq, opts ...http.CallOption) (*GetArticleListReply, error) {
	var out GetArticleListReply
	pattern := "/v1/get/user/article/list/visitor"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetUserArticleListVisitor))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetUserColumnList(ctx context.Context, in *GetUserColumnListReq, opts ...http.CallOption) (*GetColumnListReply, error) {
	var out GetColumnListReply
	pattern := "/v1/get/user/column/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffGetUserColumnList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetUserColumnListVisitor(ctx context.Context, in *GetUserColumnListVisitorReq, opts ...http.CallOption) (*GetColumnListReply, error) {
	var out GetColumnListReply
	pattern := "/v1/get/user/column/list/visitor"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetUserColumnListVisitor))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetUserFollow(ctx context.Context, in *GetUserFollowReq, opts ...http.CallOption) (*GetUserFollowReply, error) {
	var out GetUserFollowReply
	pattern := "/v1/get/user/follow"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffGetUserFollow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetUserFollows(ctx context.Context, in *GetUserFollowsReq, opts ...http.CallOption) (*GetUserFollowsReply, error) {
	var out GetUserFollowsReply
	pattern := "/v1/get/user/follows"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffGetUserFollows))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...http.CallOption) (*GetUserInfoReply, error) {
	var out GetUserInfoReply
	pattern := "/v1/get/user/info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetUserInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetUserTalkList(ctx context.Context, in *GetUserTalkListReq, opts ...http.CallOption) (*GetTalkListReply, error) {
	var out GetTalkListReply
	pattern := "/v1/get/user/talk/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffGetUserTalkList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetUserTalkListVisitor(ctx context.Context, in *GetUserTalkListVisitorReq, opts ...http.CallOption) (*GetTalkListReply, error) {
	var out GetTalkListReply
	pattern := "/v1/get/user/talk/list/visitor"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBffGetUserTalkListVisitor))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) LoginByCode(ctx context.Context, in *LoginByCodeReq, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/v1/user/login/code"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffLoginByCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) LoginByGithub(ctx context.Context, in *LoginByGithubReq, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/v1/user/login/github"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffLoginByGithub))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) LoginByPassword(ctx context.Context, in *LoginByPasswordReq, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/v1/user/login/password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffLoginByPassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) LoginByWeChat(ctx context.Context, in *LoginByWeChatReq, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/v1/user/login/wechat"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffLoginByWeChat))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) LoginPasswordReset(ctx context.Context, in *LoginPasswordResetReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/user/login/password/reset"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffLoginPasswordReset))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SendArticle(ctx context.Context, in *SendArticleReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/send/article"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffSendArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SendArticleEdit(ctx context.Context, in *SendArticleEditReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/send/article/edit"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffSendArticleEdit))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SendColumn(ctx context.Context, in *SendColumnReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/send/column"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffSendColumn))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SendColumnEdit(ctx context.Context, in *SendColumnEditReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/send/column/edit"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffSendColumnEdit))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SendEmailCode(ctx context.Context, in *SendEmailCodeReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/user/code/email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffSendEmailCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SendPhoneCode(ctx context.Context, in *SendPhoneCodeReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/user/code/phone"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffSendPhoneCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SendTalk(ctx context.Context, in *SendTalkReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/send/talk"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffSendTalk))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SendTalkEdit(ctx context.Context, in *SendTalkEditReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/send/talk/edit"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffSendTalkEdit))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SetArticleAgree(ctx context.Context, in *SetArticleAgreeReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/set/article/agree"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffSetArticleAgree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SetArticleCollect(ctx context.Context, in *SetArticleCollectReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/set/article/collect"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffSetArticleCollect))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SetArticleView(ctx context.Context, in *SetArticleViewReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/set/article/view"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffSetArticleView))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SetColumnAgree(ctx context.Context, in *SetColumnAgreeReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/set/column/agree"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffSetColumnAgree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SetColumnCollect(ctx context.Context, in *SetColumnCollectReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/set/column/collect"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffSetColumnCollect))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SetColumnView(ctx context.Context, in *SetColumnViewReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/set/column/view"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffSetColumnView))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SetProfileUpdate(ctx context.Context, in *SetProfileUpdateReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/set/user/profile/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffSetProfileUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SetTalkAgree(ctx context.Context, in *SetTalkAgreeReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/set/talk/agree"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffSetTalkAgree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SetTalkCollect(ctx context.Context, in *SetTalkCollectReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/set/talk/collect"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffSetTalkCollect))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SetTalkView(ctx context.Context, in *SetTalkViewReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/set/talk/view"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffSetTalkView))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SetUserEmail(ctx context.Context, in *SetUserEmailReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/set/user/email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffSetUserEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SetUserFollow(ctx context.Context, in *SetUserFollowReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/set/user/follow"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffSetUserFollow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SetUserPassword(ctx context.Context, in *SetUserPasswordReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/set/user/password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffSetUserPassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SetUserPhone(ctx context.Context, in *SetUserPhoneReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/set/user/phone"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffSetUserPhone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SubscribeColumn(ctx context.Context, in *SubscribeColumnReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/subscribe/column"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffSubscribeColumn))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SubscribeJudge(ctx context.Context, in *SubscribeJudgeReq, opts ...http.CallOption) (*SubscribeJudgeReply, error) {
	var out SubscribeJudgeReply
	pattern := "/v1/subscribe/column/judge"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffSubscribeJudge))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) TalkStatisticJudge(ctx context.Context, in *TalkStatisticJudgeReq, opts ...http.CallOption) (*TalkStatisticJudgeReply, error) {
	var out TalkStatisticJudgeReply
	pattern := "/v1/talk/statistic/judge"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffTalkStatisticJudge))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) UnbindUserEmail(ctx context.Context, in *UnbindUserEmailReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/unbind/user/email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffUnbindUserEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) UnbindUserPhone(ctx context.Context, in *UnbindUserPhoneReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/unbind/user/phone"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffUnbindUserPhone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) UserRegister(ctx context.Context, in *UserRegisterReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/user/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBffUserRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
