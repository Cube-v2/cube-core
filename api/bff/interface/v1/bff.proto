syntax = "proto3";

package bff.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

option go_package = "api/bff/interface/v1;v1";

service Bff{
  // --------------------user service------------------------

  rpc UserRegister(UserRegisterReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/user/register"
      body: "*"
    };
  }

  rpc LoginByPassword (LoginByPasswordReq) returns (LoginReply) {
    option (google.api.http) = {
      post: "/v1/user/login/password"
      body: "*"
    };
  }

  rpc LoginByCode (LoginByCodeReq) returns (LoginReply) {
    option (google.api.http) = {
      post: "/v1/user/login/code"
      body: "*"
    };
  }

  rpc LoginByWeChat (LoginByWeChatReq) returns (LoginReply) {
    option (google.api.http) = {
      post: "/v1/user/login/wechat"
      body: "*"
    };
  }

  rpc LoginByGithub (LoginByGithubReq) returns (LoginReply) {
    option (google.api.http) = {
      post: "/v1/user/login/github"
      body: "*"
    };
  }

  rpc LoginPasswordReset(LoginPasswordResetReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/user/login/password/reset"
      body: "*"
    };
  }

  rpc SendPhoneCode (SendPhoneCodeReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/user/code/phone"
      body: "*"
    };
  }

  rpc SendEmailCode (SendEmailCodeReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/user/code/email"
      body: "*"
    };
  }

  rpc GetCosSessionKey (google.protobuf.Empty) returns (GetCosSessionKeyReply) {
    option (google.api.http) = {
      get: "/v1/get/cos/session/key",
    };
  }

  rpc GetUserProfile (google.protobuf.Empty) returns (GetUserProfileReply) {
    option (google.api.http) = {
      get: "/v1/get/user/profile",
    };
  }

  rpc GetUserProfileUpdate (google.protobuf.Empty) returns (GetUserProfileUpdateReply) {
    option (google.api.http) = {
      get: "/v1/get/user/profile/update",
    };
  }

  rpc SetUserProfile (SetUserProfileReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/set/user/profile"
      body: "*"
    };
  }

  // --------------------message service------------------------

  rpc AvatarReview(AvatarReviewReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/message/avatar/review"
      body: "*"
    };
  }

  rpc ProfileReview(ProfileReviewReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/message/profile/review"
      body: "*"
    };
  }
}

// --------------------user service-------------------------

message UserRegisterReq{
  string email = 1;
  string password = 2;
  string code = 3;
}

message LoginByPasswordReq {
  string account = 1;
  string password = 2;
  string mode = 3;
}

message LoginByCodeReq {
  string phone = 1;
  string code = 2;
}

message LoginByWeChatReq{
  string wechat = 1;
}

message LoginByGithubReq{
  string github = 1;
}

message LoginReply {
  string token = 1;
}

message LoginPasswordResetReq{
  string account = 1;
  string code = 2;
  string password = 3;
  string mode = 4;
}

message SendPhoneCodeReq{
  string phone = 1;
  string template = 2;
}

message SendEmailCodeReq{
  string email = 1;
  string template = 2;
}

message GetCosSessionKeyReply{
  string tmp_secret_id = 1;
  string tmp_secret_key = 2;
  string session_token = 3;
  int64 start_time = 4;
  int64 expired_time = 5;
}

message GetUserProfileReply{
  string uuid = 1;
  string username = 2;
  string avatar = 3;
  string school = 4;
  string company = 5;
  string job = 6;
  string homepage = 7;
  string introduce = 8;
}

message GetUserProfileUpdateReply{
  string username = 1;
  string avatar = 2;
  string school = 3;
  string company = 4;
  string job = 5;
  string homepage = 6;
  string introduce = 7;
  int32 status = 8;
}

message SetUserProfileReq{
  string username = 1;
  string school = 2;
  string company = 3;
  string job = 4;
  string homepage = 5;
  string introduce = 6;
}

// --------------------message service------------------------

message ProfileReviewReq{
  message SectionPornInfoStruct{
    int32 HitFlag = 1;
    int32 Score = 2;
    string Keywords = 3;
  }
  message SectionAdsInfoStruct{
    int32 HitFlag = 1;
    int32 Score = 2;
    string Keywords = 3;
  }
  message SectionIllegalInfoStruct{
    int32 HitFlag = 1;
    int32 Score = 2;
    string Keywords = 3;
  }
  message SectionAbuseInfoStruct{
    int32 HitFlag = 1;
    int32 Score = 2;
    string Keywords = 3;
  }
  message SectionStruct{
    string Label = 1;
    int32 Result = 2;
    SectionPornInfoStruct PornInfo = 3;
    SectionAdsInfoStruct AdsInfo = 4;
    SectionIllegalInfoStruct IllegalInfo = 5;
    SectionAbuseInfoStruct AbuseInfo = 6;
  }
  message JobsDetailStruct{
    string Code = 1;
    string Message = 2;
    string JobId = 3;
    string DataId = 4;
    string State = 5;
    string CreationTime = 6;
    string Object = 7;
    string Label = 8;
    int32 Result = 9;
    string BucketId = 10;
    string Region = 11;
    map<string, string> CosHeaders = 12;
    repeated SectionStruct Section = 13;

  }
  JobsDetailStruct JobsDetail = 1;
  string EventName = 2;
}

message AvatarReviewReq{
  message JobsDetailStruct{
    string Code = 1;
    string Message = 2;
    string JobId = 3;
    string State = 4;
    string Object = 5;
    string Label = 6;
    int32 Result = 7;
    string Category = 8;
    string BucketId = 9;
    string Region = 10;
    map<string, string> CosHeaders = 11;
  }
  JobsDetailStruct JobsDetail = 1;
  string EventName = 2;
}