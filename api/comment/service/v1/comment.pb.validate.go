// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: comment/service/v1/comment.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _comment_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CreateCommentDraftReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentDraftReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentDraftReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentDraftReqMultiError, or nil if none found.
func (m *CreateCommentDraftReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentDraftReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = CreateCommentDraftReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateCommentDraftReqMultiError(errors)
	}

	return nil
}

func (m *CreateCommentDraftReq) _validateUuid(uuid string) error {
	if matched := _comment_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateCommentDraftReqMultiError is an error wrapping multiple validation
// errors returned by CreateCommentDraftReq.ValidateAll() if the designated
// constraints aren't met.
type CreateCommentDraftReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentDraftReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentDraftReqMultiError) AllErrors() []error { return m }

// CreateCommentDraftReqValidationError is the validation error returned by
// CreateCommentDraftReq.Validate if the designated constraints aren't met.
type CreateCommentDraftReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentDraftReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentDraftReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentDraftReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentDraftReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentDraftReqValidationError) ErrorName() string {
	return "CreateCommentDraftReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentDraftReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentDraftReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentDraftReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentDraftReqValidationError{}

// Validate checks the field values on CreateCommentDraftReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentDraftReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentDraftReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentDraftReplyMultiError, or nil if none found.
func (m *CreateCommentDraftReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentDraftReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateCommentDraftReplyMultiError(errors)
	}

	return nil
}

// CreateCommentDraftReplyMultiError is an error wrapping multiple validation
// errors returned by CreateCommentDraftReply.ValidateAll() if the designated
// constraints aren't met.
type CreateCommentDraftReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentDraftReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentDraftReplyMultiError) AllErrors() []error { return m }

// CreateCommentDraftReplyValidationError is the validation error returned by
// CreateCommentDraftReply.Validate if the designated constraints aren't met.
type CreateCommentDraftReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentDraftReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentDraftReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentDraftReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentDraftReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentDraftReplyValidationError) ErrorName() string {
	return "CreateCommentDraftReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentDraftReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentDraftReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentDraftReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentDraftReplyValidationError{}

// Validate checks the field values on GetLastCommentDraftReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLastCommentDraftReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLastCommentDraftReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLastCommentDraftReqMultiError, or nil if none found.
func (m *GetLastCommentDraftReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLastCommentDraftReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = GetLastCommentDraftReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetLastCommentDraftReqMultiError(errors)
	}

	return nil
}

func (m *GetLastCommentDraftReq) _validateUuid(uuid string) error {
	if matched := _comment_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetLastCommentDraftReqMultiError is an error wrapping multiple validation
// errors returned by GetLastCommentDraftReq.ValidateAll() if the designated
// constraints aren't met.
type GetLastCommentDraftReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLastCommentDraftReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLastCommentDraftReqMultiError) AllErrors() []error { return m }

// GetLastCommentDraftReqValidationError is the validation error returned by
// GetLastCommentDraftReq.Validate if the designated constraints aren't met.
type GetLastCommentDraftReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLastCommentDraftReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLastCommentDraftReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLastCommentDraftReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLastCommentDraftReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLastCommentDraftReqValidationError) ErrorName() string {
	return "GetLastCommentDraftReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetLastCommentDraftReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLastCommentDraftReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLastCommentDraftReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLastCommentDraftReqValidationError{}

// Validate checks the field values on GetLastCommentDraftReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLastCommentDraftReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLastCommentDraftReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLastCommentDraftReplyMultiError, or nil if none found.
func (m *GetLastCommentDraftReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLastCommentDraftReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	if len(errors) > 0 {
		return GetLastCommentDraftReplyMultiError(errors)
	}

	return nil
}

// GetLastCommentDraftReplyMultiError is an error wrapping multiple validation
// errors returned by GetLastCommentDraftReply.ValidateAll() if the designated
// constraints aren't met.
type GetLastCommentDraftReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLastCommentDraftReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLastCommentDraftReplyMultiError) AllErrors() []error { return m }

// GetLastCommentDraftReplyValidationError is the validation error returned by
// GetLastCommentDraftReply.Validate if the designated constraints aren't met.
type GetLastCommentDraftReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLastCommentDraftReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLastCommentDraftReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLastCommentDraftReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLastCommentDraftReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLastCommentDraftReplyValidationError) ErrorName() string {
	return "GetLastCommentDraftReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetLastCommentDraftReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLastCommentDraftReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLastCommentDraftReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLastCommentDraftReplyValidationError{}

// Validate checks the field values on GetUserCommentAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserCommentAgreeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserCommentAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserCommentAgreeReqMultiError, or nil if none found.
func (m *GetUserCommentAgreeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserCommentAgreeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = GetUserCommentAgreeReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserCommentAgreeReqMultiError(errors)
	}

	return nil
}

func (m *GetUserCommentAgreeReq) _validateUuid(uuid string) error {
	if matched := _comment_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetUserCommentAgreeReqMultiError is an error wrapping multiple validation
// errors returned by GetUserCommentAgreeReq.ValidateAll() if the designated
// constraints aren't met.
type GetUserCommentAgreeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserCommentAgreeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserCommentAgreeReqMultiError) AllErrors() []error { return m }

// GetUserCommentAgreeReqValidationError is the validation error returned by
// GetUserCommentAgreeReq.Validate if the designated constraints aren't met.
type GetUserCommentAgreeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserCommentAgreeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserCommentAgreeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserCommentAgreeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserCommentAgreeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserCommentAgreeReqValidationError) ErrorName() string {
	return "GetUserCommentAgreeReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserCommentAgreeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserCommentAgreeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserCommentAgreeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserCommentAgreeReqValidationError{}

// Validate checks the field values on GetUserCommentAgreeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserCommentAgreeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserCommentAgreeReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserCommentAgreeReplyMultiError, or nil if none found.
func (m *GetUserCommentAgreeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserCommentAgreeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Agree

	if len(errors) > 0 {
		return GetUserCommentAgreeReplyMultiError(errors)
	}

	return nil
}

// GetUserCommentAgreeReplyMultiError is an error wrapping multiple validation
// errors returned by GetUserCommentAgreeReply.ValidateAll() if the designated
// constraints aren't met.
type GetUserCommentAgreeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserCommentAgreeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserCommentAgreeReplyMultiError) AllErrors() []error { return m }

// GetUserCommentAgreeReplyValidationError is the validation error returned by
// GetUserCommentAgreeReply.Validate if the designated constraints aren't met.
type GetUserCommentAgreeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserCommentAgreeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserCommentAgreeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserCommentAgreeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserCommentAgreeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserCommentAgreeReplyValidationError) ErrorName() string {
	return "GetUserCommentAgreeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserCommentAgreeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserCommentAgreeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserCommentAgreeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserCommentAgreeReplyValidationError{}

// Validate checks the field values on GetCommentUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCommentUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentUserReqMultiError, or nil if none found.
func (m *GetCommentUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = GetCommentUserReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCommentUserReqMultiError(errors)
	}

	return nil
}

func (m *GetCommentUserReq) _validateUuid(uuid string) error {
	if matched := _comment_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetCommentUserReqMultiError is an error wrapping multiple validation errors
// returned by GetCommentUserReq.ValidateAll() if the designated constraints
// aren't met.
type GetCommentUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentUserReqMultiError) AllErrors() []error { return m }

// GetCommentUserReqValidationError is the validation error returned by
// GetCommentUserReq.Validate if the designated constraints aren't met.
type GetCommentUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentUserReqValidationError) ErrorName() string {
	return "GetCommentUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentUserReqValidationError{}

// Validate checks the field values on GetCommentUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentUserReplyMultiError, or nil if none found.
func (m *GetCommentUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Comment

	if len(errors) > 0 {
		return GetCommentUserReplyMultiError(errors)
	}

	return nil
}

// GetCommentUserReplyMultiError is an error wrapping multiple validation
// errors returned by GetCommentUserReply.ValidateAll() if the designated
// constraints aren't met.
type GetCommentUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentUserReplyMultiError) AllErrors() []error { return m }

// GetCommentUserReplyValidationError is the validation error returned by
// GetCommentUserReply.Validate if the designated constraints aren't met.
type GetCommentUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentUserReplyValidationError) ErrorName() string {
	return "GetCommentUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentUserReplyValidationError{}

// Validate checks the field values on SendCommentReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendCommentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendCommentReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendCommentReqMultiError,
// or nil if none found.
func (m *SendCommentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendCommentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = SendCommentReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if ip := net.ParseIP(m.GetIp()); ip == nil {
		err := SendCommentReqValidationError{
			field:  "Ip",
			reason: "value must be a valid IP address",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendCommentReqMultiError(errors)
	}

	return nil
}

func (m *SendCommentReq) _validateUuid(uuid string) error {
	if matched := _comment_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SendCommentReqMultiError is an error wrapping multiple validation errors
// returned by SendCommentReq.ValidateAll() if the designated constraints
// aren't met.
type SendCommentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendCommentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendCommentReqMultiError) AllErrors() []error { return m }

// SendCommentReqValidationError is the validation error returned by
// SendCommentReq.Validate if the designated constraints aren't met.
type SendCommentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendCommentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendCommentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendCommentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendCommentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendCommentReqValidationError) ErrorName() string { return "SendCommentReqValidationError" }

// Error satisfies the builtin error interface
func (e SendCommentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendCommentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendCommentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendCommentReqValidationError{}

// Validate checks the field values on SendSubCommentReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendSubCommentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendSubCommentReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendSubCommentReqMultiError, or nil if none found.
func (m *SendSubCommentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendSubCommentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = SendSubCommentReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if ip := net.ParseIP(m.GetIp()); ip == nil {
		err := SendSubCommentReqValidationError{
			field:  "Ip",
			reason: "value must be a valid IP address",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendSubCommentReqMultiError(errors)
	}

	return nil
}

func (m *SendSubCommentReq) _validateUuid(uuid string) error {
	if matched := _comment_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SendSubCommentReqMultiError is an error wrapping multiple validation errors
// returned by SendSubCommentReq.ValidateAll() if the designated constraints
// aren't met.
type SendSubCommentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendSubCommentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendSubCommentReqMultiError) AllErrors() []error { return m }

// SendSubCommentReqValidationError is the validation error returned by
// SendSubCommentReq.Validate if the designated constraints aren't met.
type SendSubCommentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendSubCommentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendSubCommentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendSubCommentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendSubCommentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendSubCommentReqValidationError) ErrorName() string {
	return "SendSubCommentReqValidationError"
}

// Error satisfies the builtin error interface
func (e SendSubCommentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendSubCommentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendSubCommentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendSubCommentReqValidationError{}

// Validate checks the field values on CreateCommentReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentReqMultiError, or nil if none found.
func (m *CreateCommentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreationId

	// no validation rules for CreationType

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = CreateCommentReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateCommentReqMultiError(errors)
	}

	return nil
}

func (m *CreateCommentReq) _validateUuid(uuid string) error {
	if matched := _comment_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateCommentReqMultiError is an error wrapping multiple validation errors
// returned by CreateCommentReq.ValidateAll() if the designated constraints
// aren't met.
type CreateCommentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentReqMultiError) AllErrors() []error { return m }

// CreateCommentReqValidationError is the validation error returned by
// CreateCommentReq.Validate if the designated constraints aren't met.
type CreateCommentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentReqValidationError) ErrorName() string { return "CreateCommentReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateCommentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentReqValidationError{}

// Validate checks the field values on CreateSubCommentReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSubCommentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSubCommentReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSubCommentReqMultiError, or nil if none found.
func (m *CreateSubCommentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSubCommentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for RootId

	// no validation rules for ParentId

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = CreateSubCommentReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateSubCommentReqMultiError(errors)
	}

	return nil
}

func (m *CreateSubCommentReq) _validateUuid(uuid string) error {
	if matched := _comment_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateSubCommentReqMultiError is an error wrapping multiple validation
// errors returned by CreateSubCommentReq.ValidateAll() if the designated
// constraints aren't met.
type CreateSubCommentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSubCommentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSubCommentReqMultiError) AllErrors() []error { return m }

// CreateSubCommentReqValidationError is the validation error returned by
// CreateSubCommentReq.Validate if the designated constraints aren't met.
type CreateSubCommentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSubCommentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSubCommentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSubCommentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSubCommentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSubCommentReqValidationError) ErrorName() string {
	return "CreateSubCommentReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSubCommentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSubCommentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSubCommentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSubCommentReqValidationError{}

// Validate checks the field values on CreateCommentDbAndCacheReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentDbAndCacheReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentDbAndCacheReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentDbAndCacheReqMultiError, or nil if none found.
func (m *CreateCommentDbAndCacheReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentDbAndCacheReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreationId

	// no validation rules for CreationType

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = CreateCommentDbAndCacheReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateCommentDbAndCacheReqMultiError(errors)
	}

	return nil
}

func (m *CreateCommentDbAndCacheReq) _validateUuid(uuid string) error {
	if matched := _comment_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateCommentDbAndCacheReqMultiError is an error wrapping multiple
// validation errors returned by CreateCommentDbAndCacheReq.ValidateAll() if
// the designated constraints aren't met.
type CreateCommentDbAndCacheReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentDbAndCacheReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentDbAndCacheReqMultiError) AllErrors() []error { return m }

// CreateCommentDbAndCacheReqValidationError is the validation error returned
// by CreateCommentDbAndCacheReq.Validate if the designated constraints aren't met.
type CreateCommentDbAndCacheReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentDbAndCacheReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentDbAndCacheReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentDbAndCacheReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentDbAndCacheReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentDbAndCacheReqValidationError) ErrorName() string {
	return "CreateCommentDbAndCacheReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentDbAndCacheReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentDbAndCacheReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentDbAndCacheReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentDbAndCacheReqValidationError{}

// Validate checks the field values on CreateSubCommentDbAndCacheReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSubCommentDbAndCacheReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSubCommentDbAndCacheReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateSubCommentDbAndCacheReqMultiError, or nil if none found.
func (m *CreateSubCommentDbAndCacheReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSubCommentDbAndCacheReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for RootId

	// no validation rules for ParentId

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = CreateSubCommentDbAndCacheReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateSubCommentDbAndCacheReqMultiError(errors)
	}

	return nil
}

func (m *CreateSubCommentDbAndCacheReq) _validateUuid(uuid string) error {
	if matched := _comment_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateSubCommentDbAndCacheReqMultiError is an error wrapping multiple
// validation errors returned by CreateSubCommentDbAndCacheReq.ValidateAll()
// if the designated constraints aren't met.
type CreateSubCommentDbAndCacheReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSubCommentDbAndCacheReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSubCommentDbAndCacheReqMultiError) AllErrors() []error { return m }

// CreateSubCommentDbAndCacheReqValidationError is the validation error
// returned by CreateSubCommentDbAndCacheReq.Validate if the designated
// constraints aren't met.
type CreateSubCommentDbAndCacheReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSubCommentDbAndCacheReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSubCommentDbAndCacheReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSubCommentDbAndCacheReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSubCommentDbAndCacheReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSubCommentDbAndCacheReqValidationError) ErrorName() string {
	return "CreateSubCommentDbAndCacheReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSubCommentDbAndCacheReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSubCommentDbAndCacheReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSubCommentDbAndCacheReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSubCommentDbAndCacheReqValidationError{}

// Validate checks the field values on GetCommentListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCommentListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentListReqMultiError, or nil if none found.
func (m *GetCommentListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for CreationId

	// no validation rules for CreationType

	if len(errors) > 0 {
		return GetCommentListReqMultiError(errors)
	}

	return nil
}

// GetCommentListReqMultiError is an error wrapping multiple validation errors
// returned by GetCommentListReq.ValidateAll() if the designated constraints
// aren't met.
type GetCommentListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentListReqMultiError) AllErrors() []error { return m }

// GetCommentListReqValidationError is the validation error returned by
// GetCommentListReq.Validate if the designated constraints aren't met.
type GetCommentListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentListReqValidationError) ErrorName() string {
	return "GetCommentListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentListReqValidationError{}

// Validate checks the field values on GetSubCommentListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubCommentListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubCommentListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubCommentListReqMultiError, or nil if none found.
func (m *GetSubCommentListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubCommentListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Id

	if len(errors) > 0 {
		return GetSubCommentListReqMultiError(errors)
	}

	return nil
}

// GetSubCommentListReqMultiError is an error wrapping multiple validation
// errors returned by GetSubCommentListReq.ValidateAll() if the designated
// constraints aren't met.
type GetSubCommentListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubCommentListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubCommentListReqMultiError) AllErrors() []error { return m }

// GetSubCommentListReqValidationError is the validation error returned by
// GetSubCommentListReq.Validate if the designated constraints aren't met.
type GetSubCommentListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubCommentListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubCommentListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubCommentListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubCommentListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubCommentListReqValidationError) ErrorName() string {
	return "GetSubCommentListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubCommentListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubCommentListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubCommentListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubCommentListReqValidationError{}

// Validate checks the field values on GetCommentListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentListReplyMultiError, or nil if none found.
func (m *GetCommentListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetComment() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCommentListReplyValidationError{
						field:  fmt.Sprintf("Comment[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCommentListReplyValidationError{
						field:  fmt.Sprintf("Comment[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCommentListReplyValidationError{
					field:  fmt.Sprintf("Comment[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCommentListReplyMultiError(errors)
	}

	return nil
}

// GetCommentListReplyMultiError is an error wrapping multiple validation
// errors returned by GetCommentListReply.ValidateAll() if the designated
// constraints aren't met.
type GetCommentListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentListReplyMultiError) AllErrors() []error { return m }

// GetCommentListReplyValidationError is the validation error returned by
// GetCommentListReply.Validate if the designated constraints aren't met.
type GetCommentListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentListReplyValidationError) ErrorName() string {
	return "GetCommentListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentListReplyValidationError{}

// Validate checks the field values on GetSubCommentListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubCommentListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubCommentListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubCommentListReplyMultiError, or nil if none found.
func (m *GetSubCommentListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubCommentListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetComment() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSubCommentListReplyValidationError{
						field:  fmt.Sprintf("Comment[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSubCommentListReplyValidationError{
						field:  fmt.Sprintf("Comment[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSubCommentListReplyValidationError{
					field:  fmt.Sprintf("Comment[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSubCommentListReplyMultiError(errors)
	}

	return nil
}

// GetSubCommentListReplyMultiError is an error wrapping multiple validation
// errors returned by GetSubCommentListReply.ValidateAll() if the designated
// constraints aren't met.
type GetSubCommentListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubCommentListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubCommentListReplyMultiError) AllErrors() []error { return m }

// GetSubCommentListReplyValidationError is the validation error returned by
// GetSubCommentListReply.Validate if the designated constraints aren't met.
type GetSubCommentListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubCommentListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubCommentListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubCommentListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubCommentListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubCommentListReplyValidationError) ErrorName() string {
	return "GetSubCommentListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubCommentListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubCommentListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubCommentListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubCommentListReplyValidationError{}

// Validate checks the field values on RemoveCommentDbAndCacheReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveCommentDbAndCacheReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveCommentDbAndCacheReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveCommentDbAndCacheReqMultiError, or nil if none found.
func (m *RemoveCommentDbAndCacheReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveCommentDbAndCacheReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreationId

	// no validation rules for CreationType

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = RemoveCommentDbAndCacheReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveCommentDbAndCacheReqMultiError(errors)
	}

	return nil
}

func (m *RemoveCommentDbAndCacheReq) _validateUuid(uuid string) error {
	if matched := _comment_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RemoveCommentDbAndCacheReqMultiError is an error wrapping multiple
// validation errors returned by RemoveCommentDbAndCacheReq.ValidateAll() if
// the designated constraints aren't met.
type RemoveCommentDbAndCacheReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveCommentDbAndCacheReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveCommentDbAndCacheReqMultiError) AllErrors() []error { return m }

// RemoveCommentDbAndCacheReqValidationError is the validation error returned
// by RemoveCommentDbAndCacheReq.Validate if the designated constraints aren't met.
type RemoveCommentDbAndCacheReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveCommentDbAndCacheReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveCommentDbAndCacheReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveCommentDbAndCacheReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveCommentDbAndCacheReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveCommentDbAndCacheReqValidationError) ErrorName() string {
	return "RemoveCommentDbAndCacheReqValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveCommentDbAndCacheReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveCommentDbAndCacheReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveCommentDbAndCacheReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveCommentDbAndCacheReqValidationError{}

// Validate checks the field values on RemoveSubCommentDbAndCacheReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveSubCommentDbAndCacheReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveSubCommentDbAndCacheReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveSubCommentDbAndCacheReqMultiError, or nil if none found.
func (m *RemoveSubCommentDbAndCacheReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveSubCommentDbAndCacheReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for RootId

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = RemoveSubCommentDbAndCacheReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveSubCommentDbAndCacheReqMultiError(errors)
	}

	return nil
}

func (m *RemoveSubCommentDbAndCacheReq) _validateUuid(uuid string) error {
	if matched := _comment_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RemoveSubCommentDbAndCacheReqMultiError is an error wrapping multiple
// validation errors returned by RemoveSubCommentDbAndCacheReq.ValidateAll()
// if the designated constraints aren't met.
type RemoveSubCommentDbAndCacheReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveSubCommentDbAndCacheReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveSubCommentDbAndCacheReqMultiError) AllErrors() []error { return m }

// RemoveSubCommentDbAndCacheReqValidationError is the validation error
// returned by RemoveSubCommentDbAndCacheReq.Validate if the designated
// constraints aren't met.
type RemoveSubCommentDbAndCacheReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveSubCommentDbAndCacheReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveSubCommentDbAndCacheReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveSubCommentDbAndCacheReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveSubCommentDbAndCacheReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveSubCommentDbAndCacheReqValidationError) ErrorName() string {
	return "RemoveSubCommentDbAndCacheReqValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveSubCommentDbAndCacheReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveSubCommentDbAndCacheReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveSubCommentDbAndCacheReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveSubCommentDbAndCacheReqValidationError{}

// Validate checks the field values on GetCommentListStatisticReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentListStatisticReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentListStatisticReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentListStatisticReqMultiError, or nil if none found.
func (m *GetCommentListStatisticReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentListStatisticReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCommentListStatisticReqMultiError(errors)
	}

	return nil
}

// GetCommentListStatisticReqMultiError is an error wrapping multiple
// validation errors returned by GetCommentListStatisticReq.ValidateAll() if
// the designated constraints aren't met.
type GetCommentListStatisticReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentListStatisticReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentListStatisticReqMultiError) AllErrors() []error { return m }

// GetCommentListStatisticReqValidationError is the validation error returned
// by GetCommentListStatisticReq.Validate if the designated constraints aren't met.
type GetCommentListStatisticReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentListStatisticReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentListStatisticReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentListStatisticReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentListStatisticReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentListStatisticReqValidationError) ErrorName() string {
	return "GetCommentListStatisticReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentListStatisticReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentListStatisticReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentListStatisticReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentListStatisticReqValidationError{}

// Validate checks the field values on GetCommentListStatisticReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentListStatisticReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentListStatisticReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentListStatisticReplyMultiError, or nil if none found.
func (m *GetCommentListStatisticReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentListStatisticReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCount() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCommentListStatisticReplyValidationError{
						field:  fmt.Sprintf("Count[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCommentListStatisticReplyValidationError{
						field:  fmt.Sprintf("Count[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCommentListStatisticReplyValidationError{
					field:  fmt.Sprintf("Count[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCommentListStatisticReplyMultiError(errors)
	}

	return nil
}

// GetCommentListStatisticReplyMultiError is an error wrapping multiple
// validation errors returned by GetCommentListStatisticReply.ValidateAll() if
// the designated constraints aren't met.
type GetCommentListStatisticReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentListStatisticReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentListStatisticReplyMultiError) AllErrors() []error { return m }

// GetCommentListStatisticReplyValidationError is the validation error returned
// by GetCommentListStatisticReply.Validate if the designated constraints
// aren't met.
type GetCommentListStatisticReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentListStatisticReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentListStatisticReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentListStatisticReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentListStatisticReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentListStatisticReplyValidationError) ErrorName() string {
	return "GetCommentListStatisticReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentListStatisticReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentListStatisticReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentListStatisticReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentListStatisticReplyValidationError{}

// Validate checks the field values on SetCommentAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetCommentAgreeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetCommentAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetCommentAgreeReqMultiError, or nil if none found.
func (m *SetCommentAgreeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetCommentAgreeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = SetCommentAgreeReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserUuid()); err != nil {
		err = SetCommentAgreeReqValidationError{
			field:  "UserUuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreationId

	// no validation rules for CreationType

	if len(errors) > 0 {
		return SetCommentAgreeReqMultiError(errors)
	}

	return nil
}

func (m *SetCommentAgreeReq) _validateUuid(uuid string) error {
	if matched := _comment_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SetCommentAgreeReqMultiError is an error wrapping multiple validation errors
// returned by SetCommentAgreeReq.ValidateAll() if the designated constraints
// aren't met.
type SetCommentAgreeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetCommentAgreeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetCommentAgreeReqMultiError) AllErrors() []error { return m }

// SetCommentAgreeReqValidationError is the validation error returned by
// SetCommentAgreeReq.Validate if the designated constraints aren't met.
type SetCommentAgreeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetCommentAgreeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetCommentAgreeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetCommentAgreeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetCommentAgreeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetCommentAgreeReqValidationError) ErrorName() string {
	return "SetCommentAgreeReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetCommentAgreeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetCommentAgreeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetCommentAgreeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetCommentAgreeReqValidationError{}

// Validate checks the field values on SetSubCommentAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetSubCommentAgreeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetSubCommentAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetSubCommentAgreeReqMultiError, or nil if none found.
func (m *SetSubCommentAgreeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetSubCommentAgreeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = SetSubCommentAgreeReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserUuid()); err != nil {
		err = SetSubCommentAgreeReqValidationError{
			field:  "UserUuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetSubCommentAgreeReqMultiError(errors)
	}

	return nil
}

func (m *SetSubCommentAgreeReq) _validateUuid(uuid string) error {
	if matched := _comment_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SetSubCommentAgreeReqMultiError is an error wrapping multiple validation
// errors returned by SetSubCommentAgreeReq.ValidateAll() if the designated
// constraints aren't met.
type SetSubCommentAgreeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetSubCommentAgreeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetSubCommentAgreeReqMultiError) AllErrors() []error { return m }

// SetSubCommentAgreeReqValidationError is the validation error returned by
// SetSubCommentAgreeReq.Validate if the designated constraints aren't met.
type SetSubCommentAgreeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetSubCommentAgreeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetSubCommentAgreeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetSubCommentAgreeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetSubCommentAgreeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetSubCommentAgreeReqValidationError) ErrorName() string {
	return "SetSubCommentAgreeReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetSubCommentAgreeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetSubCommentAgreeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetSubCommentAgreeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetSubCommentAgreeReqValidationError{}

// Validate checks the field values on CancelCommentAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelCommentAgreeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelCommentAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelCommentAgreeReqMultiError, or nil if none found.
func (m *CancelCommentAgreeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelCommentAgreeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = CancelCommentAgreeReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserUuid()); err != nil {
		err = CancelCommentAgreeReqValidationError{
			field:  "UserUuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreationId

	// no validation rules for CreationType

	if len(errors) > 0 {
		return CancelCommentAgreeReqMultiError(errors)
	}

	return nil
}

func (m *CancelCommentAgreeReq) _validateUuid(uuid string) error {
	if matched := _comment_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CancelCommentAgreeReqMultiError is an error wrapping multiple validation
// errors returned by CancelCommentAgreeReq.ValidateAll() if the designated
// constraints aren't met.
type CancelCommentAgreeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelCommentAgreeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelCommentAgreeReqMultiError) AllErrors() []error { return m }

// CancelCommentAgreeReqValidationError is the validation error returned by
// CancelCommentAgreeReq.Validate if the designated constraints aren't met.
type CancelCommentAgreeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelCommentAgreeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelCommentAgreeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelCommentAgreeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelCommentAgreeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelCommentAgreeReqValidationError) ErrorName() string {
	return "CancelCommentAgreeReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelCommentAgreeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelCommentAgreeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelCommentAgreeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelCommentAgreeReqValidationError{}

// Validate checks the field values on CancelSubCommentAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelSubCommentAgreeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelSubCommentAgreeReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelSubCommentAgreeReqMultiError, or nil if none found.
func (m *CancelSubCommentAgreeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelSubCommentAgreeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = CancelSubCommentAgreeReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserUuid()); err != nil {
		err = CancelSubCommentAgreeReqValidationError{
			field:  "UserUuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelSubCommentAgreeReqMultiError(errors)
	}

	return nil
}

func (m *CancelSubCommentAgreeReq) _validateUuid(uuid string) error {
	if matched := _comment_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CancelSubCommentAgreeReqMultiError is an error wrapping multiple validation
// errors returned by CancelSubCommentAgreeReq.ValidateAll() if the designated
// constraints aren't met.
type CancelSubCommentAgreeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelSubCommentAgreeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelSubCommentAgreeReqMultiError) AllErrors() []error { return m }

// CancelSubCommentAgreeReqValidationError is the validation error returned by
// CancelSubCommentAgreeReq.Validate if the designated constraints aren't met.
type CancelSubCommentAgreeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelSubCommentAgreeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelSubCommentAgreeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelSubCommentAgreeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelSubCommentAgreeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelSubCommentAgreeReqValidationError) ErrorName() string {
	return "CancelSubCommentAgreeReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelSubCommentAgreeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelSubCommentAgreeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelSubCommentAgreeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelSubCommentAgreeReqValidationError{}

// Validate checks the field values on RemoveCommentReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RemoveCommentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveCommentReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveCommentReqMultiError, or nil if none found.
func (m *RemoveCommentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveCommentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = RemoveCommentReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserUuid()); err != nil {
		err = RemoveCommentReqValidationError{
			field:  "UserUuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreationId

	// no validation rules for CreationType

	if len(errors) > 0 {
		return RemoveCommentReqMultiError(errors)
	}

	return nil
}

func (m *RemoveCommentReq) _validateUuid(uuid string) error {
	if matched := _comment_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RemoveCommentReqMultiError is an error wrapping multiple validation errors
// returned by RemoveCommentReq.ValidateAll() if the designated constraints
// aren't met.
type RemoveCommentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveCommentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveCommentReqMultiError) AllErrors() []error { return m }

// RemoveCommentReqValidationError is the validation error returned by
// RemoveCommentReq.Validate if the designated constraints aren't met.
type RemoveCommentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveCommentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveCommentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveCommentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveCommentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveCommentReqValidationError) ErrorName() string { return "RemoveCommentReqValidationError" }

// Error satisfies the builtin error interface
func (e RemoveCommentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveCommentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveCommentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveCommentReqValidationError{}

// Validate checks the field values on RemoveSubCommentReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveSubCommentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveSubCommentReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveSubCommentReqMultiError, or nil if none found.
func (m *RemoveSubCommentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveSubCommentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for RootId

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = RemoveSubCommentReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserUuid()); err != nil {
		err = RemoveSubCommentReqValidationError{
			field:  "UserUuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetReply() != "" {

		if err := m._validateUuid(m.GetReply()); err != nil {
			err = RemoveSubCommentReqValidationError{
				field:  "Reply",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return RemoveSubCommentReqMultiError(errors)
	}

	return nil
}

func (m *RemoveSubCommentReq) _validateUuid(uuid string) error {
	if matched := _comment_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RemoveSubCommentReqMultiError is an error wrapping multiple validation
// errors returned by RemoveSubCommentReq.ValidateAll() if the designated
// constraints aren't met.
type RemoveSubCommentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveSubCommentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveSubCommentReqMultiError) AllErrors() []error { return m }

// RemoveSubCommentReqValidationError is the validation error returned by
// RemoveSubCommentReq.Validate if the designated constraints aren't met.
type RemoveSubCommentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveSubCommentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveSubCommentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveSubCommentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveSubCommentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveSubCommentReqValidationError) ErrorName() string {
	return "RemoveSubCommentReqValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveSubCommentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveSubCommentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveSubCommentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveSubCommentReqValidationError{}

// Validate checks the field values on GetCommentListReply_Comment with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentListReply_Comment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentListReply_Comment with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentListReply_CommentMultiError, or nil if none found.
func (m *GetCommentListReply_Comment) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentListReply_Comment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetCommentListReply_CommentMultiError(errors)
	}

	return nil
}

// GetCommentListReply_CommentMultiError is an error wrapping multiple
// validation errors returned by GetCommentListReply_Comment.ValidateAll() if
// the designated constraints aren't met.
type GetCommentListReply_CommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentListReply_CommentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentListReply_CommentMultiError) AllErrors() []error { return m }

// GetCommentListReply_CommentValidationError is the validation error returned
// by GetCommentListReply_Comment.Validate if the designated constraints
// aren't met.
type GetCommentListReply_CommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentListReply_CommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentListReply_CommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentListReply_CommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentListReply_CommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentListReply_CommentValidationError) ErrorName() string {
	return "GetCommentListReply_CommentValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentListReply_CommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentListReply_Comment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentListReply_CommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentListReply_CommentValidationError{}

// Validate checks the field values on GetSubCommentListReply_Comment with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubCommentListReply_Comment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubCommentListReply_Comment with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetSubCommentListReply_CommentMultiError, or nil if none found.
func (m *GetSubCommentListReply_Comment) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubCommentListReply_Comment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	// no validation rules for Reply

	if len(errors) > 0 {
		return GetSubCommentListReply_CommentMultiError(errors)
	}

	return nil
}

// GetSubCommentListReply_CommentMultiError is an error wrapping multiple
// validation errors returned by GetSubCommentListReply_Comment.ValidateAll()
// if the designated constraints aren't met.
type GetSubCommentListReply_CommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubCommentListReply_CommentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubCommentListReply_CommentMultiError) AllErrors() []error { return m }

// GetSubCommentListReply_CommentValidationError is the validation error
// returned by GetSubCommentListReply_Comment.Validate if the designated
// constraints aren't met.
type GetSubCommentListReply_CommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubCommentListReply_CommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubCommentListReply_CommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubCommentListReply_CommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubCommentListReply_CommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubCommentListReply_CommentValidationError) ErrorName() string {
	return "GetSubCommentListReply_CommentValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubCommentListReply_CommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubCommentListReply_Comment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubCommentListReply_CommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubCommentListReply_CommentValidationError{}

// Validate checks the field values on GetCommentListStatisticReply_Count with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetCommentListStatisticReply_Count) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentListStatisticReply_Count
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetCommentListStatisticReply_CountMultiError, or nil if none found.
func (m *GetCommentListStatisticReply_Count) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentListStatisticReply_Count) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Agree

	// no validation rules for Comment

	if len(errors) > 0 {
		return GetCommentListStatisticReply_CountMultiError(errors)
	}

	return nil
}

// GetCommentListStatisticReply_CountMultiError is an error wrapping multiple
// validation errors returned by
// GetCommentListStatisticReply_Count.ValidateAll() if the designated
// constraints aren't met.
type GetCommentListStatisticReply_CountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentListStatisticReply_CountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentListStatisticReply_CountMultiError) AllErrors() []error { return m }

// GetCommentListStatisticReply_CountValidationError is the validation error
// returned by GetCommentListStatisticReply_Count.Validate if the designated
// constraints aren't met.
type GetCommentListStatisticReply_CountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentListStatisticReply_CountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentListStatisticReply_CountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentListStatisticReply_CountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentListStatisticReply_CountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentListStatisticReply_CountValidationError) ErrorName() string {
	return "GetCommentListStatisticReply_CountValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentListStatisticReply_CountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentListStatisticReply_Count.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentListStatisticReply_CountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentListStatisticReply_CountValidationError{}
