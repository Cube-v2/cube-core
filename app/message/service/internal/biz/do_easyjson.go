// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package biz

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson899f4d6bDecodeGithubComTheZionMatrixCoreAppMessageServiceInternalBiz(in *jlexer.Lexer, out *SystemNotification) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int32(in.Int32())
		case "contentId":
			out.ContentId = int32(in.Int32())
		case "createdAt":
			out.CreatedAt = string(in.String())
		case "notificationType":
			out.NotificationType = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "uid":
			out.Uid = string(in.String())
		case "uuid":
			out.Uuid = string(in.String())
		case "label":
			out.Label = string(in.String())
		case "result":
			out.Result = int32(in.Int32())
		case "section":
			out.Section = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "comment":
			out.Comment = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson899f4d6bEncodeGithubComTheZionMatrixCoreAppMessageServiceInternalBiz(out *jwriter.Writer, in SystemNotification) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Id))
	}
	{
		const prefix string = ",\"contentId\":"
		out.RawString(prefix)
		out.Int32(int32(in.ContentId))
	}
	{
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"notificationType\":"
		out.RawString(prefix)
		out.String(string(in.NotificationType))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"uid\":"
		out.RawString(prefix)
		out.String(string(in.Uid))
	}
	{
		const prefix string = ",\"uuid\":"
		out.RawString(prefix)
		out.String(string(in.Uuid))
	}
	{
		const prefix string = ",\"label\":"
		out.RawString(prefix)
		out.String(string(in.Label))
	}
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix)
		out.Int32(int32(in.Result))
	}
	{
		const prefix string = ",\"section\":"
		out.RawString(prefix)
		out.String(string(in.Section))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"comment\":"
		out.RawString(prefix)
		out.String(string(in.Comment))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SystemNotification) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson899f4d6bEncodeGithubComTheZionMatrixCoreAppMessageServiceInternalBiz(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SystemNotification) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson899f4d6bEncodeGithubComTheZionMatrixCoreAppMessageServiceInternalBiz(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SystemNotification) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson899f4d6bDecodeGithubComTheZionMatrixCoreAppMessageServiceInternalBiz(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SystemNotification) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson899f4d6bDecodeGithubComTheZionMatrixCoreAppMessageServiceInternalBiz(l, v)
}
