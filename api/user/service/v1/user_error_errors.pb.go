// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsUnknownError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_UNKNOWN_ERROR.String() && e.Code == 500
}

func ErrorUnknownError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_UNKNOWN_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsVerifyPasswordFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_VERIFY_PASSWORD_FAILED.String() && e.Code == 401
}

func ErrorVerifyPasswordFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(401, UserErrorReason_VERIFY_PASSWORD_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsVerifyCodeFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_VERIFY_CODE_FAILED.String() && e.Code == 401
}

func ErrorVerifyCodeFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(401, UserErrorReason_VERIFY_CODE_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUsernameConflict(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_USERNAME_CONFLICT.String() && e.Code == 409
}

func ErrorUsernameConflict(format string, args ...interface{}) *errors.Error {
	return errors.New(409, UserErrorReason_USERNAME_CONFLICT.String(), fmt.Sprintf(format, args...))
}

func IsPhoneConflict(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_PHONE_CONFLICT.String() && e.Code == 409
}

func ErrorPhoneConflict(format string, args ...interface{}) *errors.Error {
	return errors.New(409, UserErrorReason_PHONE_CONFLICT.String(), fmt.Sprintf(format, args...))
}

func IsEmailConflict(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_EMAIL_CONFLICT.String() && e.Code == 409
}

func ErrorEmailConflict(format string, args ...interface{}) *errors.Error {
	return errors.New(409, UserErrorReason_EMAIL_CONFLICT.String(), fmt.Sprintf(format, args...))
}

func IsUserNameConflict(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_USER_NAME_CONFLICT.String() && e.Code == 409
}

func ErrorUserNameConflict(format string, args ...interface{}) *errors.Error {
	return errors.New(409, UserErrorReason_USER_NAME_CONFLICT.String(), fmt.Sprintf(format, args...))
}

func IsGetAccountFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_GET_ACCOUNT_FAILED.String() && e.Code == 404
}

func ErrorGetAccountFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(404, UserErrorReason_GET_ACCOUNT_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetProfileFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_GET_PROFILE_FAILED.String() && e.Code == 404
}

func ErrorGetProfileFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(404, UserErrorReason_GET_PROFILE_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetProfileUpdateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_GET_PROFILE_UPDATE_FAILED.String() && e.Code == 404
}

func ErrorGetProfileUpdateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(404, UserErrorReason_GET_PROFILE_UPDATE_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetAchievementFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_GET_ACHIEVEMENT_FAILED.String() && e.Code == 404
}

func ErrorGetAchievementFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(404, UserErrorReason_GET_ACHIEVEMENT_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetUserFollowFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_GET_USER_FOLLOW_FAILED.String() && e.Code == 500
}

func ErrorGetUserFollowFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_GET_USER_FOLLOW_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetFollowListFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_GET_FOLLOW_LIST_FAILED.String() && e.Code == 500
}

func ErrorGetFollowListFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_GET_FOLLOW_LIST_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetFollowListCountFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_GET_FOLLOW_LIST_COUNT_FAILED.String() && e.Code == 500
}

func ErrorGetFollowListCountFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_GET_FOLLOW_LIST_COUNT_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetProfileListFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_GET_PROFILE_LIST_FAILED.String() && e.Code == 500
}

func ErrorGetProfileListFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_GET_PROFILE_LIST_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetUserSearchFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_GET_USER_SEARCH_FAILED.String() && e.Code == 500
}

func ErrorGetUserSearchFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_GET_USER_SEARCH_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsSendCodeFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_SEND_CODE_FAILED.String() && e.Code == 500
}

func ErrorSendCodeFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_SEND_CODE_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsSetPhoneFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_SET_PHONE_FAILED.String() && e.Code == 500
}

func ErrorSetPhoneFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_SET_PHONE_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsSetEmailFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_SET_EMAIL_FAILED.String() && e.Code == 500
}

func ErrorSetEmailFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_SET_EMAIL_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsSetProfileFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_SET_PROFILE_FAILED.String() && e.Code == 500
}

func ErrorSetProfileFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_SET_PROFILE_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsSetProfileUpdateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_SET_PROFILE_UPDATE_FAILED.String() && e.Code == 500
}

func ErrorSetProfileUpdateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_SET_PROFILE_UPDATE_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsSetUsernameFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_SET_USERNAME_FAILED.String() && e.Code == 500
}

func ErrorSetUsernameFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_SET_USERNAME_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsSetPasswordFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_SET_PASSWORD_FAILED.String() && e.Code == 500
}

func ErrorSetPasswordFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_SET_PASSWORD_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsSetFollowFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_SET_FOLLOW_FAILED.String() && e.Code == 500
}

func ErrorSetFollowFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_SET_FOLLOW_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsSetImageFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_SET_IMAGE_FAILED.String() && e.Code == 500
}

func ErrorSetImageFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_SET_IMAGE_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsSetAvatarIrregularFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_SET_AVATAR_IRREGULAR_FAILED.String() && e.Code == 500
}

func ErrorSetAvatarIrregularFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_SET_AVATAR_IRREGULAR_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsCancelFollowFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_CANCEL_FOLLOW_FAILED.String() && e.Code == 500
}

func ErrorCancelFollowFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_CANCEL_FOLLOW_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsLoginFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_LOGIN_FAILED.String() && e.Code == 500
}

func ErrorLoginFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_LOGIN_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsRegisterFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_REGISTER_FAILED.String() && e.Code == 500
}

func ErrorRegisterFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_REGISTER_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsResetPasswordFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_RESET_PASSWORD_FAILED.String() && e.Code == 500
}

func ErrorResetPasswordFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_RESET_PASSWORD_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsProfileReviewModifyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_PROFILE_REVIEW_MODIFY_FAILED.String() && e.Code == 500
}

func ErrorProfileReviewModifyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_PROFILE_REVIEW_MODIFY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsProfileUpdateModifyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_PROFILE_UPDATE_MODIFY_FAILED.String() && e.Code == 500
}

func ErrorProfileUpdateModifyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_PROFILE_UPDATE_MODIFY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUnbindPhoneFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_UNBIND_PHONE_FAILED.String() && e.Code == 500
}

func ErrorUnbindPhoneFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_UNBIND_PHONE_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUnbindEmailFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_UNBIND_EMAIL_FAILED.String() && e.Code == 500
}

func ErrorUnbindEmailFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_UNBIND_EMAIL_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUniqueAccount(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_UNIQUE_ACCOUNT.String() && e.Code == 500
}

func ErrorUniqueAccount(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_UNIQUE_ACCOUNT.String(), fmt.Sprintf(format, args...))
}
