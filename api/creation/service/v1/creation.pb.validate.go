// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: creation/service/v1/creation.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _creation_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetLeaderBoardReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLeaderBoardReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLeaderBoardReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLeaderBoardReplyMultiError, or nil if none found.
func (m *GetLeaderBoardReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLeaderBoardReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBoard() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetLeaderBoardReplyValidationError{
						field:  fmt.Sprintf("Board[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetLeaderBoardReplyValidationError{
						field:  fmt.Sprintf("Board[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetLeaderBoardReplyValidationError{
					field:  fmt.Sprintf("Board[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetLeaderBoardReplyMultiError(errors)
	}

	return nil
}

// GetLeaderBoardReplyMultiError is an error wrapping multiple validation
// errors returned by GetLeaderBoardReply.ValidateAll() if the designated
// constraints aren't met.
type GetLeaderBoardReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLeaderBoardReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLeaderBoardReplyMultiError) AllErrors() []error { return m }

// GetLeaderBoardReplyValidationError is the validation error returned by
// GetLeaderBoardReply.Validate if the designated constraints aren't met.
type GetLeaderBoardReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLeaderBoardReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLeaderBoardReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLeaderBoardReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLeaderBoardReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLeaderBoardReplyValidationError) ErrorName() string {
	return "GetLeaderBoardReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetLeaderBoardReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLeaderBoardReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLeaderBoardReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLeaderBoardReplyValidationError{}

// Validate checks the field values on GetCollectArticleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectArticleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectArticleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectArticleReqMultiError, or nil if none found.
func (m *GetCollectArticleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectArticleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Page

	if len(errors) > 0 {
		return GetCollectArticleReqMultiError(errors)
	}

	return nil
}

// GetCollectArticleReqMultiError is an error wrapping multiple validation
// errors returned by GetCollectArticleReq.ValidateAll() if the designated
// constraints aren't met.
type GetCollectArticleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectArticleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectArticleReqMultiError) AllErrors() []error { return m }

// GetCollectArticleReqValidationError is the validation error returned by
// GetCollectArticleReq.Validate if the designated constraints aren't met.
type GetCollectArticleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectArticleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectArticleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectArticleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectArticleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectArticleReqValidationError) ErrorName() string {
	return "GetCollectArticleReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectArticleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectArticleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectArticleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectArticleReqValidationError{}

// Validate checks the field values on GetCollectArticleCountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectArticleCountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectArticleCountReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectArticleCountReqMultiError, or nil if none found.
func (m *GetCollectArticleCountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectArticleCountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCollectArticleCountReqMultiError(errors)
	}

	return nil
}

// GetCollectArticleCountReqMultiError is an error wrapping multiple validation
// errors returned by GetCollectArticleCountReq.ValidateAll() if the
// designated constraints aren't met.
type GetCollectArticleCountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectArticleCountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectArticleCountReqMultiError) AllErrors() []error { return m }

// GetCollectArticleCountReqValidationError is the validation error returned by
// GetCollectArticleCountReq.Validate if the designated constraints aren't met.
type GetCollectArticleCountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectArticleCountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectArticleCountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectArticleCountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectArticleCountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectArticleCountReqValidationError) ErrorName() string {
	return "GetCollectArticleCountReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectArticleCountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectArticleCountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectArticleCountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectArticleCountReqValidationError{}

// Validate checks the field values on GetCollectArticleCountReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectArticleCountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectArticleCountReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectArticleCountReplyMultiError, or nil if none found.
func (m *GetCollectArticleCountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectArticleCountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return GetCollectArticleCountReplyMultiError(errors)
	}

	return nil
}

// GetCollectArticleCountReplyMultiError is an error wrapping multiple
// validation errors returned by GetCollectArticleCountReply.ValidateAll() if
// the designated constraints aren't met.
type GetCollectArticleCountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectArticleCountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectArticleCountReplyMultiError) AllErrors() []error { return m }

// GetCollectArticleCountReplyValidationError is the validation error returned
// by GetCollectArticleCountReply.Validate if the designated constraints
// aren't met.
type GetCollectArticleCountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectArticleCountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectArticleCountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectArticleCountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectArticleCountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectArticleCountReplyValidationError) ErrorName() string {
	return "GetCollectArticleCountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectArticleCountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectArticleCountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectArticleCountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectArticleCountReplyValidationError{}

// Validate checks the field values on GetCollectTalkReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCollectTalkReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectTalkReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectTalkReqMultiError, or nil if none found.
func (m *GetCollectTalkReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectTalkReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Page

	if len(errors) > 0 {
		return GetCollectTalkReqMultiError(errors)
	}

	return nil
}

// GetCollectTalkReqMultiError is an error wrapping multiple validation errors
// returned by GetCollectTalkReq.ValidateAll() if the designated constraints
// aren't met.
type GetCollectTalkReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectTalkReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectTalkReqMultiError) AllErrors() []error { return m }

// GetCollectTalkReqValidationError is the validation error returned by
// GetCollectTalkReq.Validate if the designated constraints aren't met.
type GetCollectTalkReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectTalkReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectTalkReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectTalkReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectTalkReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectTalkReqValidationError) ErrorName() string {
	return "GetCollectTalkReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectTalkReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectTalkReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectTalkReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectTalkReqValidationError{}

// Validate checks the field values on GetCollectTalkCountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectTalkCountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectTalkCountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectTalkCountReqMultiError, or nil if none found.
func (m *GetCollectTalkCountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectTalkCountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCollectTalkCountReqMultiError(errors)
	}

	return nil
}

// GetCollectTalkCountReqMultiError is an error wrapping multiple validation
// errors returned by GetCollectTalkCountReq.ValidateAll() if the designated
// constraints aren't met.
type GetCollectTalkCountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectTalkCountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectTalkCountReqMultiError) AllErrors() []error { return m }

// GetCollectTalkCountReqValidationError is the validation error returned by
// GetCollectTalkCountReq.Validate if the designated constraints aren't met.
type GetCollectTalkCountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectTalkCountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectTalkCountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectTalkCountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectTalkCountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectTalkCountReqValidationError) ErrorName() string {
	return "GetCollectTalkCountReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectTalkCountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectTalkCountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectTalkCountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectTalkCountReqValidationError{}

// Validate checks the field values on GetCollectTalkCountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectTalkCountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectTalkCountReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectTalkCountReplyMultiError, or nil if none found.
func (m *GetCollectTalkCountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectTalkCountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return GetCollectTalkCountReplyMultiError(errors)
	}

	return nil
}

// GetCollectTalkCountReplyMultiError is an error wrapping multiple validation
// errors returned by GetCollectTalkCountReply.ValidateAll() if the designated
// constraints aren't met.
type GetCollectTalkCountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectTalkCountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectTalkCountReplyMultiError) AllErrors() []error { return m }

// GetCollectTalkCountReplyValidationError is the validation error returned by
// GetCollectTalkCountReply.Validate if the designated constraints aren't met.
type GetCollectTalkCountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectTalkCountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectTalkCountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectTalkCountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectTalkCountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectTalkCountReplyValidationError) ErrorName() string {
	return "GetCollectTalkCountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectTalkCountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectTalkCountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectTalkCountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectTalkCountReplyValidationError{}

// Validate checks the field values on GetCollectColumnReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectColumnReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectColumnReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectColumnReqMultiError, or nil if none found.
func (m *GetCollectColumnReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectColumnReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Page

	if len(errors) > 0 {
		return GetCollectColumnReqMultiError(errors)
	}

	return nil
}

// GetCollectColumnReqMultiError is an error wrapping multiple validation
// errors returned by GetCollectColumnReq.ValidateAll() if the designated
// constraints aren't met.
type GetCollectColumnReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectColumnReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectColumnReqMultiError) AllErrors() []error { return m }

// GetCollectColumnReqValidationError is the validation error returned by
// GetCollectColumnReq.Validate if the designated constraints aren't met.
type GetCollectColumnReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectColumnReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectColumnReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectColumnReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectColumnReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectColumnReqValidationError) ErrorName() string {
	return "GetCollectColumnReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectColumnReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectColumnReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectColumnReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectColumnReqValidationError{}

// Validate checks the field values on GetCollectColumnCountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectColumnCountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectColumnCountReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectColumnCountReqMultiError, or nil if none found.
func (m *GetCollectColumnCountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectColumnCountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCollectColumnCountReqMultiError(errors)
	}

	return nil
}

// GetCollectColumnCountReqMultiError is an error wrapping multiple validation
// errors returned by GetCollectColumnCountReq.ValidateAll() if the designated
// constraints aren't met.
type GetCollectColumnCountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectColumnCountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectColumnCountReqMultiError) AllErrors() []error { return m }

// GetCollectColumnCountReqValidationError is the validation error returned by
// GetCollectColumnCountReq.Validate if the designated constraints aren't met.
type GetCollectColumnCountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectColumnCountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectColumnCountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectColumnCountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectColumnCountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectColumnCountReqValidationError) ErrorName() string {
	return "GetCollectColumnCountReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectColumnCountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectColumnCountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectColumnCountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectColumnCountReqValidationError{}

// Validate checks the field values on GetCollectColumnCountReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectColumnCountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectColumnCountReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectColumnCountReplyMultiError, or nil if none found.
func (m *GetCollectColumnCountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectColumnCountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return GetCollectColumnCountReplyMultiError(errors)
	}

	return nil
}

// GetCollectColumnCountReplyMultiError is an error wrapping multiple
// validation errors returned by GetCollectColumnCountReply.ValidateAll() if
// the designated constraints aren't met.
type GetCollectColumnCountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectColumnCountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectColumnCountReplyMultiError) AllErrors() []error { return m }

// GetCollectColumnCountReplyValidationError is the validation error returned
// by GetCollectColumnCountReply.Validate if the designated constraints aren't met.
type GetCollectColumnCountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectColumnCountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectColumnCountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectColumnCountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectColumnCountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectColumnCountReplyValidationError) ErrorName() string {
	return "GetCollectColumnCountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectColumnCountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectColumnCountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectColumnCountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectColumnCountReplyValidationError{}

// Validate checks the field values on GetCollectionReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectionReqMultiError, or nil if none found.
func (m *GetCollectionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = GetCollectionReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCollectionReqMultiError(errors)
	}

	return nil
}

func (m *GetCollectionReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetCollectionReqMultiError is an error wrapping multiple validation errors
// returned by GetCollectionReq.ValidateAll() if the designated constraints
// aren't met.
type GetCollectionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionReqMultiError) AllErrors() []error { return m }

// GetCollectionReqValidationError is the validation error returned by
// GetCollectionReq.Validate if the designated constraints aren't met.
type GetCollectionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionReqValidationError) ErrorName() string { return "GetCollectionReqValidationError" }

// Error satisfies the builtin error interface
func (e GetCollectionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionReqValidationError{}

// Validate checks the field values on GetCollectionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectionReplyMultiError, or nil if none found.
func (m *GetCollectionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Name

	// no validation rules for Introduce

	// no validation rules for Auth

	if len(errors) > 0 {
		return GetCollectionReplyMultiError(errors)
	}

	return nil
}

// GetCollectionReplyMultiError is an error wrapping multiple validation errors
// returned by GetCollectionReply.ValidateAll() if the designated constraints
// aren't met.
type GetCollectionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionReplyMultiError) AllErrors() []error { return m }

// GetCollectionReplyValidationError is the validation error returned by
// GetCollectionReply.Validate if the designated constraints aren't met.
type GetCollectionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionReplyValidationError) ErrorName() string {
	return "GetCollectionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionReplyValidationError{}

// Validate checks the field values on GetCollectionListInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionListInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionListInfoReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectionListInfoReqMultiError, or nil if none found.
func (m *GetCollectionListInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionListInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCollectionListInfoReqMultiError(errors)
	}

	return nil
}

// GetCollectionListInfoReqMultiError is an error wrapping multiple validation
// errors returned by GetCollectionListInfoReq.ValidateAll() if the designated
// constraints aren't met.
type GetCollectionListInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionListInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionListInfoReqMultiError) AllErrors() []error { return m }

// GetCollectionListInfoReqValidationError is the validation error returned by
// GetCollectionListInfoReq.Validate if the designated constraints aren't met.
type GetCollectionListInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionListInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionListInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionListInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionListInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionListInfoReqValidationError) ErrorName() string {
	return "GetCollectionListInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionListInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionListInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionListInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionListInfoReqValidationError{}

// Validate checks the field values on GetCollectionsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectionsReqMultiError, or nil if none found.
func (m *GetCollectionsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = GetCollectionsReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCollectionsReqMultiError(errors)
	}

	return nil
}

func (m *GetCollectionsReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetCollectionsReqMultiError is an error wrapping multiple validation errors
// returned by GetCollectionsReq.ValidateAll() if the designated constraints
// aren't met.
type GetCollectionsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionsReqMultiError) AllErrors() []error { return m }

// GetCollectionsReqValidationError is the validation error returned by
// GetCollectionsReq.Validate if the designated constraints aren't met.
type GetCollectionsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionsReqValidationError) ErrorName() string {
	return "GetCollectionsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionsReqValidationError{}

// Validate checks the field values on GetCollectionsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectionsReplyMultiError, or nil if none found.
func (m *GetCollectionsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCollections() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCollectionsReplyValidationError{
						field:  fmt.Sprintf("Collections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCollectionsReplyValidationError{
						field:  fmt.Sprintf("Collections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCollectionsReplyValidationError{
					field:  fmt.Sprintf("Collections[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCollectionsReplyMultiError(errors)
	}

	return nil
}

// GetCollectionsReplyMultiError is an error wrapping multiple validation
// errors returned by GetCollectionsReply.ValidateAll() if the designated
// constraints aren't met.
type GetCollectionsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionsReplyMultiError) AllErrors() []error { return m }

// GetCollectionsReplyValidationError is the validation error returned by
// GetCollectionsReply.Validate if the designated constraints aren't met.
type GetCollectionsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionsReplyValidationError) ErrorName() string {
	return "GetCollectionsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionsReplyValidationError{}

// Validate checks the field values on GetCollectionsCountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionsCountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionsCountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectionsCountReqMultiError, or nil if none found.
func (m *GetCollectionsCountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionsCountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = GetCollectionsCountReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCollectionsCountReqMultiError(errors)
	}

	return nil
}

func (m *GetCollectionsCountReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetCollectionsCountReqMultiError is an error wrapping multiple validation
// errors returned by GetCollectionsCountReq.ValidateAll() if the designated
// constraints aren't met.
type GetCollectionsCountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionsCountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionsCountReqMultiError) AllErrors() []error { return m }

// GetCollectionsCountReqValidationError is the validation error returned by
// GetCollectionsCountReq.Validate if the designated constraints aren't met.
type GetCollectionsCountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionsCountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionsCountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionsCountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionsCountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionsCountReqValidationError) ErrorName() string {
	return "GetCollectionsCountReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionsCountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionsCountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionsCountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionsCountReqValidationError{}

// Validate checks the field values on GetCollectionsCountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionsCountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionsCountReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectionsCountReplyMultiError, or nil if none found.
func (m *GetCollectionsCountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionsCountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return GetCollectionsCountReplyMultiError(errors)
	}

	return nil
}

// GetCollectionsCountReplyMultiError is an error wrapping multiple validation
// errors returned by GetCollectionsCountReply.ValidateAll() if the designated
// constraints aren't met.
type GetCollectionsCountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionsCountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionsCountReplyMultiError) AllErrors() []error { return m }

// GetCollectionsCountReplyValidationError is the validation error returned by
// GetCollectionsCountReply.Validate if the designated constraints aren't met.
type GetCollectionsCountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionsCountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionsCountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionsCountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionsCountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionsCountReplyValidationError) ErrorName() string {
	return "GetCollectionsCountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionsCountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionsCountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionsCountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionsCountReplyValidationError{}

// Validate checks the field values on GetCreationUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCreationUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCreationUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCreationUserReqMultiError, or nil if none found.
func (m *GetCreationUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCreationUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = GetCreationUserReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCreationUserReqMultiError(errors)
	}

	return nil
}

func (m *GetCreationUserReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetCreationUserReqMultiError is an error wrapping multiple validation errors
// returned by GetCreationUserReq.ValidateAll() if the designated constraints
// aren't met.
type GetCreationUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCreationUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCreationUserReqMultiError) AllErrors() []error { return m }

// GetCreationUserReqValidationError is the validation error returned by
// GetCreationUserReq.Validate if the designated constraints aren't met.
type GetCreationUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCreationUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCreationUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCreationUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCreationUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCreationUserReqValidationError) ErrorName() string {
	return "GetCreationUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCreationUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCreationUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCreationUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCreationUserReqValidationError{}

// Validate checks the field values on GetCreationUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCreationUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCreationUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCreationUserReplyMultiError, or nil if none found.
func (m *GetCreationUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCreationUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Article

	// no validation rules for Column

	// no validation rules for Talk

	// no validation rules for Collections

	// no validation rules for Collect

	// no validation rules for Subscribe

	if len(errors) > 0 {
		return GetCreationUserReplyMultiError(errors)
	}

	return nil
}

// GetCreationUserReplyMultiError is an error wrapping multiple validation
// errors returned by GetCreationUserReply.ValidateAll() if the designated
// constraints aren't met.
type GetCreationUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCreationUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCreationUserReplyMultiError) AllErrors() []error { return m }

// GetCreationUserReplyValidationError is the validation error returned by
// GetCreationUserReply.Validate if the designated constraints aren't met.
type GetCreationUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCreationUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCreationUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCreationUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCreationUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCreationUserReplyValidationError) ErrorName() string {
	return "GetCreationUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCreationUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCreationUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCreationUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCreationUserReplyValidationError{}

// Validate checks the field values on CreateCollectionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCollectionsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCollectionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCollectionsReqMultiError, or nil if none found.
func (m *CreateCollectionsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCollectionsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = CreateCollectionsReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 50 {
		err := CreateCollectionsReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetIntroduce()); l < 1 || l > 100 {
		err := CreateCollectionsReqValidationError{
			field:  "Introduce",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Auth

	if len(errors) > 0 {
		return CreateCollectionsReqMultiError(errors)
	}

	return nil
}

func (m *CreateCollectionsReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateCollectionsReqMultiError is an error wrapping multiple validation
// errors returned by CreateCollectionsReq.ValidateAll() if the designated
// constraints aren't met.
type CreateCollectionsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCollectionsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCollectionsReqMultiError) AllErrors() []error { return m }

// CreateCollectionsReqValidationError is the validation error returned by
// CreateCollectionsReq.Validate if the designated constraints aren't met.
type CreateCollectionsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCollectionsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCollectionsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCollectionsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCollectionsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCollectionsReqValidationError) ErrorName() string {
	return "CreateCollectionsReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCollectionsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCollectionsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCollectionsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCollectionsReqValidationError{}

// Validate checks the field values on EditCollectionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditCollectionsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditCollectionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditCollectionsReqMultiError, or nil if none found.
func (m *EditCollectionsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EditCollectionsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = EditCollectionsReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 50 {
		err := EditCollectionsReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetIntroduce()); l < 1 || l > 100 {
		err := EditCollectionsReqValidationError{
			field:  "Introduce",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Auth

	if len(errors) > 0 {
		return EditCollectionsReqMultiError(errors)
	}

	return nil
}

func (m *EditCollectionsReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// EditCollectionsReqMultiError is an error wrapping multiple validation errors
// returned by EditCollectionsReq.ValidateAll() if the designated constraints
// aren't met.
type EditCollectionsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditCollectionsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditCollectionsReqMultiError) AllErrors() []error { return m }

// EditCollectionsReqValidationError is the validation error returned by
// EditCollectionsReq.Validate if the designated constraints aren't met.
type EditCollectionsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditCollectionsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditCollectionsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditCollectionsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditCollectionsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditCollectionsReqValidationError) ErrorName() string {
	return "EditCollectionsReqValidationError"
}

// Error satisfies the builtin error interface
func (e EditCollectionsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditCollectionsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditCollectionsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditCollectionsReqValidationError{}

// Validate checks the field values on DeleteCollectionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCollectionsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCollectionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCollectionsReqMultiError, or nil if none found.
func (m *DeleteCollectionsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCollectionsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = DeleteCollectionsReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteCollectionsReqMultiError(errors)
	}

	return nil
}

func (m *DeleteCollectionsReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteCollectionsReqMultiError is an error wrapping multiple validation
// errors returned by DeleteCollectionsReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteCollectionsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCollectionsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCollectionsReqMultiError) AllErrors() []error { return m }

// DeleteCollectionsReqValidationError is the validation error returned by
// DeleteCollectionsReq.Validate if the designated constraints aren't met.
type DeleteCollectionsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCollectionsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCollectionsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCollectionsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCollectionsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCollectionsReqValidationError) ErrorName() string {
	return "DeleteCollectionsReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCollectionsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCollectionsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCollectionsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCollectionsReqValidationError{}

// Validate checks the field values on GetArticleListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleListReqMultiError, or nil if none found.
func (m *GetArticleListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if len(errors) > 0 {
		return GetArticleListReqMultiError(errors)
	}

	return nil
}

// GetArticleListReqMultiError is an error wrapping multiple validation errors
// returned by GetArticleListReq.ValidateAll() if the designated constraints
// aren't met.
type GetArticleListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListReqMultiError) AllErrors() []error { return m }

// GetArticleListReqValidationError is the validation error returned by
// GetArticleListReq.Validate if the designated constraints aren't met.
type GetArticleListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListReqValidationError) ErrorName() string {
	return "GetArticleListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListReqValidationError{}

// Validate checks the field values on GetArticleListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleListReplyMultiError, or nil if none found.
func (m *GetArticleListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetArticle() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetArticleListReplyValidationError{
						field:  fmt.Sprintf("Article[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetArticleListReplyValidationError{
						field:  fmt.Sprintf("Article[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetArticleListReplyValidationError{
					field:  fmt.Sprintf("Article[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetArticleListReplyMultiError(errors)
	}

	return nil
}

// GetArticleListReplyMultiError is an error wrapping multiple validation
// errors returned by GetArticleListReply.ValidateAll() if the designated
// constraints aren't met.
type GetArticleListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListReplyMultiError) AllErrors() []error { return m }

// GetArticleListReplyValidationError is the validation error returned by
// GetArticleListReply.Validate if the designated constraints aren't met.
type GetArticleListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListReplyValidationError) ErrorName() string {
	return "GetArticleListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListReplyValidationError{}

// Validate checks the field values on GetArticleListHotReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListHotReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListHotReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleListHotReqMultiError, or nil if none found.
func (m *GetArticleListHotReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListHotReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if len(errors) > 0 {
		return GetArticleListHotReqMultiError(errors)
	}

	return nil
}

// GetArticleListHotReqMultiError is an error wrapping multiple validation
// errors returned by GetArticleListHotReq.ValidateAll() if the designated
// constraints aren't met.
type GetArticleListHotReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListHotReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListHotReqMultiError) AllErrors() []error { return m }

// GetArticleListHotReqValidationError is the validation error returned by
// GetArticleListHotReq.Validate if the designated constraints aren't met.
type GetArticleListHotReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListHotReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListHotReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListHotReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListHotReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListHotReqValidationError) ErrorName() string {
	return "GetArticleListHotReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListHotReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListHotReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListHotReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListHotReqValidationError{}

// Validate checks the field values on GetArticleListHotReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListHotReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListHotReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleListHotReplyMultiError, or nil if none found.
func (m *GetArticleListHotReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListHotReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetArticle() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetArticleListHotReplyValidationError{
						field:  fmt.Sprintf("Article[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetArticleListHotReplyValidationError{
						field:  fmt.Sprintf("Article[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetArticleListHotReplyValidationError{
					field:  fmt.Sprintf("Article[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetArticleListHotReplyMultiError(errors)
	}

	return nil
}

// GetArticleListHotReplyMultiError is an error wrapping multiple validation
// errors returned by GetArticleListHotReply.ValidateAll() if the designated
// constraints aren't met.
type GetArticleListHotReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListHotReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListHotReplyMultiError) AllErrors() []error { return m }

// GetArticleListHotReplyValidationError is the validation error returned by
// GetArticleListHotReply.Validate if the designated constraints aren't met.
type GetArticleListHotReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListHotReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListHotReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListHotReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListHotReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListHotReplyValidationError) ErrorName() string {
	return "GetArticleListHotReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListHotReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListHotReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListHotReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListHotReplyValidationError{}

// Validate checks the field values on GetArticleCountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleCountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleCountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleCountReqMultiError, or nil if none found.
func (m *GetArticleCountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleCountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = GetArticleCountReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetArticleCountReqMultiError(errors)
	}

	return nil
}

func (m *GetArticleCountReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetArticleCountReqMultiError is an error wrapping multiple validation errors
// returned by GetArticleCountReq.ValidateAll() if the designated constraints
// aren't met.
type GetArticleCountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleCountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleCountReqMultiError) AllErrors() []error { return m }

// GetArticleCountReqValidationError is the validation error returned by
// GetArticleCountReq.Validate if the designated constraints aren't met.
type GetArticleCountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleCountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleCountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleCountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleCountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleCountReqValidationError) ErrorName() string {
	return "GetArticleCountReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleCountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleCountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleCountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleCountReqValidationError{}

// Validate checks the field values on GetArticleCountVisitorReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleCountVisitorReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleCountVisitorReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleCountVisitorReqMultiError, or nil if none found.
func (m *GetArticleCountVisitorReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleCountVisitorReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = GetArticleCountVisitorReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetArticleCountVisitorReqMultiError(errors)
	}

	return nil
}

func (m *GetArticleCountVisitorReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetArticleCountVisitorReqMultiError is an error wrapping multiple validation
// errors returned by GetArticleCountVisitorReq.ValidateAll() if the
// designated constraints aren't met.
type GetArticleCountVisitorReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleCountVisitorReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleCountVisitorReqMultiError) AllErrors() []error { return m }

// GetArticleCountVisitorReqValidationError is the validation error returned by
// GetArticleCountVisitorReq.Validate if the designated constraints aren't met.
type GetArticleCountVisitorReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleCountVisitorReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleCountVisitorReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleCountVisitorReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleCountVisitorReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleCountVisitorReqValidationError) ErrorName() string {
	return "GetArticleCountVisitorReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleCountVisitorReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleCountVisitorReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleCountVisitorReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleCountVisitorReqValidationError{}

// Validate checks the field values on GetArticleCountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleCountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleCountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleCountReplyMultiError, or nil if none found.
func (m *GetArticleCountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleCountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return GetArticleCountReplyMultiError(errors)
	}

	return nil
}

// GetArticleCountReplyMultiError is an error wrapping multiple validation
// errors returned by GetArticleCountReply.ValidateAll() if the designated
// constraints aren't met.
type GetArticleCountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleCountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleCountReplyMultiError) AllErrors() []error { return m }

// GetArticleCountReplyValidationError is the validation error returned by
// GetArticleCountReply.Validate if the designated constraints aren't met.
type GetArticleCountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleCountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleCountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleCountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleCountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleCountReplyValidationError) ErrorName() string {
	return "GetArticleCountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleCountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleCountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleCountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleCountReplyValidationError{}

// Validate checks the field values on GetUserArticleListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserArticleListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserArticleListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserArticleListReqMultiError, or nil if none found.
func (m *GetUserArticleListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserArticleListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetUserArticleListReqMultiError(errors)
	}

	return nil
}

// GetUserArticleListReqMultiError is an error wrapping multiple validation
// errors returned by GetUserArticleListReq.ValidateAll() if the designated
// constraints aren't met.
type GetUserArticleListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserArticleListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserArticleListReqMultiError) AllErrors() []error { return m }

// GetUserArticleListReqValidationError is the validation error returned by
// GetUserArticleListReq.Validate if the designated constraints aren't met.
type GetUserArticleListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserArticleListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserArticleListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserArticleListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserArticleListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserArticleListReqValidationError) ErrorName() string {
	return "GetUserArticleListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserArticleListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserArticleListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserArticleListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserArticleListReqValidationError{}

// Validate checks the field values on GetUserArticleListVisitorReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserArticleListVisitorReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserArticleListVisitorReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserArticleListVisitorReqMultiError, or nil if none found.
func (m *GetUserArticleListVisitorReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserArticleListVisitorReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetUserArticleListVisitorReqMultiError(errors)
	}

	return nil
}

// GetUserArticleListVisitorReqMultiError is an error wrapping multiple
// validation errors returned by GetUserArticleListVisitorReq.ValidateAll() if
// the designated constraints aren't met.
type GetUserArticleListVisitorReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserArticleListVisitorReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserArticleListVisitorReqMultiError) AllErrors() []error { return m }

// GetUserArticleListVisitorReqValidationError is the validation error returned
// by GetUserArticleListVisitorReq.Validate if the designated constraints
// aren't met.
type GetUserArticleListVisitorReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserArticleListVisitorReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserArticleListVisitorReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserArticleListVisitorReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserArticleListVisitorReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserArticleListVisitorReqValidationError) ErrorName() string {
	return "GetUserArticleListVisitorReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserArticleListVisitorReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserArticleListVisitorReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserArticleListVisitorReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserArticleListVisitorReqValidationError{}

// Validate checks the field values on GetArticleStatisticReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleStatisticReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleStatisticReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleStatisticReqMultiError, or nil if none found.
func (m *GetArticleStatisticReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleStatisticReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetArticleStatisticReqMultiError(errors)
	}

	return nil
}

// GetArticleStatisticReqMultiError is an error wrapping multiple validation
// errors returned by GetArticleStatisticReq.ValidateAll() if the designated
// constraints aren't met.
type GetArticleStatisticReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleStatisticReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleStatisticReqMultiError) AllErrors() []error { return m }

// GetArticleStatisticReqValidationError is the validation error returned by
// GetArticleStatisticReq.Validate if the designated constraints aren't met.
type GetArticleStatisticReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleStatisticReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleStatisticReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleStatisticReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleStatisticReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleStatisticReqValidationError) ErrorName() string {
	return "GetArticleStatisticReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleStatisticReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleStatisticReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleStatisticReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleStatisticReqValidationError{}

// Validate checks the field values on GetArticleStatisticReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleStatisticReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleStatisticReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleStatisticReplyMultiError, or nil if none found.
func (m *GetArticleStatisticReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleStatisticReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Agree

	// no validation rules for Collect

	// no validation rules for View

	// no validation rules for Comment

	if len(errors) > 0 {
		return GetArticleStatisticReplyMultiError(errors)
	}

	return nil
}

// GetArticleStatisticReplyMultiError is an error wrapping multiple validation
// errors returned by GetArticleStatisticReply.ValidateAll() if the designated
// constraints aren't met.
type GetArticleStatisticReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleStatisticReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleStatisticReplyMultiError) AllErrors() []error { return m }

// GetArticleStatisticReplyValidationError is the validation error returned by
// GetArticleStatisticReply.Validate if the designated constraints aren't met.
type GetArticleStatisticReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleStatisticReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleStatisticReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleStatisticReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleStatisticReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleStatisticReplyValidationError) ErrorName() string {
	return "GetArticleStatisticReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleStatisticReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleStatisticReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleStatisticReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleStatisticReplyValidationError{}

// Validate checks the field values on GetArticleListStatisticReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListStatisticReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListStatisticReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleListStatisticReqMultiError, or nil if none found.
func (m *GetArticleListStatisticReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListStatisticReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetArticleListStatisticReqMultiError(errors)
	}

	return nil
}

// GetArticleListStatisticReqMultiError is an error wrapping multiple
// validation errors returned by GetArticleListStatisticReq.ValidateAll() if
// the designated constraints aren't met.
type GetArticleListStatisticReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListStatisticReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListStatisticReqMultiError) AllErrors() []error { return m }

// GetArticleListStatisticReqValidationError is the validation error returned
// by GetArticleListStatisticReq.Validate if the designated constraints aren't met.
type GetArticleListStatisticReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListStatisticReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListStatisticReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListStatisticReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListStatisticReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListStatisticReqValidationError) ErrorName() string {
	return "GetArticleListStatisticReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListStatisticReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListStatisticReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListStatisticReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListStatisticReqValidationError{}

// Validate checks the field values on GetArticleListStatisticReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListStatisticReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListStatisticReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleListStatisticReplyMultiError, or nil if none found.
func (m *GetArticleListStatisticReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListStatisticReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCount() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetArticleListStatisticReplyValidationError{
						field:  fmt.Sprintf("Count[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetArticleListStatisticReplyValidationError{
						field:  fmt.Sprintf("Count[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetArticleListStatisticReplyValidationError{
					field:  fmt.Sprintf("Count[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetArticleListStatisticReplyMultiError(errors)
	}

	return nil
}

// GetArticleListStatisticReplyMultiError is an error wrapping multiple
// validation errors returned by GetArticleListStatisticReply.ValidateAll() if
// the designated constraints aren't met.
type GetArticleListStatisticReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListStatisticReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListStatisticReplyMultiError) AllErrors() []error { return m }

// GetArticleListStatisticReplyValidationError is the validation error returned
// by GetArticleListStatisticReply.Validate if the designated constraints
// aren't met.
type GetArticleListStatisticReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListStatisticReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListStatisticReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListStatisticReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListStatisticReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListStatisticReplyValidationError) ErrorName() string {
	return "GetArticleListStatisticReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListStatisticReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListStatisticReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListStatisticReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListStatisticReplyValidationError{}

// Validate checks the field values on GetLastArticleDraftReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLastArticleDraftReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLastArticleDraftReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLastArticleDraftReqMultiError, or nil if none found.
func (m *GetLastArticleDraftReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLastArticleDraftReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = GetLastArticleDraftReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetLastArticleDraftReqMultiError(errors)
	}

	return nil
}

func (m *GetLastArticleDraftReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetLastArticleDraftReqMultiError is an error wrapping multiple validation
// errors returned by GetLastArticleDraftReq.ValidateAll() if the designated
// constraints aren't met.
type GetLastArticleDraftReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLastArticleDraftReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLastArticleDraftReqMultiError) AllErrors() []error { return m }

// GetLastArticleDraftReqValidationError is the validation error returned by
// GetLastArticleDraftReq.Validate if the designated constraints aren't met.
type GetLastArticleDraftReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLastArticleDraftReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLastArticleDraftReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLastArticleDraftReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLastArticleDraftReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLastArticleDraftReqValidationError) ErrorName() string {
	return "GetLastArticleDraftReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetLastArticleDraftReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLastArticleDraftReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLastArticleDraftReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLastArticleDraftReqValidationError{}

// Validate checks the field values on GetLastArticleDraftReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLastArticleDraftReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLastArticleDraftReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLastArticleDraftReplyMultiError, or nil if none found.
func (m *GetLastArticleDraftReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLastArticleDraftReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	if len(errors) > 0 {
		return GetLastArticleDraftReplyMultiError(errors)
	}

	return nil
}

// GetLastArticleDraftReplyMultiError is an error wrapping multiple validation
// errors returned by GetLastArticleDraftReply.ValidateAll() if the designated
// constraints aren't met.
type GetLastArticleDraftReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLastArticleDraftReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLastArticleDraftReplyMultiError) AllErrors() []error { return m }

// GetLastArticleDraftReplyValidationError is the validation error returned by
// GetLastArticleDraftReply.Validate if the designated constraints aren't met.
type GetLastArticleDraftReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLastArticleDraftReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLastArticleDraftReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLastArticleDraftReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLastArticleDraftReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLastArticleDraftReplyValidationError) ErrorName() string {
	return "GetLastArticleDraftReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetLastArticleDraftReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLastArticleDraftReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLastArticleDraftReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLastArticleDraftReplyValidationError{}

// Validate checks the field values on GetArticleSearchReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleSearchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleSearchReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleSearchReqMultiError, or nil if none found.
func (m *GetArticleSearchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleSearchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if l := utf8.RuneCountInString(m.GetSearch()); l < 0 || l > 200 {
		err := GetArticleSearchReqValidationError{
			field:  "Search",
			reason: "value length must be between 0 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTime()); l < 0 || l > 10 {
		err := GetArticleSearchReqValidationError{
			field:  "Time",
			reason: "value length must be between 0 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetArticleSearchReqMultiError(errors)
	}

	return nil
}

// GetArticleSearchReqMultiError is an error wrapping multiple validation
// errors returned by GetArticleSearchReq.ValidateAll() if the designated
// constraints aren't met.
type GetArticleSearchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleSearchReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleSearchReqMultiError) AllErrors() []error { return m }

// GetArticleSearchReqValidationError is the validation error returned by
// GetArticleSearchReq.Validate if the designated constraints aren't met.
type GetArticleSearchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleSearchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleSearchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleSearchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleSearchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleSearchReqValidationError) ErrorName() string {
	return "GetArticleSearchReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleSearchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleSearchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleSearchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleSearchReqValidationError{}

// Validate checks the field values on GetArticleSearchReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleSearchReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleSearchReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleSearchReplyMultiError, or nil if none found.
func (m *GetArticleSearchReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleSearchReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetArticleSearchReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetArticleSearchReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetArticleSearchReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetArticleSearchReplyMultiError(errors)
	}

	return nil
}

// GetArticleSearchReplyMultiError is an error wrapping multiple validation
// errors returned by GetArticleSearchReply.ValidateAll() if the designated
// constraints aren't met.
type GetArticleSearchReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleSearchReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleSearchReplyMultiError) AllErrors() []error { return m }

// GetArticleSearchReplyValidationError is the validation error returned by
// GetArticleSearchReply.Validate if the designated constraints aren't met.
type GetArticleSearchReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleSearchReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleSearchReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleSearchReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleSearchReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleSearchReplyValidationError) ErrorName() string {
	return "GetArticleSearchReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleSearchReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleSearchReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleSearchReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleSearchReplyValidationError{}

// Validate checks the field values on CreateArticleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateArticleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateArticleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateArticleReqMultiError, or nil if none found.
func (m *CreateArticleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateArticleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Auth

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = CreateArticleReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateArticleReqMultiError(errors)
	}

	return nil
}

func (m *CreateArticleReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateArticleReqMultiError is an error wrapping multiple validation errors
// returned by CreateArticleReq.ValidateAll() if the designated constraints
// aren't met.
type CreateArticleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateArticleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateArticleReqMultiError) AllErrors() []error { return m }

// CreateArticleReqValidationError is the validation error returned by
// CreateArticleReq.Validate if the designated constraints aren't met.
type CreateArticleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateArticleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateArticleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateArticleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateArticleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateArticleReqValidationError) ErrorName() string { return "CreateArticleReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateArticleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateArticleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateArticleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateArticleReqValidationError{}

// Validate checks the field values on EditArticleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EditArticleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditArticleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EditArticleReqMultiError,
// or nil if none found.
func (m *EditArticleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EditArticleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Auth

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = EditArticleReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EditArticleReqMultiError(errors)
	}

	return nil
}

func (m *EditArticleReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// EditArticleReqMultiError is an error wrapping multiple validation errors
// returned by EditArticleReq.ValidateAll() if the designated constraints
// aren't met.
type EditArticleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditArticleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditArticleReqMultiError) AllErrors() []error { return m }

// EditArticleReqValidationError is the validation error returned by
// EditArticleReq.Validate if the designated constraints aren't met.
type EditArticleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditArticleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditArticleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditArticleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditArticleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditArticleReqValidationError) ErrorName() string { return "EditArticleReqValidationError" }

// Error satisfies the builtin error interface
func (e EditArticleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditArticleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditArticleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditArticleReqValidationError{}

// Validate checks the field values on CreateArticleDbCacheAndSearchReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateArticleDbCacheAndSearchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateArticleDbCacheAndSearchReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateArticleDbCacheAndSearchReqMultiError, or nil if none found.
func (m *CreateArticleDbCacheAndSearchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateArticleDbCacheAndSearchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Auth

	// no validation rules for Uuid

	if len(errors) > 0 {
		return CreateArticleDbCacheAndSearchReqMultiError(errors)
	}

	return nil
}

// CreateArticleDbCacheAndSearchReqMultiError is an error wrapping multiple
// validation errors returned by
// CreateArticleDbCacheAndSearchReq.ValidateAll() if the designated
// constraints aren't met.
type CreateArticleDbCacheAndSearchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateArticleDbCacheAndSearchReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateArticleDbCacheAndSearchReqMultiError) AllErrors() []error { return m }

// CreateArticleDbCacheAndSearchReqValidationError is the validation error
// returned by CreateArticleDbCacheAndSearchReq.Validate if the designated
// constraints aren't met.
type CreateArticleDbCacheAndSearchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateArticleDbCacheAndSearchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateArticleDbCacheAndSearchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateArticleDbCacheAndSearchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateArticleDbCacheAndSearchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateArticleDbCacheAndSearchReqValidationError) ErrorName() string {
	return "CreateArticleDbCacheAndSearchReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateArticleDbCacheAndSearchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateArticleDbCacheAndSearchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateArticleDbCacheAndSearchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateArticleDbCacheAndSearchReqValidationError{}

// Validate checks the field values on EditArticleCosAndSearchReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditArticleCosAndSearchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditArticleCosAndSearchReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditArticleCosAndSearchReqMultiError, or nil if none found.
func (m *EditArticleCosAndSearchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EditArticleCosAndSearchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Auth

	// no validation rules for Uuid

	if len(errors) > 0 {
		return EditArticleCosAndSearchReqMultiError(errors)
	}

	return nil
}

// EditArticleCosAndSearchReqMultiError is an error wrapping multiple
// validation errors returned by EditArticleCosAndSearchReq.ValidateAll() if
// the designated constraints aren't met.
type EditArticleCosAndSearchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditArticleCosAndSearchReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditArticleCosAndSearchReqMultiError) AllErrors() []error { return m }

// EditArticleCosAndSearchReqValidationError is the validation error returned
// by EditArticleCosAndSearchReq.Validate if the designated constraints aren't met.
type EditArticleCosAndSearchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditArticleCosAndSearchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditArticleCosAndSearchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditArticleCosAndSearchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditArticleCosAndSearchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditArticleCosAndSearchReqValidationError) ErrorName() string {
	return "EditArticleCosAndSearchReqValidationError"
}

// Error satisfies the builtin error interface
func (e EditArticleCosAndSearchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditArticleCosAndSearchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditArticleCosAndSearchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditArticleCosAndSearchReqValidationError{}

// Validate checks the field values on DeleteArticleCacheAndSearchReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteArticleCacheAndSearchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteArticleCacheAndSearchReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteArticleCacheAndSearchReqMultiError, or nil if none found.
func (m *DeleteArticleCacheAndSearchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteArticleCacheAndSearchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return DeleteArticleCacheAndSearchReqMultiError(errors)
	}

	return nil
}

// DeleteArticleCacheAndSearchReqMultiError is an error wrapping multiple
// validation errors returned by DeleteArticleCacheAndSearchReq.ValidateAll()
// if the designated constraints aren't met.
type DeleteArticleCacheAndSearchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteArticleCacheAndSearchReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteArticleCacheAndSearchReqMultiError) AllErrors() []error { return m }

// DeleteArticleCacheAndSearchReqValidationError is the validation error
// returned by DeleteArticleCacheAndSearchReq.Validate if the designated
// constraints aren't met.
type DeleteArticleCacheAndSearchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteArticleCacheAndSearchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteArticleCacheAndSearchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteArticleCacheAndSearchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteArticleCacheAndSearchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteArticleCacheAndSearchReqValidationError) ErrorName() string {
	return "DeleteArticleCacheAndSearchReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteArticleCacheAndSearchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteArticleCacheAndSearchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteArticleCacheAndSearchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteArticleCacheAndSearchReqValidationError{}

// Validate checks the field values on SetArticleViewDbAndCacheReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetArticleViewDbAndCacheReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetArticleViewDbAndCacheReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetArticleViewDbAndCacheReqMultiError, or nil if none found.
func (m *SetArticleViewDbAndCacheReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetArticleViewDbAndCacheReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return SetArticleViewDbAndCacheReqMultiError(errors)
	}

	return nil
}

// SetArticleViewDbAndCacheReqMultiError is an error wrapping multiple
// validation errors returned by SetArticleViewDbAndCacheReq.ValidateAll() if
// the designated constraints aren't met.
type SetArticleViewDbAndCacheReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetArticleViewDbAndCacheReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetArticleViewDbAndCacheReqMultiError) AllErrors() []error { return m }

// SetArticleViewDbAndCacheReqValidationError is the validation error returned
// by SetArticleViewDbAndCacheReq.Validate if the designated constraints
// aren't met.
type SetArticleViewDbAndCacheReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetArticleViewDbAndCacheReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetArticleViewDbAndCacheReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetArticleViewDbAndCacheReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetArticleViewDbAndCacheReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetArticleViewDbAndCacheReqValidationError) ErrorName() string {
	return "SetArticleViewDbAndCacheReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetArticleViewDbAndCacheReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetArticleViewDbAndCacheReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetArticleViewDbAndCacheReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetArticleViewDbAndCacheReqValidationError{}

// Validate checks the field values on SetArticleAgreeDbAndCacheReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetArticleAgreeDbAndCacheReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetArticleAgreeDbAndCacheReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetArticleAgreeDbAndCacheReqMultiError, or nil if none found.
func (m *SetArticleAgreeDbAndCacheReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetArticleAgreeDbAndCacheReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	// no validation rules for UserUuid

	if len(errors) > 0 {
		return SetArticleAgreeDbAndCacheReqMultiError(errors)
	}

	return nil
}

// SetArticleAgreeDbAndCacheReqMultiError is an error wrapping multiple
// validation errors returned by SetArticleAgreeDbAndCacheReq.ValidateAll() if
// the designated constraints aren't met.
type SetArticleAgreeDbAndCacheReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetArticleAgreeDbAndCacheReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetArticleAgreeDbAndCacheReqMultiError) AllErrors() []error { return m }

// SetArticleAgreeDbAndCacheReqValidationError is the validation error returned
// by SetArticleAgreeDbAndCacheReq.Validate if the designated constraints
// aren't met.
type SetArticleAgreeDbAndCacheReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetArticleAgreeDbAndCacheReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetArticleAgreeDbAndCacheReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetArticleAgreeDbAndCacheReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetArticleAgreeDbAndCacheReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetArticleAgreeDbAndCacheReqValidationError) ErrorName() string {
	return "SetArticleAgreeDbAndCacheReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetArticleAgreeDbAndCacheReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetArticleAgreeDbAndCacheReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetArticleAgreeDbAndCacheReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetArticleAgreeDbAndCacheReqValidationError{}

// Validate checks the field values on CreateArticleDraftReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateArticleDraftReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateArticleDraftReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateArticleDraftReqMultiError, or nil if none found.
func (m *CreateArticleDraftReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateArticleDraftReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = CreateArticleDraftReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateArticleDraftReqMultiError(errors)
	}

	return nil
}

func (m *CreateArticleDraftReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateArticleDraftReqMultiError is an error wrapping multiple validation
// errors returned by CreateArticleDraftReq.ValidateAll() if the designated
// constraints aren't met.
type CreateArticleDraftReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateArticleDraftReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateArticleDraftReqMultiError) AllErrors() []error { return m }

// CreateArticleDraftReqValidationError is the validation error returned by
// CreateArticleDraftReq.Validate if the designated constraints aren't met.
type CreateArticleDraftReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateArticleDraftReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateArticleDraftReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateArticleDraftReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateArticleDraftReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateArticleDraftReqValidationError) ErrorName() string {
	return "CreateArticleDraftReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateArticleDraftReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateArticleDraftReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateArticleDraftReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateArticleDraftReqValidationError{}

// Validate checks the field values on CreateArticleDraftReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateArticleDraftReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateArticleDraftReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateArticleDraftReplyMultiError, or nil if none found.
func (m *CreateArticleDraftReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateArticleDraftReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateArticleDraftReplyMultiError(errors)
	}

	return nil
}

// CreateArticleDraftReplyMultiError is an error wrapping multiple validation
// errors returned by CreateArticleDraftReply.ValidateAll() if the designated
// constraints aren't met.
type CreateArticleDraftReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateArticleDraftReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateArticleDraftReplyMultiError) AllErrors() []error { return m }

// CreateArticleDraftReplyValidationError is the validation error returned by
// CreateArticleDraftReply.Validate if the designated constraints aren't met.
type CreateArticleDraftReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateArticleDraftReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateArticleDraftReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateArticleDraftReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateArticleDraftReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateArticleDraftReplyValidationError) ErrorName() string {
	return "CreateArticleDraftReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateArticleDraftReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateArticleDraftReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateArticleDraftReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateArticleDraftReplyValidationError{}

// Validate checks the field values on ArticleDraftMarkReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleDraftMarkReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleDraftMarkReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleDraftMarkReqMultiError, or nil if none found.
func (m *ArticleDraftMarkReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleDraftMarkReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = ArticleDraftMarkReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ArticleDraftMarkReqMultiError(errors)
	}

	return nil
}

func (m *ArticleDraftMarkReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ArticleDraftMarkReqMultiError is an error wrapping multiple validation
// errors returned by ArticleDraftMarkReq.ValidateAll() if the designated
// constraints aren't met.
type ArticleDraftMarkReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleDraftMarkReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleDraftMarkReqMultiError) AllErrors() []error { return m }

// ArticleDraftMarkReqValidationError is the validation error returned by
// ArticleDraftMarkReq.Validate if the designated constraints aren't met.
type ArticleDraftMarkReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleDraftMarkReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleDraftMarkReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleDraftMarkReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleDraftMarkReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleDraftMarkReqValidationError) ErrorName() string {
	return "ArticleDraftMarkReqValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleDraftMarkReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleDraftMarkReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleDraftMarkReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleDraftMarkReqValidationError{}

// Validate checks the field values on GetArticleDraftListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleDraftListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleDraftListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleDraftListReqMultiError, or nil if none found.
func (m *GetArticleDraftListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleDraftListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = GetArticleDraftListReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetArticleDraftListReqMultiError(errors)
	}

	return nil
}

func (m *GetArticleDraftListReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetArticleDraftListReqMultiError is an error wrapping multiple validation
// errors returned by GetArticleDraftListReq.ValidateAll() if the designated
// constraints aren't met.
type GetArticleDraftListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleDraftListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleDraftListReqMultiError) AllErrors() []error { return m }

// GetArticleDraftListReqValidationError is the validation error returned by
// GetArticleDraftListReq.Validate if the designated constraints aren't met.
type GetArticleDraftListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleDraftListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleDraftListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleDraftListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleDraftListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleDraftListReqValidationError) ErrorName() string {
	return "GetArticleDraftListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleDraftListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleDraftListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleDraftListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleDraftListReqValidationError{}

// Validate checks the field values on GetArticleDraftListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleDraftListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleDraftListReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleDraftListReplyMultiError, or nil if none found.
func (m *GetArticleDraftListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleDraftListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDraft() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetArticleDraftListReplyValidationError{
						field:  fmt.Sprintf("Draft[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetArticleDraftListReplyValidationError{
						field:  fmt.Sprintf("Draft[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetArticleDraftListReplyValidationError{
					field:  fmt.Sprintf("Draft[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetArticleDraftListReplyMultiError(errors)
	}

	return nil
}

// GetArticleDraftListReplyMultiError is an error wrapping multiple validation
// errors returned by GetArticleDraftListReply.ValidateAll() if the designated
// constraints aren't met.
type GetArticleDraftListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleDraftListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleDraftListReplyMultiError) AllErrors() []error { return m }

// GetArticleDraftListReplyValidationError is the validation error returned by
// GetArticleDraftListReply.Validate if the designated constraints aren't met.
type GetArticleDraftListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleDraftListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleDraftListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleDraftListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleDraftListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleDraftListReplyValidationError) ErrorName() string {
	return "GetArticleDraftListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleDraftListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleDraftListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleDraftListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleDraftListReplyValidationError{}

// Validate checks the field values on SendArticleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendArticleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendArticleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendArticleReqMultiError,
// or nil if none found.
func (m *SendArticleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendArticleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = SendArticleReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if ip := net.ParseIP(m.GetIp()); ip == nil {
		err := SendArticleReqValidationError{
			field:  "Ip",
			reason: "value must be a valid IP address",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendArticleReqMultiError(errors)
	}

	return nil
}

func (m *SendArticleReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SendArticleReqMultiError is an error wrapping multiple validation errors
// returned by SendArticleReq.ValidateAll() if the designated constraints
// aren't met.
type SendArticleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendArticleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendArticleReqMultiError) AllErrors() []error { return m }

// SendArticleReqValidationError is the validation error returned by
// SendArticleReq.Validate if the designated constraints aren't met.
type SendArticleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendArticleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendArticleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendArticleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendArticleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendArticleReqValidationError) ErrorName() string { return "SendArticleReqValidationError" }

// Error satisfies the builtin error interface
func (e SendArticleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendArticleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendArticleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendArticleReqValidationError{}

// Validate checks the field values on SendArticleEditReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendArticleEditReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendArticleEditReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendArticleEditReqMultiError, or nil if none found.
func (m *SendArticleEditReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendArticleEditReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = SendArticleEditReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if ip := net.ParseIP(m.GetIp()); ip == nil {
		err := SendArticleEditReqValidationError{
			field:  "Ip",
			reason: "value must be a valid IP address",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendArticleEditReqMultiError(errors)
	}

	return nil
}

func (m *SendArticleEditReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SendArticleEditReqMultiError is an error wrapping multiple validation errors
// returned by SendArticleEditReq.ValidateAll() if the designated constraints
// aren't met.
type SendArticleEditReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendArticleEditReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendArticleEditReqMultiError) AllErrors() []error { return m }

// SendArticleEditReqValidationError is the validation error returned by
// SendArticleEditReq.Validate if the designated constraints aren't met.
type SendArticleEditReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendArticleEditReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendArticleEditReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendArticleEditReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendArticleEditReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendArticleEditReqValidationError) ErrorName() string {
	return "SendArticleEditReqValidationError"
}

// Error satisfies the builtin error interface
func (e SendArticleEditReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendArticleEditReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendArticleEditReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendArticleEditReqValidationError{}

// Validate checks the field values on DeleteArticleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteArticleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteArticleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteArticleReqMultiError, or nil if none found.
func (m *DeleteArticleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteArticleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = DeleteArticleReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteArticleReqMultiError(errors)
	}

	return nil
}

func (m *DeleteArticleReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteArticleReqMultiError is an error wrapping multiple validation errors
// returned by DeleteArticleReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteArticleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteArticleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteArticleReqMultiError) AllErrors() []error { return m }

// DeleteArticleReqValidationError is the validation error returned by
// DeleteArticleReq.Validate if the designated constraints aren't met.
type DeleteArticleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteArticleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteArticleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteArticleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteArticleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteArticleReqValidationError) ErrorName() string { return "DeleteArticleReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteArticleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteArticleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteArticleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteArticleReqValidationError{}

// Validate checks the field values on SetArticleAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetArticleAgreeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetArticleAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetArticleAgreeReqMultiError, or nil if none found.
func (m *SetArticleAgreeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetArticleAgreeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = SetArticleAgreeReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserUuid()); err != nil {
		err = SetArticleAgreeReqValidationError{
			field:  "UserUuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetArticleAgreeReqMultiError(errors)
	}

	return nil
}

func (m *SetArticleAgreeReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SetArticleAgreeReqMultiError is an error wrapping multiple validation errors
// returned by SetArticleAgreeReq.ValidateAll() if the designated constraints
// aren't met.
type SetArticleAgreeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetArticleAgreeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetArticleAgreeReqMultiError) AllErrors() []error { return m }

// SetArticleAgreeReqValidationError is the validation error returned by
// SetArticleAgreeReq.Validate if the designated constraints aren't met.
type SetArticleAgreeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetArticleAgreeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetArticleAgreeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetArticleAgreeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetArticleAgreeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetArticleAgreeReqValidationError) ErrorName() string {
	return "SetArticleAgreeReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetArticleAgreeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetArticleAgreeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetArticleAgreeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetArticleAgreeReqValidationError{}

// Validate checks the field values on SetArticleViewReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetArticleViewReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetArticleViewReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetArticleViewReqMultiError, or nil if none found.
func (m *SetArticleViewReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetArticleViewReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = SetArticleViewReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetArticleViewReqMultiError(errors)
	}

	return nil
}

func (m *SetArticleViewReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SetArticleViewReqMultiError is an error wrapping multiple validation errors
// returned by SetArticleViewReq.ValidateAll() if the designated constraints
// aren't met.
type SetArticleViewReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetArticleViewReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetArticleViewReqMultiError) AllErrors() []error { return m }

// SetArticleViewReqValidationError is the validation error returned by
// SetArticleViewReq.Validate if the designated constraints aren't met.
type SetArticleViewReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetArticleViewReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetArticleViewReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetArticleViewReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetArticleViewReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetArticleViewReqValidationError) ErrorName() string {
	return "SetArticleViewReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetArticleViewReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetArticleViewReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetArticleViewReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetArticleViewReqValidationError{}

// Validate checks the field values on SetArticleCollectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetArticleCollectReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetArticleCollectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetArticleCollectReqMultiError, or nil if none found.
func (m *SetArticleCollectReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetArticleCollectReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CollectionsId

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = SetArticleCollectReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserUuid()); err != nil {
		err = SetArticleCollectReqValidationError{
			field:  "UserUuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetArticleCollectReqMultiError(errors)
	}

	return nil
}

func (m *SetArticleCollectReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SetArticleCollectReqMultiError is an error wrapping multiple validation
// errors returned by SetArticleCollectReq.ValidateAll() if the designated
// constraints aren't met.
type SetArticleCollectReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetArticleCollectReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetArticleCollectReqMultiError) AllErrors() []error { return m }

// SetArticleCollectReqValidationError is the validation error returned by
// SetArticleCollectReq.Validate if the designated constraints aren't met.
type SetArticleCollectReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetArticleCollectReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetArticleCollectReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetArticleCollectReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetArticleCollectReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetArticleCollectReqValidationError) ErrorName() string {
	return "SetArticleCollectReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetArticleCollectReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetArticleCollectReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetArticleCollectReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetArticleCollectReqValidationError{}

// Validate checks the field values on CancelArticleAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelArticleAgreeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelArticleAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelArticleAgreeReqMultiError, or nil if none found.
func (m *CancelArticleAgreeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelArticleAgreeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = CancelArticleAgreeReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserUuid()); err != nil {
		err = CancelArticleAgreeReqValidationError{
			field:  "UserUuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelArticleAgreeReqMultiError(errors)
	}

	return nil
}

func (m *CancelArticleAgreeReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CancelArticleAgreeReqMultiError is an error wrapping multiple validation
// errors returned by CancelArticleAgreeReq.ValidateAll() if the designated
// constraints aren't met.
type CancelArticleAgreeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelArticleAgreeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelArticleAgreeReqMultiError) AllErrors() []error { return m }

// CancelArticleAgreeReqValidationError is the validation error returned by
// CancelArticleAgreeReq.Validate if the designated constraints aren't met.
type CancelArticleAgreeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelArticleAgreeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelArticleAgreeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelArticleAgreeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelArticleAgreeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelArticleAgreeReqValidationError) ErrorName() string {
	return "CancelArticleAgreeReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelArticleAgreeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelArticleAgreeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelArticleAgreeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelArticleAgreeReqValidationError{}

// Validate checks the field values on CancelArticleCollectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelArticleCollectReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelArticleCollectReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelArticleCollectReqMultiError, or nil if none found.
func (m *CancelArticleCollectReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelArticleCollectReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = CancelArticleCollectReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserUuid()); err != nil {
		err = CancelArticleCollectReqValidationError{
			field:  "UserUuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelArticleCollectReqMultiError(errors)
	}

	return nil
}

func (m *CancelArticleCollectReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CancelArticleCollectReqMultiError is an error wrapping multiple validation
// errors returned by CancelArticleCollectReq.ValidateAll() if the designated
// constraints aren't met.
type CancelArticleCollectReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelArticleCollectReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelArticleCollectReqMultiError) AllErrors() []error { return m }

// CancelArticleCollectReqValidationError is the validation error returned by
// CancelArticleCollectReq.Validate if the designated constraints aren't met.
type CancelArticleCollectReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelArticleCollectReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelArticleCollectReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelArticleCollectReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelArticleCollectReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelArticleCollectReqValidationError) ErrorName() string {
	return "CancelArticleCollectReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelArticleCollectReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelArticleCollectReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelArticleCollectReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelArticleCollectReqValidationError{}

// Validate checks the field values on ArticleStatisticJudgeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleStatisticJudgeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleStatisticJudgeReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleStatisticJudgeReqMultiError, or nil if none found.
func (m *ArticleStatisticJudgeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleStatisticJudgeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = ArticleStatisticJudgeReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ArticleStatisticJudgeReqMultiError(errors)
	}

	return nil
}

func (m *ArticleStatisticJudgeReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ArticleStatisticJudgeReqMultiError is an error wrapping multiple validation
// errors returned by ArticleStatisticJudgeReq.ValidateAll() if the designated
// constraints aren't met.
type ArticleStatisticJudgeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleStatisticJudgeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleStatisticJudgeReqMultiError) AllErrors() []error { return m }

// ArticleStatisticJudgeReqValidationError is the validation error returned by
// ArticleStatisticJudgeReq.Validate if the designated constraints aren't met.
type ArticleStatisticJudgeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleStatisticJudgeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleStatisticJudgeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleStatisticJudgeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleStatisticJudgeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleStatisticJudgeReqValidationError) ErrorName() string {
	return "ArticleStatisticJudgeReqValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleStatisticJudgeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleStatisticJudgeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleStatisticJudgeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleStatisticJudgeReqValidationError{}

// Validate checks the field values on ArticleStatisticJudgeReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleStatisticJudgeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleStatisticJudgeReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleStatisticJudgeReplyMultiError, or nil if none found.
func (m *ArticleStatisticJudgeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleStatisticJudgeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Agree

	// no validation rules for Collect

	if len(errors) > 0 {
		return ArticleStatisticJudgeReplyMultiError(errors)
	}

	return nil
}

// ArticleStatisticJudgeReplyMultiError is an error wrapping multiple
// validation errors returned by ArticleStatisticJudgeReply.ValidateAll() if
// the designated constraints aren't met.
type ArticleStatisticJudgeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleStatisticJudgeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleStatisticJudgeReplyMultiError) AllErrors() []error { return m }

// ArticleStatisticJudgeReplyValidationError is the validation error returned
// by ArticleStatisticJudgeReply.Validate if the designated constraints aren't met.
type ArticleStatisticJudgeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleStatisticJudgeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleStatisticJudgeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleStatisticJudgeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleStatisticJudgeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleStatisticJudgeReplyValidationError) ErrorName() string {
	return "ArticleStatisticJudgeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleStatisticJudgeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleStatisticJudgeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleStatisticJudgeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleStatisticJudgeReplyValidationError{}

// Validate checks the field values on GetTalkListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTalkListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTalkListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetTalkListReqMultiError,
// or nil if none found.
func (m *GetTalkListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTalkListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if len(errors) > 0 {
		return GetTalkListReqMultiError(errors)
	}

	return nil
}

// GetTalkListReqMultiError is an error wrapping multiple validation errors
// returned by GetTalkListReq.ValidateAll() if the designated constraints
// aren't met.
type GetTalkListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTalkListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTalkListReqMultiError) AllErrors() []error { return m }

// GetTalkListReqValidationError is the validation error returned by
// GetTalkListReq.Validate if the designated constraints aren't met.
type GetTalkListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTalkListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTalkListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTalkListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTalkListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTalkListReqValidationError) ErrorName() string { return "GetTalkListReqValidationError" }

// Error satisfies the builtin error interface
func (e GetTalkListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTalkListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTalkListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTalkListReqValidationError{}

// Validate checks the field values on GetTalkListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTalkListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTalkListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTalkListReplyMultiError, or nil if none found.
func (m *GetTalkListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTalkListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTalk() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTalkListReplyValidationError{
						field:  fmt.Sprintf("Talk[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTalkListReplyValidationError{
						field:  fmt.Sprintf("Talk[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTalkListReplyValidationError{
					field:  fmt.Sprintf("Talk[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTalkListReplyMultiError(errors)
	}

	return nil
}

// GetTalkListReplyMultiError is an error wrapping multiple validation errors
// returned by GetTalkListReply.ValidateAll() if the designated constraints
// aren't met.
type GetTalkListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTalkListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTalkListReplyMultiError) AllErrors() []error { return m }

// GetTalkListReplyValidationError is the validation error returned by
// GetTalkListReply.Validate if the designated constraints aren't met.
type GetTalkListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTalkListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTalkListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTalkListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTalkListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTalkListReplyValidationError) ErrorName() string { return "GetTalkListReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetTalkListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTalkListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTalkListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTalkListReplyValidationError{}

// Validate checks the field values on GetTalkCountReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTalkCountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTalkCountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTalkCountReqMultiError, or nil if none found.
func (m *GetTalkCountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTalkCountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = GetTalkCountReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTalkCountReqMultiError(errors)
	}

	return nil
}

func (m *GetTalkCountReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetTalkCountReqMultiError is an error wrapping multiple validation errors
// returned by GetTalkCountReq.ValidateAll() if the designated constraints
// aren't met.
type GetTalkCountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTalkCountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTalkCountReqMultiError) AllErrors() []error { return m }

// GetTalkCountReqValidationError is the validation error returned by
// GetTalkCountReq.Validate if the designated constraints aren't met.
type GetTalkCountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTalkCountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTalkCountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTalkCountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTalkCountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTalkCountReqValidationError) ErrorName() string { return "GetTalkCountReqValidationError" }

// Error satisfies the builtin error interface
func (e GetTalkCountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTalkCountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTalkCountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTalkCountReqValidationError{}

// Validate checks the field values on GetTalkCountVisitorReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTalkCountVisitorReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTalkCountVisitorReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTalkCountVisitorReqMultiError, or nil if none found.
func (m *GetTalkCountVisitorReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTalkCountVisitorReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = GetTalkCountVisitorReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTalkCountVisitorReqMultiError(errors)
	}

	return nil
}

func (m *GetTalkCountVisitorReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetTalkCountVisitorReqMultiError is an error wrapping multiple validation
// errors returned by GetTalkCountVisitorReq.ValidateAll() if the designated
// constraints aren't met.
type GetTalkCountVisitorReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTalkCountVisitorReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTalkCountVisitorReqMultiError) AllErrors() []error { return m }

// GetTalkCountVisitorReqValidationError is the validation error returned by
// GetTalkCountVisitorReq.Validate if the designated constraints aren't met.
type GetTalkCountVisitorReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTalkCountVisitorReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTalkCountVisitorReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTalkCountVisitorReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTalkCountVisitorReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTalkCountVisitorReqValidationError) ErrorName() string {
	return "GetTalkCountVisitorReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetTalkCountVisitorReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTalkCountVisitorReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTalkCountVisitorReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTalkCountVisitorReqValidationError{}

// Validate checks the field values on GetTalkCountReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTalkCountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTalkCountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTalkCountReplyMultiError, or nil if none found.
func (m *GetTalkCountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTalkCountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return GetTalkCountReplyMultiError(errors)
	}

	return nil
}

// GetTalkCountReplyMultiError is an error wrapping multiple validation errors
// returned by GetTalkCountReply.ValidateAll() if the designated constraints
// aren't met.
type GetTalkCountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTalkCountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTalkCountReplyMultiError) AllErrors() []error { return m }

// GetTalkCountReplyValidationError is the validation error returned by
// GetTalkCountReply.Validate if the designated constraints aren't met.
type GetTalkCountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTalkCountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTalkCountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTalkCountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTalkCountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTalkCountReplyValidationError) ErrorName() string {
	return "GetTalkCountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetTalkCountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTalkCountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTalkCountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTalkCountReplyValidationError{}

// Validate checks the field values on GetTalkListHotReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTalkListHotReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTalkListHotReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTalkListHotReqMultiError, or nil if none found.
func (m *GetTalkListHotReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTalkListHotReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if len(errors) > 0 {
		return GetTalkListHotReqMultiError(errors)
	}

	return nil
}

// GetTalkListHotReqMultiError is an error wrapping multiple validation errors
// returned by GetTalkListHotReq.ValidateAll() if the designated constraints
// aren't met.
type GetTalkListHotReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTalkListHotReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTalkListHotReqMultiError) AllErrors() []error { return m }

// GetTalkListHotReqValidationError is the validation error returned by
// GetTalkListHotReq.Validate if the designated constraints aren't met.
type GetTalkListHotReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTalkListHotReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTalkListHotReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTalkListHotReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTalkListHotReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTalkListHotReqValidationError) ErrorName() string {
	return "GetTalkListHotReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetTalkListHotReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTalkListHotReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTalkListHotReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTalkListHotReqValidationError{}

// Validate checks the field values on GetTalkListHotReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTalkListHotReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTalkListHotReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTalkListHotReplyMultiError, or nil if none found.
func (m *GetTalkListHotReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTalkListHotReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTalk() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTalkListHotReplyValidationError{
						field:  fmt.Sprintf("Talk[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTalkListHotReplyValidationError{
						field:  fmt.Sprintf("Talk[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTalkListHotReplyValidationError{
					field:  fmt.Sprintf("Talk[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTalkListHotReplyMultiError(errors)
	}

	return nil
}

// GetTalkListHotReplyMultiError is an error wrapping multiple validation
// errors returned by GetTalkListHotReply.ValidateAll() if the designated
// constraints aren't met.
type GetTalkListHotReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTalkListHotReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTalkListHotReplyMultiError) AllErrors() []error { return m }

// GetTalkListHotReplyValidationError is the validation error returned by
// GetTalkListHotReply.Validate if the designated constraints aren't met.
type GetTalkListHotReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTalkListHotReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTalkListHotReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTalkListHotReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTalkListHotReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTalkListHotReplyValidationError) ErrorName() string {
	return "GetTalkListHotReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetTalkListHotReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTalkListHotReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTalkListHotReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTalkListHotReplyValidationError{}

// Validate checks the field values on GetUserTalkListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserTalkListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserTalkListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserTalkListReqMultiError, or nil if none found.
func (m *GetUserTalkListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserTalkListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = GetUserTalkListReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserTalkListReqMultiError(errors)
	}

	return nil
}

func (m *GetUserTalkListReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetUserTalkListReqMultiError is an error wrapping multiple validation errors
// returned by GetUserTalkListReq.ValidateAll() if the designated constraints
// aren't met.
type GetUserTalkListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserTalkListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserTalkListReqMultiError) AllErrors() []error { return m }

// GetUserTalkListReqValidationError is the validation error returned by
// GetUserTalkListReq.Validate if the designated constraints aren't met.
type GetUserTalkListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserTalkListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserTalkListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserTalkListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserTalkListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserTalkListReqValidationError) ErrorName() string {
	return "GetUserTalkListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserTalkListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserTalkListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserTalkListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserTalkListReqValidationError{}

// Validate checks the field values on GetUserTalkListVisitorReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserTalkListVisitorReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserTalkListVisitorReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserTalkListVisitorReqMultiError, or nil if none found.
func (m *GetUserTalkListVisitorReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserTalkListVisitorReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = GetUserTalkListVisitorReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserTalkListVisitorReqMultiError(errors)
	}

	return nil
}

func (m *GetUserTalkListVisitorReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetUserTalkListVisitorReqMultiError is an error wrapping multiple validation
// errors returned by GetUserTalkListVisitorReq.ValidateAll() if the
// designated constraints aren't met.
type GetUserTalkListVisitorReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserTalkListVisitorReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserTalkListVisitorReqMultiError) AllErrors() []error { return m }

// GetUserTalkListVisitorReqValidationError is the validation error returned by
// GetUserTalkListVisitorReq.Validate if the designated constraints aren't met.
type GetUserTalkListVisitorReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserTalkListVisitorReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserTalkListVisitorReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserTalkListVisitorReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserTalkListVisitorReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserTalkListVisitorReqValidationError) ErrorName() string {
	return "GetUserTalkListVisitorReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserTalkListVisitorReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserTalkListVisitorReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserTalkListVisitorReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserTalkListVisitorReqValidationError{}

// Validate checks the field values on GetTalkListStatisticReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTalkListStatisticReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTalkListStatisticReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTalkListStatisticReqMultiError, or nil if none found.
func (m *GetTalkListStatisticReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTalkListStatisticReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetTalkListStatisticReqMultiError(errors)
	}

	return nil
}

// GetTalkListStatisticReqMultiError is an error wrapping multiple validation
// errors returned by GetTalkListStatisticReq.ValidateAll() if the designated
// constraints aren't met.
type GetTalkListStatisticReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTalkListStatisticReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTalkListStatisticReqMultiError) AllErrors() []error { return m }

// GetTalkListStatisticReqValidationError is the validation error returned by
// GetTalkListStatisticReq.Validate if the designated constraints aren't met.
type GetTalkListStatisticReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTalkListStatisticReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTalkListStatisticReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTalkListStatisticReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTalkListStatisticReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTalkListStatisticReqValidationError) ErrorName() string {
	return "GetTalkListStatisticReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetTalkListStatisticReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTalkListStatisticReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTalkListStatisticReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTalkListStatisticReqValidationError{}

// Validate checks the field values on GetTalkListStatisticReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTalkListStatisticReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTalkListStatisticReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTalkListStatisticReplyMultiError, or nil if none found.
func (m *GetTalkListStatisticReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTalkListStatisticReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCount() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTalkListStatisticReplyValidationError{
						field:  fmt.Sprintf("Count[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTalkListStatisticReplyValidationError{
						field:  fmt.Sprintf("Count[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTalkListStatisticReplyValidationError{
					field:  fmt.Sprintf("Count[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTalkListStatisticReplyMultiError(errors)
	}

	return nil
}

// GetTalkListStatisticReplyMultiError is an error wrapping multiple validation
// errors returned by GetTalkListStatisticReply.ValidateAll() if the
// designated constraints aren't met.
type GetTalkListStatisticReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTalkListStatisticReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTalkListStatisticReplyMultiError) AllErrors() []error { return m }

// GetTalkListStatisticReplyValidationError is the validation error returned by
// GetTalkListStatisticReply.Validate if the designated constraints aren't met.
type GetTalkListStatisticReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTalkListStatisticReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTalkListStatisticReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTalkListStatisticReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTalkListStatisticReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTalkListStatisticReplyValidationError) ErrorName() string {
	return "GetTalkListStatisticReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetTalkListStatisticReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTalkListStatisticReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTalkListStatisticReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTalkListStatisticReplyValidationError{}

// Validate checks the field values on GetTalkStatisticReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTalkStatisticReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTalkStatisticReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTalkStatisticReqMultiError, or nil if none found.
func (m *GetTalkStatisticReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTalkStatisticReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetTalkStatisticReqMultiError(errors)
	}

	return nil
}

// GetTalkStatisticReqMultiError is an error wrapping multiple validation
// errors returned by GetTalkStatisticReq.ValidateAll() if the designated
// constraints aren't met.
type GetTalkStatisticReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTalkStatisticReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTalkStatisticReqMultiError) AllErrors() []error { return m }

// GetTalkStatisticReqValidationError is the validation error returned by
// GetTalkStatisticReq.Validate if the designated constraints aren't met.
type GetTalkStatisticReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTalkStatisticReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTalkStatisticReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTalkStatisticReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTalkStatisticReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTalkStatisticReqValidationError) ErrorName() string {
	return "GetTalkStatisticReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetTalkStatisticReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTalkStatisticReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTalkStatisticReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTalkStatisticReqValidationError{}

// Validate checks the field values on GetTalkStatisticReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTalkStatisticReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTalkStatisticReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTalkStatisticReplyMultiError, or nil if none found.
func (m *GetTalkStatisticReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTalkStatisticReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Agree

	// no validation rules for Collect

	// no validation rules for View

	// no validation rules for Comment

	if len(errors) > 0 {
		return GetTalkStatisticReplyMultiError(errors)
	}

	return nil
}

// GetTalkStatisticReplyMultiError is an error wrapping multiple validation
// errors returned by GetTalkStatisticReply.ValidateAll() if the designated
// constraints aren't met.
type GetTalkStatisticReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTalkStatisticReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTalkStatisticReplyMultiError) AllErrors() []error { return m }

// GetTalkStatisticReplyValidationError is the validation error returned by
// GetTalkStatisticReply.Validate if the designated constraints aren't met.
type GetTalkStatisticReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTalkStatisticReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTalkStatisticReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTalkStatisticReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTalkStatisticReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTalkStatisticReplyValidationError) ErrorName() string {
	return "GetTalkStatisticReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetTalkStatisticReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTalkStatisticReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTalkStatisticReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTalkStatisticReplyValidationError{}

// Validate checks the field values on GetLastTalkDraftReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLastTalkDraftReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLastTalkDraftReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLastTalkDraftReqMultiError, or nil if none found.
func (m *GetLastTalkDraftReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLastTalkDraftReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = GetLastTalkDraftReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetLastTalkDraftReqMultiError(errors)
	}

	return nil
}

func (m *GetLastTalkDraftReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetLastTalkDraftReqMultiError is an error wrapping multiple validation
// errors returned by GetLastTalkDraftReq.ValidateAll() if the designated
// constraints aren't met.
type GetLastTalkDraftReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLastTalkDraftReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLastTalkDraftReqMultiError) AllErrors() []error { return m }

// GetLastTalkDraftReqValidationError is the validation error returned by
// GetLastTalkDraftReq.Validate if the designated constraints aren't met.
type GetLastTalkDraftReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLastTalkDraftReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLastTalkDraftReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLastTalkDraftReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLastTalkDraftReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLastTalkDraftReqValidationError) ErrorName() string {
	return "GetLastTalkDraftReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetLastTalkDraftReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLastTalkDraftReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLastTalkDraftReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLastTalkDraftReqValidationError{}

// Validate checks the field values on GetLastTalkDraftReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLastTalkDraftReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLastTalkDraftReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLastTalkDraftReplyMultiError, or nil if none found.
func (m *GetLastTalkDraftReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLastTalkDraftReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	if len(errors) > 0 {
		return GetLastTalkDraftReplyMultiError(errors)
	}

	return nil
}

// GetLastTalkDraftReplyMultiError is an error wrapping multiple validation
// errors returned by GetLastTalkDraftReply.ValidateAll() if the designated
// constraints aren't met.
type GetLastTalkDraftReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLastTalkDraftReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLastTalkDraftReplyMultiError) AllErrors() []error { return m }

// GetLastTalkDraftReplyValidationError is the validation error returned by
// GetLastTalkDraftReply.Validate if the designated constraints aren't met.
type GetLastTalkDraftReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLastTalkDraftReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLastTalkDraftReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLastTalkDraftReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLastTalkDraftReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLastTalkDraftReplyValidationError) ErrorName() string {
	return "GetLastTalkDraftReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetLastTalkDraftReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLastTalkDraftReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLastTalkDraftReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLastTalkDraftReplyValidationError{}

// Validate checks the field values on GetTalkSearchReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTalkSearchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTalkSearchReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTalkSearchReqMultiError, or nil if none found.
func (m *GetTalkSearchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTalkSearchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Search

	// no validation rules for Time

	if len(errors) > 0 {
		return GetTalkSearchReqMultiError(errors)
	}

	return nil
}

// GetTalkSearchReqMultiError is an error wrapping multiple validation errors
// returned by GetTalkSearchReq.ValidateAll() if the designated constraints
// aren't met.
type GetTalkSearchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTalkSearchReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTalkSearchReqMultiError) AllErrors() []error { return m }

// GetTalkSearchReqValidationError is the validation error returned by
// GetTalkSearchReq.Validate if the designated constraints aren't met.
type GetTalkSearchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTalkSearchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTalkSearchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTalkSearchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTalkSearchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTalkSearchReqValidationError) ErrorName() string { return "GetTalkSearchReqValidationError" }

// Error satisfies the builtin error interface
func (e GetTalkSearchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTalkSearchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTalkSearchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTalkSearchReqValidationError{}

// Validate checks the field values on GetTalkSearchReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTalkSearchReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTalkSearchReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTalkSearchReplyMultiError, or nil if none found.
func (m *GetTalkSearchReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTalkSearchReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTalkSearchReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTalkSearchReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTalkSearchReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetTalkSearchReplyMultiError(errors)
	}

	return nil
}

// GetTalkSearchReplyMultiError is an error wrapping multiple validation errors
// returned by GetTalkSearchReply.ValidateAll() if the designated constraints
// aren't met.
type GetTalkSearchReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTalkSearchReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTalkSearchReplyMultiError) AllErrors() []error { return m }

// GetTalkSearchReplyValidationError is the validation error returned by
// GetTalkSearchReply.Validate if the designated constraints aren't met.
type GetTalkSearchReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTalkSearchReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTalkSearchReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTalkSearchReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTalkSearchReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTalkSearchReplyValidationError) ErrorName() string {
	return "GetTalkSearchReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetTalkSearchReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTalkSearchReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTalkSearchReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTalkSearchReplyValidationError{}

// Validate checks the field values on CreateTalkDraftReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTalkDraftReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTalkDraftReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTalkDraftReqMultiError, or nil if none found.
func (m *CreateTalkDraftReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTalkDraftReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = CreateTalkDraftReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateTalkDraftReqMultiError(errors)
	}

	return nil
}

func (m *CreateTalkDraftReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateTalkDraftReqMultiError is an error wrapping multiple validation errors
// returned by CreateTalkDraftReq.ValidateAll() if the designated constraints
// aren't met.
type CreateTalkDraftReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTalkDraftReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTalkDraftReqMultiError) AllErrors() []error { return m }

// CreateTalkDraftReqValidationError is the validation error returned by
// CreateTalkDraftReq.Validate if the designated constraints aren't met.
type CreateTalkDraftReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTalkDraftReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTalkDraftReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTalkDraftReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTalkDraftReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTalkDraftReqValidationError) ErrorName() string {
	return "CreateTalkDraftReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTalkDraftReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTalkDraftReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTalkDraftReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTalkDraftReqValidationError{}

// Validate checks the field values on CreateTalkDraftReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTalkDraftReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTalkDraftReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTalkDraftReplyMultiError, or nil if none found.
func (m *CreateTalkDraftReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTalkDraftReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateTalkDraftReplyMultiError(errors)
	}

	return nil
}

// CreateTalkDraftReplyMultiError is an error wrapping multiple validation
// errors returned by CreateTalkDraftReply.ValidateAll() if the designated
// constraints aren't met.
type CreateTalkDraftReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTalkDraftReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTalkDraftReplyMultiError) AllErrors() []error { return m }

// CreateTalkDraftReplyValidationError is the validation error returned by
// CreateTalkDraftReply.Validate if the designated constraints aren't met.
type CreateTalkDraftReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTalkDraftReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTalkDraftReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTalkDraftReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTalkDraftReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTalkDraftReplyValidationError) ErrorName() string {
	return "CreateTalkDraftReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTalkDraftReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTalkDraftReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTalkDraftReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTalkDraftReplyValidationError{}

// Validate checks the field values on SendTalkReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendTalkReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendTalkReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendTalkReqMultiError, or
// nil if none found.
func (m *SendTalkReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendTalkReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = SendTalkReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if ip := net.ParseIP(m.GetIp()); ip == nil {
		err := SendTalkReqValidationError{
			field:  "Ip",
			reason: "value must be a valid IP address",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendTalkReqMultiError(errors)
	}

	return nil
}

func (m *SendTalkReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SendTalkReqMultiError is an error wrapping multiple validation errors
// returned by SendTalkReq.ValidateAll() if the designated constraints aren't met.
type SendTalkReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendTalkReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendTalkReqMultiError) AllErrors() []error { return m }

// SendTalkReqValidationError is the validation error returned by
// SendTalkReq.Validate if the designated constraints aren't met.
type SendTalkReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendTalkReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendTalkReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendTalkReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendTalkReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendTalkReqValidationError) ErrorName() string { return "SendTalkReqValidationError" }

// Error satisfies the builtin error interface
func (e SendTalkReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendTalkReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendTalkReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendTalkReqValidationError{}

// Validate checks the field values on SendTalkEditReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendTalkEditReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendTalkEditReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendTalkEditReqMultiError, or nil if none found.
func (m *SendTalkEditReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendTalkEditReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = SendTalkEditReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if ip := net.ParseIP(m.GetIp()); ip == nil {
		err := SendTalkEditReqValidationError{
			field:  "Ip",
			reason: "value must be a valid IP address",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendTalkEditReqMultiError(errors)
	}

	return nil
}

func (m *SendTalkEditReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SendTalkEditReqMultiError is an error wrapping multiple validation errors
// returned by SendTalkEditReq.ValidateAll() if the designated constraints
// aren't met.
type SendTalkEditReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendTalkEditReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendTalkEditReqMultiError) AllErrors() []error { return m }

// SendTalkEditReqValidationError is the validation error returned by
// SendTalkEditReq.Validate if the designated constraints aren't met.
type SendTalkEditReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendTalkEditReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendTalkEditReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendTalkEditReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendTalkEditReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendTalkEditReqValidationError) ErrorName() string { return "SendTalkEditReqValidationError" }

// Error satisfies the builtin error interface
func (e SendTalkEditReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendTalkEditReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendTalkEditReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendTalkEditReqValidationError{}

// Validate checks the field values on CreateTalkReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateTalkReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTalkReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateTalkReqMultiError, or
// nil if none found.
func (m *CreateTalkReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTalkReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Auth

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = CreateTalkReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateTalkReqMultiError(errors)
	}

	return nil
}

func (m *CreateTalkReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateTalkReqMultiError is an error wrapping multiple validation errors
// returned by CreateTalkReq.ValidateAll() if the designated constraints
// aren't met.
type CreateTalkReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTalkReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTalkReqMultiError) AllErrors() []error { return m }

// CreateTalkReqValidationError is the validation error returned by
// CreateTalkReq.Validate if the designated constraints aren't met.
type CreateTalkReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTalkReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTalkReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTalkReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTalkReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTalkReqValidationError) ErrorName() string { return "CreateTalkReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateTalkReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTalkReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTalkReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTalkReqValidationError{}

// Validate checks the field values on EditTalkReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EditTalkReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditTalkReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EditTalkReqMultiError, or
// nil if none found.
func (m *EditTalkReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EditTalkReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Auth

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = EditTalkReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EditTalkReqMultiError(errors)
	}

	return nil
}

func (m *EditTalkReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// EditTalkReqMultiError is an error wrapping multiple validation errors
// returned by EditTalkReq.ValidateAll() if the designated constraints aren't met.
type EditTalkReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditTalkReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditTalkReqMultiError) AllErrors() []error { return m }

// EditTalkReqValidationError is the validation error returned by
// EditTalkReq.Validate if the designated constraints aren't met.
type EditTalkReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditTalkReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditTalkReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditTalkReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditTalkReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditTalkReqValidationError) ErrorName() string { return "EditTalkReqValidationError" }

// Error satisfies the builtin error interface
func (e EditTalkReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditTalkReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditTalkReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditTalkReqValidationError{}

// Validate checks the field values on DeleteTalkReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteTalkReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTalkReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteTalkReqMultiError, or
// nil if none found.
func (m *DeleteTalkReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTalkReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = DeleteTalkReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteTalkReqMultiError(errors)
	}

	return nil
}

func (m *DeleteTalkReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteTalkReqMultiError is an error wrapping multiple validation errors
// returned by DeleteTalkReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteTalkReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTalkReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTalkReqMultiError) AllErrors() []error { return m }

// DeleteTalkReqValidationError is the validation error returned by
// DeleteTalkReq.Validate if the designated constraints aren't met.
type DeleteTalkReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTalkReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTalkReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTalkReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTalkReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTalkReqValidationError) ErrorName() string { return "DeleteTalkReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteTalkReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTalkReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTalkReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTalkReqValidationError{}

// Validate checks the field values on CreateTalkDbCacheAndSearchReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTalkDbCacheAndSearchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTalkDbCacheAndSearchReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateTalkDbCacheAndSearchReqMultiError, or nil if none found.
func (m *CreateTalkDbCacheAndSearchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTalkDbCacheAndSearchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Auth

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = CreateTalkDbCacheAndSearchReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateTalkDbCacheAndSearchReqMultiError(errors)
	}

	return nil
}

func (m *CreateTalkDbCacheAndSearchReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateTalkDbCacheAndSearchReqMultiError is an error wrapping multiple
// validation errors returned by CreateTalkDbCacheAndSearchReq.ValidateAll()
// if the designated constraints aren't met.
type CreateTalkDbCacheAndSearchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTalkDbCacheAndSearchReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTalkDbCacheAndSearchReqMultiError) AllErrors() []error { return m }

// CreateTalkDbCacheAndSearchReqValidationError is the validation error
// returned by CreateTalkDbCacheAndSearchReq.Validate if the designated
// constraints aren't met.
type CreateTalkDbCacheAndSearchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTalkDbCacheAndSearchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTalkDbCacheAndSearchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTalkDbCacheAndSearchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTalkDbCacheAndSearchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTalkDbCacheAndSearchReqValidationError) ErrorName() string {
	return "CreateTalkDbCacheAndSearchReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTalkDbCacheAndSearchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTalkDbCacheAndSearchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTalkDbCacheAndSearchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTalkDbCacheAndSearchReqValidationError{}

// Validate checks the field values on EditTalkCosAndSearchReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditTalkCosAndSearchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditTalkCosAndSearchReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditTalkCosAndSearchReqMultiError, or nil if none found.
func (m *EditTalkCosAndSearchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EditTalkCosAndSearchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Auth

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = EditTalkCosAndSearchReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EditTalkCosAndSearchReqMultiError(errors)
	}

	return nil
}

func (m *EditTalkCosAndSearchReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// EditTalkCosAndSearchReqMultiError is an error wrapping multiple validation
// errors returned by EditTalkCosAndSearchReq.ValidateAll() if the designated
// constraints aren't met.
type EditTalkCosAndSearchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditTalkCosAndSearchReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditTalkCosAndSearchReqMultiError) AllErrors() []error { return m }

// EditTalkCosAndSearchReqValidationError is the validation error returned by
// EditTalkCosAndSearchReq.Validate if the designated constraints aren't met.
type EditTalkCosAndSearchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditTalkCosAndSearchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditTalkCosAndSearchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditTalkCosAndSearchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditTalkCosAndSearchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditTalkCosAndSearchReqValidationError) ErrorName() string {
	return "EditTalkCosAndSearchReqValidationError"
}

// Error satisfies the builtin error interface
func (e EditTalkCosAndSearchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditTalkCosAndSearchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditTalkCosAndSearchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditTalkCosAndSearchReqValidationError{}

// Validate checks the field values on DeleteTalkCacheAndSearchReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTalkCacheAndSearchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTalkCacheAndSearchReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTalkCacheAndSearchReqMultiError, or nil if none found.
func (m *DeleteTalkCacheAndSearchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTalkCacheAndSearchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = DeleteTalkCacheAndSearchReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteTalkCacheAndSearchReqMultiError(errors)
	}

	return nil
}

func (m *DeleteTalkCacheAndSearchReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteTalkCacheAndSearchReqMultiError is an error wrapping multiple
// validation errors returned by DeleteTalkCacheAndSearchReq.ValidateAll() if
// the designated constraints aren't met.
type DeleteTalkCacheAndSearchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTalkCacheAndSearchReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTalkCacheAndSearchReqMultiError) AllErrors() []error { return m }

// DeleteTalkCacheAndSearchReqValidationError is the validation error returned
// by DeleteTalkCacheAndSearchReq.Validate if the designated constraints
// aren't met.
type DeleteTalkCacheAndSearchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTalkCacheAndSearchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTalkCacheAndSearchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTalkCacheAndSearchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTalkCacheAndSearchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTalkCacheAndSearchReqValidationError) ErrorName() string {
	return "DeleteTalkCacheAndSearchReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTalkCacheAndSearchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTalkCacheAndSearchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTalkCacheAndSearchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTalkCacheAndSearchReqValidationError{}

// Validate checks the field values on SetTalkViewReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetTalkViewReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetTalkViewReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetTalkViewReqMultiError,
// or nil if none found.
func (m *SetTalkViewReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetTalkViewReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = SetTalkViewReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetTalkViewReqMultiError(errors)
	}

	return nil
}

func (m *SetTalkViewReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SetTalkViewReqMultiError is an error wrapping multiple validation errors
// returned by SetTalkViewReq.ValidateAll() if the designated constraints
// aren't met.
type SetTalkViewReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetTalkViewReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetTalkViewReqMultiError) AllErrors() []error { return m }

// SetTalkViewReqValidationError is the validation error returned by
// SetTalkViewReq.Validate if the designated constraints aren't met.
type SetTalkViewReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetTalkViewReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetTalkViewReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetTalkViewReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetTalkViewReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetTalkViewReqValidationError) ErrorName() string { return "SetTalkViewReqValidationError" }

// Error satisfies the builtin error interface
func (e SetTalkViewReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetTalkViewReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetTalkViewReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetTalkViewReqValidationError{}

// Validate checks the field values on TalkStatisticJudgeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TalkStatisticJudgeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TalkStatisticJudgeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TalkStatisticJudgeReqMultiError, or nil if none found.
func (m *TalkStatisticJudgeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *TalkStatisticJudgeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = TalkStatisticJudgeReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TalkStatisticJudgeReqMultiError(errors)
	}

	return nil
}

func (m *TalkStatisticJudgeReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// TalkStatisticJudgeReqMultiError is an error wrapping multiple validation
// errors returned by TalkStatisticJudgeReq.ValidateAll() if the designated
// constraints aren't met.
type TalkStatisticJudgeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TalkStatisticJudgeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TalkStatisticJudgeReqMultiError) AllErrors() []error { return m }

// TalkStatisticJudgeReqValidationError is the validation error returned by
// TalkStatisticJudgeReq.Validate if the designated constraints aren't met.
type TalkStatisticJudgeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TalkStatisticJudgeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TalkStatisticJudgeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TalkStatisticJudgeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TalkStatisticJudgeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TalkStatisticJudgeReqValidationError) ErrorName() string {
	return "TalkStatisticJudgeReqValidationError"
}

// Error satisfies the builtin error interface
func (e TalkStatisticJudgeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTalkStatisticJudgeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TalkStatisticJudgeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TalkStatisticJudgeReqValidationError{}

// Validate checks the field values on TalkStatisticJudgeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TalkStatisticJudgeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TalkStatisticJudgeReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TalkStatisticJudgeReplyMultiError, or nil if none found.
func (m *TalkStatisticJudgeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *TalkStatisticJudgeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Agree

	// no validation rules for Collect

	if len(errors) > 0 {
		return TalkStatisticJudgeReplyMultiError(errors)
	}

	return nil
}

// TalkStatisticJudgeReplyMultiError is an error wrapping multiple validation
// errors returned by TalkStatisticJudgeReply.ValidateAll() if the designated
// constraints aren't met.
type TalkStatisticJudgeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TalkStatisticJudgeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TalkStatisticJudgeReplyMultiError) AllErrors() []error { return m }

// TalkStatisticJudgeReplyValidationError is the validation error returned by
// TalkStatisticJudgeReply.Validate if the designated constraints aren't met.
type TalkStatisticJudgeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TalkStatisticJudgeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TalkStatisticJudgeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TalkStatisticJudgeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TalkStatisticJudgeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TalkStatisticJudgeReplyValidationError) ErrorName() string {
	return "TalkStatisticJudgeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e TalkStatisticJudgeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTalkStatisticJudgeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TalkStatisticJudgeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TalkStatisticJudgeReplyValidationError{}

// Validate checks the field values on SetTalkAgreeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetTalkAgreeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetTalkAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetTalkAgreeReqMultiError, or nil if none found.
func (m *SetTalkAgreeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetTalkAgreeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = SetTalkAgreeReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserUuid()); err != nil {
		err = SetTalkAgreeReqValidationError{
			field:  "UserUuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetTalkAgreeReqMultiError(errors)
	}

	return nil
}

func (m *SetTalkAgreeReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SetTalkAgreeReqMultiError is an error wrapping multiple validation errors
// returned by SetTalkAgreeReq.ValidateAll() if the designated constraints
// aren't met.
type SetTalkAgreeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetTalkAgreeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetTalkAgreeReqMultiError) AllErrors() []error { return m }

// SetTalkAgreeReqValidationError is the validation error returned by
// SetTalkAgreeReq.Validate if the designated constraints aren't met.
type SetTalkAgreeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetTalkAgreeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetTalkAgreeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetTalkAgreeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetTalkAgreeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetTalkAgreeReqValidationError) ErrorName() string { return "SetTalkAgreeReqValidationError" }

// Error satisfies the builtin error interface
func (e SetTalkAgreeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetTalkAgreeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetTalkAgreeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetTalkAgreeReqValidationError{}

// Validate checks the field values on SetTalkCollectReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetTalkCollectReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetTalkCollectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetTalkCollectReqMultiError, or nil if none found.
func (m *SetTalkCollectReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetTalkCollectReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CollectionsId

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = SetTalkCollectReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserUuid()); err != nil {
		err = SetTalkCollectReqValidationError{
			field:  "UserUuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetTalkCollectReqMultiError(errors)
	}

	return nil
}

func (m *SetTalkCollectReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SetTalkCollectReqMultiError is an error wrapping multiple validation errors
// returned by SetTalkCollectReq.ValidateAll() if the designated constraints
// aren't met.
type SetTalkCollectReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetTalkCollectReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetTalkCollectReqMultiError) AllErrors() []error { return m }

// SetTalkCollectReqValidationError is the validation error returned by
// SetTalkCollectReq.Validate if the designated constraints aren't met.
type SetTalkCollectReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetTalkCollectReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetTalkCollectReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetTalkCollectReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetTalkCollectReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetTalkCollectReqValidationError) ErrorName() string {
	return "SetTalkCollectReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetTalkCollectReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetTalkCollectReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetTalkCollectReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetTalkCollectReqValidationError{}

// Validate checks the field values on CancelTalkAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelTalkAgreeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelTalkAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelTalkAgreeReqMultiError, or nil if none found.
func (m *CancelTalkAgreeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelTalkAgreeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = CancelTalkAgreeReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserUuid()); err != nil {
		err = CancelTalkAgreeReqValidationError{
			field:  "UserUuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelTalkAgreeReqMultiError(errors)
	}

	return nil
}

func (m *CancelTalkAgreeReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CancelTalkAgreeReqMultiError is an error wrapping multiple validation errors
// returned by CancelTalkAgreeReq.ValidateAll() if the designated constraints
// aren't met.
type CancelTalkAgreeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelTalkAgreeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelTalkAgreeReqMultiError) AllErrors() []error { return m }

// CancelTalkAgreeReqValidationError is the validation error returned by
// CancelTalkAgreeReq.Validate if the designated constraints aren't met.
type CancelTalkAgreeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelTalkAgreeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelTalkAgreeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelTalkAgreeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelTalkAgreeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelTalkAgreeReqValidationError) ErrorName() string {
	return "CancelTalkAgreeReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelTalkAgreeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelTalkAgreeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelTalkAgreeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelTalkAgreeReqValidationError{}

// Validate checks the field values on CancelTalkCollectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelTalkCollectReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelTalkCollectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelTalkCollectReqMultiError, or nil if none found.
func (m *CancelTalkCollectReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelTalkCollectReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = CancelTalkCollectReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserUuid()); err != nil {
		err = CancelTalkCollectReqValidationError{
			field:  "UserUuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelTalkCollectReqMultiError(errors)
	}

	return nil
}

func (m *CancelTalkCollectReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CancelTalkCollectReqMultiError is an error wrapping multiple validation
// errors returned by CancelTalkCollectReq.ValidateAll() if the designated
// constraints aren't met.
type CancelTalkCollectReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelTalkCollectReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelTalkCollectReqMultiError) AllErrors() []error { return m }

// CancelTalkCollectReqValidationError is the validation error returned by
// CancelTalkCollectReq.Validate if the designated constraints aren't met.
type CancelTalkCollectReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelTalkCollectReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelTalkCollectReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelTalkCollectReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelTalkCollectReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelTalkCollectReqValidationError) ErrorName() string {
	return "CancelTalkCollectReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelTalkCollectReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelTalkCollectReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelTalkCollectReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelTalkCollectReqValidationError{}

// Validate checks the field values on GetLastColumnDraftReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLastColumnDraftReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLastColumnDraftReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLastColumnDraftReqMultiError, or nil if none found.
func (m *GetLastColumnDraftReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLastColumnDraftReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = GetLastColumnDraftReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetLastColumnDraftReqMultiError(errors)
	}

	return nil
}

func (m *GetLastColumnDraftReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetLastColumnDraftReqMultiError is an error wrapping multiple validation
// errors returned by GetLastColumnDraftReq.ValidateAll() if the designated
// constraints aren't met.
type GetLastColumnDraftReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLastColumnDraftReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLastColumnDraftReqMultiError) AllErrors() []error { return m }

// GetLastColumnDraftReqValidationError is the validation error returned by
// GetLastColumnDraftReq.Validate if the designated constraints aren't met.
type GetLastColumnDraftReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLastColumnDraftReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLastColumnDraftReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLastColumnDraftReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLastColumnDraftReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLastColumnDraftReqValidationError) ErrorName() string {
	return "GetLastColumnDraftReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetLastColumnDraftReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLastColumnDraftReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLastColumnDraftReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLastColumnDraftReqValidationError{}

// Validate checks the field values on GetLastColumnDraftReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLastColumnDraftReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLastColumnDraftReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLastColumnDraftReplyMultiError, or nil if none found.
func (m *GetLastColumnDraftReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLastColumnDraftReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	if len(errors) > 0 {
		return GetLastColumnDraftReplyMultiError(errors)
	}

	return nil
}

// GetLastColumnDraftReplyMultiError is an error wrapping multiple validation
// errors returned by GetLastColumnDraftReply.ValidateAll() if the designated
// constraints aren't met.
type GetLastColumnDraftReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLastColumnDraftReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLastColumnDraftReplyMultiError) AllErrors() []error { return m }

// GetLastColumnDraftReplyValidationError is the validation error returned by
// GetLastColumnDraftReply.Validate if the designated constraints aren't met.
type GetLastColumnDraftReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLastColumnDraftReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLastColumnDraftReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLastColumnDraftReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLastColumnDraftReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLastColumnDraftReplyValidationError) ErrorName() string {
	return "GetLastColumnDraftReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetLastColumnDraftReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLastColumnDraftReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLastColumnDraftReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLastColumnDraftReplyValidationError{}

// Validate checks the field values on GetColumnSearchReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColumnSearchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnSearchReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnSearchReqMultiError, or nil if none found.
func (m *GetColumnSearchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnSearchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Search

	// no validation rules for Time

	if len(errors) > 0 {
		return GetColumnSearchReqMultiError(errors)
	}

	return nil
}

// GetColumnSearchReqMultiError is an error wrapping multiple validation errors
// returned by GetColumnSearchReq.ValidateAll() if the designated constraints
// aren't met.
type GetColumnSearchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnSearchReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnSearchReqMultiError) AllErrors() []error { return m }

// GetColumnSearchReqValidationError is the validation error returned by
// GetColumnSearchReq.Validate if the designated constraints aren't met.
type GetColumnSearchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnSearchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnSearchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnSearchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnSearchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnSearchReqValidationError) ErrorName() string {
	return "GetColumnSearchReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnSearchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnSearchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnSearchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnSearchReqValidationError{}

// Validate checks the field values on GetColumnSearchReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColumnSearchReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnSearchReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnSearchReplyMultiError, or nil if none found.
func (m *GetColumnSearchReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnSearchReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetColumnSearchReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetColumnSearchReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetColumnSearchReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetColumnSearchReplyMultiError(errors)
	}

	return nil
}

// GetColumnSearchReplyMultiError is an error wrapping multiple validation
// errors returned by GetColumnSearchReply.ValidateAll() if the designated
// constraints aren't met.
type GetColumnSearchReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnSearchReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnSearchReplyMultiError) AllErrors() []error { return m }

// GetColumnSearchReplyValidationError is the validation error returned by
// GetColumnSearchReply.Validate if the designated constraints aren't met.
type GetColumnSearchReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnSearchReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnSearchReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnSearchReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnSearchReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnSearchReplyValidationError) ErrorName() string {
	return "GetColumnSearchReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnSearchReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnSearchReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnSearchReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnSearchReplyValidationError{}

// Validate checks the field values on CreateColumnDraftReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateColumnDraftReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateColumnDraftReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateColumnDraftReqMultiError, or nil if none found.
func (m *CreateColumnDraftReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateColumnDraftReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = CreateColumnDraftReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateColumnDraftReqMultiError(errors)
	}

	return nil
}

func (m *CreateColumnDraftReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateColumnDraftReqMultiError is an error wrapping multiple validation
// errors returned by CreateColumnDraftReq.ValidateAll() if the designated
// constraints aren't met.
type CreateColumnDraftReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateColumnDraftReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateColumnDraftReqMultiError) AllErrors() []error { return m }

// CreateColumnDraftReqValidationError is the validation error returned by
// CreateColumnDraftReq.Validate if the designated constraints aren't met.
type CreateColumnDraftReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateColumnDraftReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateColumnDraftReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateColumnDraftReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateColumnDraftReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateColumnDraftReqValidationError) ErrorName() string {
	return "CreateColumnDraftReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateColumnDraftReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateColumnDraftReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateColumnDraftReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateColumnDraftReqValidationError{}

// Validate checks the field values on CreateColumnDraftReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateColumnDraftReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateColumnDraftReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateColumnDraftReplyMultiError, or nil if none found.
func (m *CreateColumnDraftReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateColumnDraftReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateColumnDraftReplyMultiError(errors)
	}

	return nil
}

// CreateColumnDraftReplyMultiError is an error wrapping multiple validation
// errors returned by CreateColumnDraftReply.ValidateAll() if the designated
// constraints aren't met.
type CreateColumnDraftReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateColumnDraftReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateColumnDraftReplyMultiError) AllErrors() []error { return m }

// CreateColumnDraftReplyValidationError is the validation error returned by
// CreateColumnDraftReply.Validate if the designated constraints aren't met.
type CreateColumnDraftReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateColumnDraftReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateColumnDraftReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateColumnDraftReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateColumnDraftReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateColumnDraftReplyValidationError) ErrorName() string {
	return "CreateColumnDraftReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateColumnDraftReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateColumnDraftReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateColumnDraftReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateColumnDraftReplyValidationError{}

// Validate checks the field values on SendColumnReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendColumnReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendColumnReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendColumnReqMultiError, or
// nil if none found.
func (m *SendColumnReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendColumnReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = SendColumnReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if ip := net.ParseIP(m.GetIp()); ip == nil {
		err := SendColumnReqValidationError{
			field:  "Ip",
			reason: "value must be a valid IP address",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendColumnReqMultiError(errors)
	}

	return nil
}

func (m *SendColumnReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SendColumnReqMultiError is an error wrapping multiple validation errors
// returned by SendColumnReq.ValidateAll() if the designated constraints
// aren't met.
type SendColumnReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendColumnReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendColumnReqMultiError) AllErrors() []error { return m }

// SendColumnReqValidationError is the validation error returned by
// SendColumnReq.Validate if the designated constraints aren't met.
type SendColumnReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendColumnReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendColumnReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendColumnReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendColumnReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendColumnReqValidationError) ErrorName() string { return "SendColumnReqValidationError" }

// Error satisfies the builtin error interface
func (e SendColumnReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendColumnReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendColumnReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendColumnReqValidationError{}

// Validate checks the field values on CreateColumnReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateColumnReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateColumnReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateColumnReqMultiError, or nil if none found.
func (m *CreateColumnReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateColumnReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Auth

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = CreateColumnReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateColumnReqMultiError(errors)
	}

	return nil
}

func (m *CreateColumnReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateColumnReqMultiError is an error wrapping multiple validation errors
// returned by CreateColumnReq.ValidateAll() if the designated constraints
// aren't met.
type CreateColumnReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateColumnReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateColumnReqMultiError) AllErrors() []error { return m }

// CreateColumnReqValidationError is the validation error returned by
// CreateColumnReq.Validate if the designated constraints aren't met.
type CreateColumnReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateColumnReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateColumnReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateColumnReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateColumnReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateColumnReqValidationError) ErrorName() string { return "CreateColumnReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateColumnReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateColumnReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateColumnReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateColumnReqValidationError{}

// Validate checks the field values on CreateColumnDbCacheAndSearchReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateColumnDbCacheAndSearchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateColumnDbCacheAndSearchReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateColumnDbCacheAndSearchReqMultiError, or nil if none found.
func (m *CreateColumnDbCacheAndSearchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateColumnDbCacheAndSearchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Auth

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = CreateColumnDbCacheAndSearchReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateColumnDbCacheAndSearchReqMultiError(errors)
	}

	return nil
}

func (m *CreateColumnDbCacheAndSearchReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateColumnDbCacheAndSearchReqMultiError is an error wrapping multiple
// validation errors returned by CreateColumnDbCacheAndSearchReq.ValidateAll()
// if the designated constraints aren't met.
type CreateColumnDbCacheAndSearchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateColumnDbCacheAndSearchReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateColumnDbCacheAndSearchReqMultiError) AllErrors() []error { return m }

// CreateColumnDbCacheAndSearchReqValidationError is the validation error
// returned by CreateColumnDbCacheAndSearchReq.Validate if the designated
// constraints aren't met.
type CreateColumnDbCacheAndSearchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateColumnDbCacheAndSearchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateColumnDbCacheAndSearchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateColumnDbCacheAndSearchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateColumnDbCacheAndSearchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateColumnDbCacheAndSearchReqValidationError) ErrorName() string {
	return "CreateColumnDbCacheAndSearchReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateColumnDbCacheAndSearchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateColumnDbCacheAndSearchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateColumnDbCacheAndSearchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateColumnDbCacheAndSearchReqValidationError{}

// Validate checks the field values on SubscribeColumnReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubscribeColumnReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeColumnReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeColumnReqMultiError, or nil if none found.
func (m *SubscribeColumnReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeColumnReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetAuthor()); err != nil {
		err = SubscribeColumnReqValidationError{
			field:  "Author",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = SubscribeColumnReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SubscribeColumnReqMultiError(errors)
	}

	return nil
}

func (m *SubscribeColumnReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SubscribeColumnReqMultiError is an error wrapping multiple validation errors
// returned by SubscribeColumnReq.ValidateAll() if the designated constraints
// aren't met.
type SubscribeColumnReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeColumnReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeColumnReqMultiError) AllErrors() []error { return m }

// SubscribeColumnReqValidationError is the validation error returned by
// SubscribeColumnReq.Validate if the designated constraints aren't met.
type SubscribeColumnReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeColumnReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeColumnReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeColumnReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeColumnReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeColumnReqValidationError) ErrorName() string {
	return "SubscribeColumnReqValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeColumnReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeColumnReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeColumnReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeColumnReqValidationError{}

// Validate checks the field values on CancelSubscribeColumnReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelSubscribeColumnReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelSubscribeColumnReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelSubscribeColumnReqMultiError, or nil if none found.
func (m *CancelSubscribeColumnReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelSubscribeColumnReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = CancelSubscribeColumnReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelSubscribeColumnReqMultiError(errors)
	}

	return nil
}

func (m *CancelSubscribeColumnReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CancelSubscribeColumnReqMultiError is an error wrapping multiple validation
// errors returned by CancelSubscribeColumnReq.ValidateAll() if the designated
// constraints aren't met.
type CancelSubscribeColumnReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelSubscribeColumnReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelSubscribeColumnReqMultiError) AllErrors() []error { return m }

// CancelSubscribeColumnReqValidationError is the validation error returned by
// CancelSubscribeColumnReq.Validate if the designated constraints aren't met.
type CancelSubscribeColumnReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelSubscribeColumnReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelSubscribeColumnReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelSubscribeColumnReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelSubscribeColumnReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelSubscribeColumnReqValidationError) ErrorName() string {
	return "CancelSubscribeColumnReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelSubscribeColumnReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelSubscribeColumnReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelSubscribeColumnReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelSubscribeColumnReqValidationError{}

// Validate checks the field values on SubscribeJudgeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubscribeJudgeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeJudgeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeJudgeReqMultiError, or nil if none found.
func (m *SubscribeJudgeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeJudgeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = SubscribeJudgeReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SubscribeJudgeReqMultiError(errors)
	}

	return nil
}

func (m *SubscribeJudgeReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SubscribeJudgeReqMultiError is an error wrapping multiple validation errors
// returned by SubscribeJudgeReq.ValidateAll() if the designated constraints
// aren't met.
type SubscribeJudgeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeJudgeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeJudgeReqMultiError) AllErrors() []error { return m }

// SubscribeJudgeReqValidationError is the validation error returned by
// SubscribeJudgeReq.Validate if the designated constraints aren't met.
type SubscribeJudgeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeJudgeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeJudgeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeJudgeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeJudgeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeJudgeReqValidationError) ErrorName() string {
	return "SubscribeJudgeReqValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeJudgeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeJudgeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeJudgeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeJudgeReqValidationError{}

// Validate checks the field values on SubscribeJudgeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubscribeJudgeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeJudgeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeJudgeReplyMultiError, or nil if none found.
func (m *SubscribeJudgeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeJudgeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Subscribe

	if len(errors) > 0 {
		return SubscribeJudgeReplyMultiError(errors)
	}

	return nil
}

// SubscribeJudgeReplyMultiError is an error wrapping multiple validation
// errors returned by SubscribeJudgeReply.ValidateAll() if the designated
// constraints aren't met.
type SubscribeJudgeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeJudgeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeJudgeReplyMultiError) AllErrors() []error { return m }

// SubscribeJudgeReplyValidationError is the validation error returned by
// SubscribeJudgeReply.Validate if the designated constraints aren't met.
type SubscribeJudgeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeJudgeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeJudgeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeJudgeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeJudgeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeJudgeReplyValidationError) ErrorName() string {
	return "SubscribeJudgeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeJudgeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeJudgeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeJudgeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeJudgeReplyValidationError{}

// Validate checks the field values on EditColumnCosAndSearchReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditColumnCosAndSearchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditColumnCosAndSearchReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditColumnCosAndSearchReqMultiError, or nil if none found.
func (m *EditColumnCosAndSearchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EditColumnCosAndSearchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Auth

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = EditColumnCosAndSearchReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EditColumnCosAndSearchReqMultiError(errors)
	}

	return nil
}

func (m *EditColumnCosAndSearchReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// EditColumnCosAndSearchReqMultiError is an error wrapping multiple validation
// errors returned by EditColumnCosAndSearchReq.ValidateAll() if the
// designated constraints aren't met.
type EditColumnCosAndSearchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditColumnCosAndSearchReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditColumnCosAndSearchReqMultiError) AllErrors() []error { return m }

// EditColumnCosAndSearchReqValidationError is the validation error returned by
// EditColumnCosAndSearchReq.Validate if the designated constraints aren't met.
type EditColumnCosAndSearchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditColumnCosAndSearchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditColumnCosAndSearchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditColumnCosAndSearchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditColumnCosAndSearchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditColumnCosAndSearchReqValidationError) ErrorName() string {
	return "EditColumnCosAndSearchReqValidationError"
}

// Error satisfies the builtin error interface
func (e EditColumnCosAndSearchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditColumnCosAndSearchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditColumnCosAndSearchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditColumnCosAndSearchReqValidationError{}

// Validate checks the field values on GetColumnListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetColumnListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnListReqMultiError, or nil if none found.
func (m *GetColumnListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if len(errors) > 0 {
		return GetColumnListReqMultiError(errors)
	}

	return nil
}

// GetColumnListReqMultiError is an error wrapping multiple validation errors
// returned by GetColumnListReq.ValidateAll() if the designated constraints
// aren't met.
type GetColumnListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnListReqMultiError) AllErrors() []error { return m }

// GetColumnListReqValidationError is the validation error returned by
// GetColumnListReq.Validate if the designated constraints aren't met.
type GetColumnListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnListReqValidationError) ErrorName() string { return "GetColumnListReqValidationError" }

// Error satisfies the builtin error interface
func (e GetColumnListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnListReqValidationError{}

// Validate checks the field values on GetColumnListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColumnListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnListReplyMultiError, or nil if none found.
func (m *GetColumnListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetColumn() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetColumnListReplyValidationError{
						field:  fmt.Sprintf("Column[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetColumnListReplyValidationError{
						field:  fmt.Sprintf("Column[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetColumnListReplyValidationError{
					field:  fmt.Sprintf("Column[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetColumnListReplyMultiError(errors)
	}

	return nil
}

// GetColumnListReplyMultiError is an error wrapping multiple validation errors
// returned by GetColumnListReply.ValidateAll() if the designated constraints
// aren't met.
type GetColumnListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnListReplyMultiError) AllErrors() []error { return m }

// GetColumnListReplyValidationError is the validation error returned by
// GetColumnListReply.Validate if the designated constraints aren't met.
type GetColumnListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnListReplyValidationError) ErrorName() string {
	return "GetColumnListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnListReplyValidationError{}

// Validate checks the field values on GetColumnListHotReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColumnListHotReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnListHotReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnListHotReqMultiError, or nil if none found.
func (m *GetColumnListHotReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnListHotReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if len(errors) > 0 {
		return GetColumnListHotReqMultiError(errors)
	}

	return nil
}

// GetColumnListHotReqMultiError is an error wrapping multiple validation
// errors returned by GetColumnListHotReq.ValidateAll() if the designated
// constraints aren't met.
type GetColumnListHotReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnListHotReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnListHotReqMultiError) AllErrors() []error { return m }

// GetColumnListHotReqValidationError is the validation error returned by
// GetColumnListHotReq.Validate if the designated constraints aren't met.
type GetColumnListHotReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnListHotReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnListHotReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnListHotReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnListHotReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnListHotReqValidationError) ErrorName() string {
	return "GetColumnListHotReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnListHotReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnListHotReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnListHotReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnListHotReqValidationError{}

// Validate checks the field values on GetColumnListHotReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColumnListHotReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnListHotReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnListHotReplyMultiError, or nil if none found.
func (m *GetColumnListHotReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnListHotReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetColumn() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetColumnListHotReplyValidationError{
						field:  fmt.Sprintf("Column[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetColumnListHotReplyValidationError{
						field:  fmt.Sprintf("Column[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetColumnListHotReplyValidationError{
					field:  fmt.Sprintf("Column[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetColumnListHotReplyMultiError(errors)
	}

	return nil
}

// GetColumnListHotReplyMultiError is an error wrapping multiple validation
// errors returned by GetColumnListHotReply.ValidateAll() if the designated
// constraints aren't met.
type GetColumnListHotReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnListHotReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnListHotReplyMultiError) AllErrors() []error { return m }

// GetColumnListHotReplyValidationError is the validation error returned by
// GetColumnListHotReply.Validate if the designated constraints aren't met.
type GetColumnListHotReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnListHotReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnListHotReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnListHotReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnListHotReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnListHotReplyValidationError) ErrorName() string {
	return "GetColumnListHotReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnListHotReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnListHotReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnListHotReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnListHotReplyValidationError{}

// Validate checks the field values on GetColumnListStatisticReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColumnListStatisticReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnListStatisticReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnListStatisticReqMultiError, or nil if none found.
func (m *GetColumnListStatisticReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnListStatisticReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetColumnListStatisticReqMultiError(errors)
	}

	return nil
}

// GetColumnListStatisticReqMultiError is an error wrapping multiple validation
// errors returned by GetColumnListStatisticReq.ValidateAll() if the
// designated constraints aren't met.
type GetColumnListStatisticReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnListStatisticReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnListStatisticReqMultiError) AllErrors() []error { return m }

// GetColumnListStatisticReqValidationError is the validation error returned by
// GetColumnListStatisticReq.Validate if the designated constraints aren't met.
type GetColumnListStatisticReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnListStatisticReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnListStatisticReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnListStatisticReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnListStatisticReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnListStatisticReqValidationError) ErrorName() string {
	return "GetColumnListStatisticReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnListStatisticReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnListStatisticReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnListStatisticReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnListStatisticReqValidationError{}

// Validate checks the field values on GetColumnListStatisticReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColumnListStatisticReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnListStatisticReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnListStatisticReplyMultiError, or nil if none found.
func (m *GetColumnListStatisticReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnListStatisticReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCount() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetColumnListStatisticReplyValidationError{
						field:  fmt.Sprintf("Count[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetColumnListStatisticReplyValidationError{
						field:  fmt.Sprintf("Count[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetColumnListStatisticReplyValidationError{
					field:  fmt.Sprintf("Count[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetColumnListStatisticReplyMultiError(errors)
	}

	return nil
}

// GetColumnListStatisticReplyMultiError is an error wrapping multiple
// validation errors returned by GetColumnListStatisticReply.ValidateAll() if
// the designated constraints aren't met.
type GetColumnListStatisticReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnListStatisticReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnListStatisticReplyMultiError) AllErrors() []error { return m }

// GetColumnListStatisticReplyValidationError is the validation error returned
// by GetColumnListStatisticReply.Validate if the designated constraints
// aren't met.
type GetColumnListStatisticReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnListStatisticReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnListStatisticReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnListStatisticReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnListStatisticReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnListStatisticReplyValidationError) ErrorName() string {
	return "GetColumnListStatisticReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnListStatisticReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnListStatisticReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnListStatisticReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnListStatisticReplyValidationError{}

// Validate checks the field values on GetColumnStatisticReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColumnStatisticReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnStatisticReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnStatisticReqMultiError, or nil if none found.
func (m *GetColumnStatisticReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnStatisticReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetColumnStatisticReqMultiError(errors)
	}

	return nil
}

// GetColumnStatisticReqMultiError is an error wrapping multiple validation
// errors returned by GetColumnStatisticReq.ValidateAll() if the designated
// constraints aren't met.
type GetColumnStatisticReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnStatisticReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnStatisticReqMultiError) AllErrors() []error { return m }

// GetColumnStatisticReqValidationError is the validation error returned by
// GetColumnStatisticReq.Validate if the designated constraints aren't met.
type GetColumnStatisticReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnStatisticReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnStatisticReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnStatisticReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnStatisticReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnStatisticReqValidationError) ErrorName() string {
	return "GetColumnStatisticReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnStatisticReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnStatisticReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnStatisticReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnStatisticReqValidationError{}

// Validate checks the field values on GetColumnStatisticReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColumnStatisticReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnStatisticReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnStatisticReplyMultiError, or nil if none found.
func (m *GetColumnStatisticReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnStatisticReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Agree

	// no validation rules for Collect

	// no validation rules for View

	if len(errors) > 0 {
		return GetColumnStatisticReplyMultiError(errors)
	}

	return nil
}

// GetColumnStatisticReplyMultiError is an error wrapping multiple validation
// errors returned by GetColumnStatisticReply.ValidateAll() if the designated
// constraints aren't met.
type GetColumnStatisticReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnStatisticReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnStatisticReplyMultiError) AllErrors() []error { return m }

// GetColumnStatisticReplyValidationError is the validation error returned by
// GetColumnStatisticReply.Validate if the designated constraints aren't met.
type GetColumnStatisticReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnStatisticReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnStatisticReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnStatisticReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnStatisticReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnStatisticReplyValidationError) ErrorName() string {
	return "GetColumnStatisticReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnStatisticReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnStatisticReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnStatisticReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnStatisticReplyValidationError{}

// Validate checks the field values on GetUserColumnListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserColumnListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserColumnListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserColumnListReqMultiError, or nil if none found.
func (m *GetUserColumnListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserColumnListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = GetUserColumnListReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserColumnListReqMultiError(errors)
	}

	return nil
}

func (m *GetUserColumnListReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetUserColumnListReqMultiError is an error wrapping multiple validation
// errors returned by GetUserColumnListReq.ValidateAll() if the designated
// constraints aren't met.
type GetUserColumnListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserColumnListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserColumnListReqMultiError) AllErrors() []error { return m }

// GetUserColumnListReqValidationError is the validation error returned by
// GetUserColumnListReq.Validate if the designated constraints aren't met.
type GetUserColumnListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserColumnListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserColumnListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserColumnListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserColumnListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserColumnListReqValidationError) ErrorName() string {
	return "GetUserColumnListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserColumnListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserColumnListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserColumnListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserColumnListReqValidationError{}

// Validate checks the field values on GetUserColumnListVisitorReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserColumnListVisitorReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserColumnListVisitorReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserColumnListVisitorReqMultiError, or nil if none found.
func (m *GetUserColumnListVisitorReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserColumnListVisitorReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = GetUserColumnListVisitorReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserColumnListVisitorReqMultiError(errors)
	}

	return nil
}

func (m *GetUserColumnListVisitorReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetUserColumnListVisitorReqMultiError is an error wrapping multiple
// validation errors returned by GetUserColumnListVisitorReq.ValidateAll() if
// the designated constraints aren't met.
type GetUserColumnListVisitorReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserColumnListVisitorReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserColumnListVisitorReqMultiError) AllErrors() []error { return m }

// GetUserColumnListVisitorReqValidationError is the validation error returned
// by GetUserColumnListVisitorReq.Validate if the designated constraints
// aren't met.
type GetUserColumnListVisitorReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserColumnListVisitorReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserColumnListVisitorReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserColumnListVisitorReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserColumnListVisitorReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserColumnListVisitorReqValidationError) ErrorName() string {
	return "GetUserColumnListVisitorReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserColumnListVisitorReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserColumnListVisitorReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserColumnListVisitorReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserColumnListVisitorReqValidationError{}

// Validate checks the field values on GetColumnArticleListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColumnArticleListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnArticleListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnArticleListReqMultiError, or nil if none found.
func (m *GetColumnArticleListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnArticleListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetColumnArticleListReqMultiError(errors)
	}

	return nil
}

// GetColumnArticleListReqMultiError is an error wrapping multiple validation
// errors returned by GetColumnArticleListReq.ValidateAll() if the designated
// constraints aren't met.
type GetColumnArticleListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnArticleListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnArticleListReqMultiError) AllErrors() []error { return m }

// GetColumnArticleListReqValidationError is the validation error returned by
// GetColumnArticleListReq.Validate if the designated constraints aren't met.
type GetColumnArticleListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnArticleListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnArticleListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnArticleListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnArticleListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnArticleListReqValidationError) ErrorName() string {
	return "GetColumnArticleListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnArticleListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnArticleListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnArticleListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnArticleListReqValidationError{}

// Validate checks the field values on GetColumnCountReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetColumnCountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnCountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnCountReqMultiError, or nil if none found.
func (m *GetColumnCountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnCountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = GetColumnCountReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetColumnCountReqMultiError(errors)
	}

	return nil
}

func (m *GetColumnCountReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetColumnCountReqMultiError is an error wrapping multiple validation errors
// returned by GetColumnCountReq.ValidateAll() if the designated constraints
// aren't met.
type GetColumnCountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnCountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnCountReqMultiError) AllErrors() []error { return m }

// GetColumnCountReqValidationError is the validation error returned by
// GetColumnCountReq.Validate if the designated constraints aren't met.
type GetColumnCountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnCountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnCountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnCountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnCountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnCountReqValidationError) ErrorName() string {
	return "GetColumnCountReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnCountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnCountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnCountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnCountReqValidationError{}

// Validate checks the field values on GetColumnCountVisitorReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColumnCountVisitorReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnCountVisitorReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnCountVisitorReqMultiError, or nil if none found.
func (m *GetColumnCountVisitorReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnCountVisitorReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = GetColumnCountVisitorReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetColumnCountVisitorReqMultiError(errors)
	}

	return nil
}

func (m *GetColumnCountVisitorReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetColumnCountVisitorReqMultiError is an error wrapping multiple validation
// errors returned by GetColumnCountVisitorReq.ValidateAll() if the designated
// constraints aren't met.
type GetColumnCountVisitorReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnCountVisitorReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnCountVisitorReqMultiError) AllErrors() []error { return m }

// GetColumnCountVisitorReqValidationError is the validation error returned by
// GetColumnCountVisitorReq.Validate if the designated constraints aren't met.
type GetColumnCountVisitorReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnCountVisitorReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnCountVisitorReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnCountVisitorReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnCountVisitorReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnCountVisitorReqValidationError) ErrorName() string {
	return "GetColumnCountVisitorReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnCountVisitorReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnCountVisitorReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnCountVisitorReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnCountVisitorReqValidationError{}

// Validate checks the field values on GetColumnCountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColumnCountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnCountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnCountReplyMultiError, or nil if none found.
func (m *GetColumnCountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnCountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return GetColumnCountReplyMultiError(errors)
	}

	return nil
}

// GetColumnCountReplyMultiError is an error wrapping multiple validation
// errors returned by GetColumnCountReply.ValidateAll() if the designated
// constraints aren't met.
type GetColumnCountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnCountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnCountReplyMultiError) AllErrors() []error { return m }

// GetColumnCountReplyValidationError is the validation error returned by
// GetColumnCountReply.Validate if the designated constraints aren't met.
type GetColumnCountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnCountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnCountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnCountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnCountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnCountReplyValidationError) ErrorName() string {
	return "GetColumnCountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnCountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnCountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnCountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnCountReplyValidationError{}

// Validate checks the field values on GetSubscribeListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubscribeListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubscribeListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubscribeListReqMultiError, or nil if none found.
func (m *GetSubscribeListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubscribeListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetSubscribeListReqMultiError(errors)
	}

	return nil
}

// GetSubscribeListReqMultiError is an error wrapping multiple validation
// errors returned by GetSubscribeListReq.ValidateAll() if the designated
// constraints aren't met.
type GetSubscribeListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubscribeListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubscribeListReqMultiError) AllErrors() []error { return m }

// GetSubscribeListReqValidationError is the validation error returned by
// GetSubscribeListReq.Validate if the designated constraints aren't met.
type GetSubscribeListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubscribeListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubscribeListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubscribeListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubscribeListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubscribeListReqValidationError) ErrorName() string {
	return "GetSubscribeListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubscribeListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubscribeListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubscribeListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubscribeListReqValidationError{}

// Validate checks the field values on GetSubscribeListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubscribeListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubscribeListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubscribeListReplyMultiError, or nil if none found.
func (m *GetSubscribeListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubscribeListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSubscribe() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSubscribeListReplyValidationError{
						field:  fmt.Sprintf("Subscribe[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSubscribeListReplyValidationError{
						field:  fmt.Sprintf("Subscribe[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSubscribeListReplyValidationError{
					field:  fmt.Sprintf("Subscribe[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSubscribeListReplyMultiError(errors)
	}

	return nil
}

// GetSubscribeListReplyMultiError is an error wrapping multiple validation
// errors returned by GetSubscribeListReply.ValidateAll() if the designated
// constraints aren't met.
type GetSubscribeListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubscribeListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubscribeListReplyMultiError) AllErrors() []error { return m }

// GetSubscribeListReplyValidationError is the validation error returned by
// GetSubscribeListReply.Validate if the designated constraints aren't met.
type GetSubscribeListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubscribeListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubscribeListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubscribeListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubscribeListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubscribeListReplyValidationError) ErrorName() string {
	return "GetSubscribeListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubscribeListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubscribeListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubscribeListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubscribeListReplyValidationError{}

// Validate checks the field values on GetSubscribeListCountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubscribeListCountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubscribeListCountReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubscribeListCountReqMultiError, or nil if none found.
func (m *GetSubscribeListCountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubscribeListCountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetSubscribeListCountReqMultiError(errors)
	}

	return nil
}

// GetSubscribeListCountReqMultiError is an error wrapping multiple validation
// errors returned by GetSubscribeListCountReq.ValidateAll() if the designated
// constraints aren't met.
type GetSubscribeListCountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubscribeListCountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubscribeListCountReqMultiError) AllErrors() []error { return m }

// GetSubscribeListCountReqValidationError is the validation error returned by
// GetSubscribeListCountReq.Validate if the designated constraints aren't met.
type GetSubscribeListCountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubscribeListCountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubscribeListCountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubscribeListCountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubscribeListCountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubscribeListCountReqValidationError) ErrorName() string {
	return "GetSubscribeListCountReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubscribeListCountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubscribeListCountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubscribeListCountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubscribeListCountReqValidationError{}

// Validate checks the field values on GetSubscribeListCountReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubscribeListCountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubscribeListCountReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubscribeListCountReplyMultiError, or nil if none found.
func (m *GetSubscribeListCountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubscribeListCountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return GetSubscribeListCountReplyMultiError(errors)
	}

	return nil
}

// GetSubscribeListCountReplyMultiError is an error wrapping multiple
// validation errors returned by GetSubscribeListCountReply.ValidateAll() if
// the designated constraints aren't met.
type GetSubscribeListCountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubscribeListCountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubscribeListCountReplyMultiError) AllErrors() []error { return m }

// GetSubscribeListCountReplyValidationError is the validation error returned
// by GetSubscribeListCountReply.Validate if the designated constraints aren't met.
type GetSubscribeListCountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubscribeListCountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubscribeListCountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubscribeListCountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubscribeListCountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubscribeListCountReplyValidationError) ErrorName() string {
	return "GetSubscribeListCountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubscribeListCountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubscribeListCountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubscribeListCountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubscribeListCountReplyValidationError{}

// Validate checks the field values on GetColumnSubscribesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColumnSubscribesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnSubscribesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnSubscribesReqMultiError, or nil if none found.
func (m *GetColumnSubscribesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnSubscribesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = GetColumnSubscribesReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetColumnSubscribesReqMultiError(errors)
	}

	return nil
}

func (m *GetColumnSubscribesReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetColumnSubscribesReqMultiError is an error wrapping multiple validation
// errors returned by GetColumnSubscribesReq.ValidateAll() if the designated
// constraints aren't met.
type GetColumnSubscribesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnSubscribesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnSubscribesReqMultiError) AllErrors() []error { return m }

// GetColumnSubscribesReqValidationError is the validation error returned by
// GetColumnSubscribesReq.Validate if the designated constraints aren't met.
type GetColumnSubscribesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnSubscribesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnSubscribesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnSubscribesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnSubscribesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnSubscribesReqValidationError) ErrorName() string {
	return "GetColumnSubscribesReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnSubscribesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnSubscribesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnSubscribesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnSubscribesReqValidationError{}

// Validate checks the field values on GetColumnSubscribesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColumnSubscribesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnSubscribesReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnSubscribesReplyMultiError, or nil if none found.
func (m *GetColumnSubscribesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnSubscribesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSubscribes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetColumnSubscribesReplyValidationError{
						field:  fmt.Sprintf("Subscribes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetColumnSubscribesReplyValidationError{
						field:  fmt.Sprintf("Subscribes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetColumnSubscribesReplyValidationError{
					field:  fmt.Sprintf("Subscribes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetColumnSubscribesReplyMultiError(errors)
	}

	return nil
}

// GetColumnSubscribesReplyMultiError is an error wrapping multiple validation
// errors returned by GetColumnSubscribesReply.ValidateAll() if the designated
// constraints aren't met.
type GetColumnSubscribesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnSubscribesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnSubscribesReplyMultiError) AllErrors() []error { return m }

// GetColumnSubscribesReplyValidationError is the validation error returned by
// GetColumnSubscribesReply.Validate if the designated constraints aren't met.
type GetColumnSubscribesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnSubscribesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnSubscribesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnSubscribesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnSubscribesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnSubscribesReplyValidationError) ErrorName() string {
	return "GetColumnSubscribesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnSubscribesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnSubscribesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnSubscribesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnSubscribesReplyValidationError{}

// Validate checks the field values on SendColumnEditReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendColumnEditReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendColumnEditReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendColumnEditReqMultiError, or nil if none found.
func (m *SendColumnEditReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendColumnEditReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = SendColumnEditReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if ip := net.ParseIP(m.GetIp()); ip == nil {
		err := SendColumnEditReqValidationError{
			field:  "Ip",
			reason: "value must be a valid IP address",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendColumnEditReqMultiError(errors)
	}

	return nil
}

func (m *SendColumnEditReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SendColumnEditReqMultiError is an error wrapping multiple validation errors
// returned by SendColumnEditReq.ValidateAll() if the designated constraints
// aren't met.
type SendColumnEditReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendColumnEditReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendColumnEditReqMultiError) AllErrors() []error { return m }

// SendColumnEditReqValidationError is the validation error returned by
// SendColumnEditReq.Validate if the designated constraints aren't met.
type SendColumnEditReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendColumnEditReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendColumnEditReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendColumnEditReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendColumnEditReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendColumnEditReqValidationError) ErrorName() string {
	return "SendColumnEditReqValidationError"
}

// Error satisfies the builtin error interface
func (e SendColumnEditReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendColumnEditReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendColumnEditReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendColumnEditReqValidationError{}

// Validate checks the field values on EditColumnReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EditColumnReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditColumnReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EditColumnReqMultiError, or
// nil if none found.
func (m *EditColumnReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EditColumnReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Auth

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = EditColumnReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EditColumnReqMultiError(errors)
	}

	return nil
}

func (m *EditColumnReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// EditColumnReqMultiError is an error wrapping multiple validation errors
// returned by EditColumnReq.ValidateAll() if the designated constraints
// aren't met.
type EditColumnReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditColumnReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditColumnReqMultiError) AllErrors() []error { return m }

// EditColumnReqValidationError is the validation error returned by
// EditColumnReq.Validate if the designated constraints aren't met.
type EditColumnReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditColumnReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditColumnReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditColumnReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditColumnReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditColumnReqValidationError) ErrorName() string { return "EditColumnReqValidationError" }

// Error satisfies the builtin error interface
func (e EditColumnReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditColumnReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditColumnReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditColumnReqValidationError{}

// Validate checks the field values on DeleteColumnReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteColumnReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteColumnReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteColumnReqMultiError, or nil if none found.
func (m *DeleteColumnReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteColumnReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = DeleteColumnReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteColumnReqMultiError(errors)
	}

	return nil
}

func (m *DeleteColumnReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteColumnReqMultiError is an error wrapping multiple validation errors
// returned by DeleteColumnReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteColumnReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteColumnReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteColumnReqMultiError) AllErrors() []error { return m }

// DeleteColumnReqValidationError is the validation error returned by
// DeleteColumnReq.Validate if the designated constraints aren't met.
type DeleteColumnReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteColumnReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteColumnReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteColumnReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteColumnReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteColumnReqValidationError) ErrorName() string { return "DeleteColumnReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteColumnReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteColumnReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteColumnReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteColumnReqValidationError{}

// Validate checks the field values on DeleteColumnCacheAndSearchReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteColumnCacheAndSearchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteColumnCacheAndSearchReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteColumnCacheAndSearchReqMultiError, or nil if none found.
func (m *DeleteColumnCacheAndSearchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteColumnCacheAndSearchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = DeleteColumnCacheAndSearchReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteColumnCacheAndSearchReqMultiError(errors)
	}

	return nil
}

func (m *DeleteColumnCacheAndSearchReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteColumnCacheAndSearchReqMultiError is an error wrapping multiple
// validation errors returned by DeleteColumnCacheAndSearchReq.ValidateAll()
// if the designated constraints aren't met.
type DeleteColumnCacheAndSearchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteColumnCacheAndSearchReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteColumnCacheAndSearchReqMultiError) AllErrors() []error { return m }

// DeleteColumnCacheAndSearchReqValidationError is the validation error
// returned by DeleteColumnCacheAndSearchReq.Validate if the designated
// constraints aren't met.
type DeleteColumnCacheAndSearchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteColumnCacheAndSearchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteColumnCacheAndSearchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteColumnCacheAndSearchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteColumnCacheAndSearchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteColumnCacheAndSearchReqValidationError) ErrorName() string {
	return "DeleteColumnCacheAndSearchReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteColumnCacheAndSearchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteColumnCacheAndSearchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteColumnCacheAndSearchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteColumnCacheAndSearchReqValidationError{}

// Validate checks the field values on ColumnStatisticJudgeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ColumnStatisticJudgeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ColumnStatisticJudgeReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ColumnStatisticJudgeReqMultiError, or nil if none found.
func (m *ColumnStatisticJudgeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ColumnStatisticJudgeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = ColumnStatisticJudgeReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ColumnStatisticJudgeReqMultiError(errors)
	}

	return nil
}

func (m *ColumnStatisticJudgeReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ColumnStatisticJudgeReqMultiError is an error wrapping multiple validation
// errors returned by ColumnStatisticJudgeReq.ValidateAll() if the designated
// constraints aren't met.
type ColumnStatisticJudgeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ColumnStatisticJudgeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ColumnStatisticJudgeReqMultiError) AllErrors() []error { return m }

// ColumnStatisticJudgeReqValidationError is the validation error returned by
// ColumnStatisticJudgeReq.Validate if the designated constraints aren't met.
type ColumnStatisticJudgeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ColumnStatisticJudgeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ColumnStatisticJudgeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ColumnStatisticJudgeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ColumnStatisticJudgeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ColumnStatisticJudgeReqValidationError) ErrorName() string {
	return "ColumnStatisticJudgeReqValidationError"
}

// Error satisfies the builtin error interface
func (e ColumnStatisticJudgeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sColumnStatisticJudgeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ColumnStatisticJudgeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ColumnStatisticJudgeReqValidationError{}

// Validate checks the field values on ColumnStatisticJudgeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ColumnStatisticJudgeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ColumnStatisticJudgeReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ColumnStatisticJudgeReplyMultiError, or nil if none found.
func (m *ColumnStatisticJudgeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ColumnStatisticJudgeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Agree

	// no validation rules for Collect

	if len(errors) > 0 {
		return ColumnStatisticJudgeReplyMultiError(errors)
	}

	return nil
}

// ColumnStatisticJudgeReplyMultiError is an error wrapping multiple validation
// errors returned by ColumnStatisticJudgeReply.ValidateAll() if the
// designated constraints aren't met.
type ColumnStatisticJudgeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ColumnStatisticJudgeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ColumnStatisticJudgeReplyMultiError) AllErrors() []error { return m }

// ColumnStatisticJudgeReplyValidationError is the validation error returned by
// ColumnStatisticJudgeReply.Validate if the designated constraints aren't met.
type ColumnStatisticJudgeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ColumnStatisticJudgeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ColumnStatisticJudgeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ColumnStatisticJudgeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ColumnStatisticJudgeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ColumnStatisticJudgeReplyValidationError) ErrorName() string {
	return "ColumnStatisticJudgeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ColumnStatisticJudgeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sColumnStatisticJudgeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ColumnStatisticJudgeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ColumnStatisticJudgeReplyValidationError{}

// Validate checks the field values on SetColumnAgreeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetColumnAgreeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetColumnAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetColumnAgreeReqMultiError, or nil if none found.
func (m *SetColumnAgreeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetColumnAgreeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = SetColumnAgreeReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserUuid()); err != nil {
		err = SetColumnAgreeReqValidationError{
			field:  "UserUuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetColumnAgreeReqMultiError(errors)
	}

	return nil
}

func (m *SetColumnAgreeReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SetColumnAgreeReqMultiError is an error wrapping multiple validation errors
// returned by SetColumnAgreeReq.ValidateAll() if the designated constraints
// aren't met.
type SetColumnAgreeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetColumnAgreeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetColumnAgreeReqMultiError) AllErrors() []error { return m }

// SetColumnAgreeReqValidationError is the validation error returned by
// SetColumnAgreeReq.Validate if the designated constraints aren't met.
type SetColumnAgreeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetColumnAgreeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetColumnAgreeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetColumnAgreeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetColumnAgreeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetColumnAgreeReqValidationError) ErrorName() string {
	return "SetColumnAgreeReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetColumnAgreeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetColumnAgreeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetColumnAgreeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetColumnAgreeReqValidationError{}

// Validate checks the field values on CancelColumnAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelColumnAgreeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelColumnAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelColumnAgreeReqMultiError, or nil if none found.
func (m *CancelColumnAgreeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelColumnAgreeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = CancelColumnAgreeReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserUuid()); err != nil {
		err = CancelColumnAgreeReqValidationError{
			field:  "UserUuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelColumnAgreeReqMultiError(errors)
	}

	return nil
}

func (m *CancelColumnAgreeReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CancelColumnAgreeReqMultiError is an error wrapping multiple validation
// errors returned by CancelColumnAgreeReq.ValidateAll() if the designated
// constraints aren't met.
type CancelColumnAgreeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelColumnAgreeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelColumnAgreeReqMultiError) AllErrors() []error { return m }

// CancelColumnAgreeReqValidationError is the validation error returned by
// CancelColumnAgreeReq.Validate if the designated constraints aren't met.
type CancelColumnAgreeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelColumnAgreeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelColumnAgreeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelColumnAgreeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelColumnAgreeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelColumnAgreeReqValidationError) ErrorName() string {
	return "CancelColumnAgreeReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelColumnAgreeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelColumnAgreeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelColumnAgreeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelColumnAgreeReqValidationError{}

// Validate checks the field values on SetColumnCollectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetColumnCollectReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetColumnCollectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetColumnCollectReqMultiError, or nil if none found.
func (m *SetColumnCollectReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetColumnCollectReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CollectionsId

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = SetColumnCollectReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserUuid()); err != nil {
		err = SetColumnCollectReqValidationError{
			field:  "UserUuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetColumnCollectReqMultiError(errors)
	}

	return nil
}

func (m *SetColumnCollectReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SetColumnCollectReqMultiError is an error wrapping multiple validation
// errors returned by SetColumnCollectReq.ValidateAll() if the designated
// constraints aren't met.
type SetColumnCollectReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetColumnCollectReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetColumnCollectReqMultiError) AllErrors() []error { return m }

// SetColumnCollectReqValidationError is the validation error returned by
// SetColumnCollectReq.Validate if the designated constraints aren't met.
type SetColumnCollectReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetColumnCollectReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetColumnCollectReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetColumnCollectReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetColumnCollectReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetColumnCollectReqValidationError) ErrorName() string {
	return "SetColumnCollectReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetColumnCollectReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetColumnCollectReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetColumnCollectReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetColumnCollectReqValidationError{}

// Validate checks the field values on CancelColumnCollectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelColumnCollectReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelColumnCollectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelColumnCollectReqMultiError, or nil if none found.
func (m *CancelColumnCollectReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelColumnCollectReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = CancelColumnCollectReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserUuid()); err != nil {
		err = CancelColumnCollectReqValidationError{
			field:  "UserUuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelColumnCollectReqMultiError(errors)
	}

	return nil
}

func (m *CancelColumnCollectReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CancelColumnCollectReqMultiError is an error wrapping multiple validation
// errors returned by CancelColumnCollectReq.ValidateAll() if the designated
// constraints aren't met.
type CancelColumnCollectReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelColumnCollectReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelColumnCollectReqMultiError) AllErrors() []error { return m }

// CancelColumnCollectReqValidationError is the validation error returned by
// CancelColumnCollectReq.Validate if the designated constraints aren't met.
type CancelColumnCollectReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelColumnCollectReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelColumnCollectReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelColumnCollectReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelColumnCollectReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelColumnCollectReqValidationError) ErrorName() string {
	return "CancelColumnCollectReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelColumnCollectReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelColumnCollectReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelColumnCollectReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelColumnCollectReqValidationError{}

// Validate checks the field values on SetColumnViewReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetColumnViewReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetColumnViewReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetColumnViewReqMultiError, or nil if none found.
func (m *SetColumnViewReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetColumnViewReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = SetColumnViewReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetColumnViewReqMultiError(errors)
	}

	return nil
}

func (m *SetColumnViewReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SetColumnViewReqMultiError is an error wrapping multiple validation errors
// returned by SetColumnViewReq.ValidateAll() if the designated constraints
// aren't met.
type SetColumnViewReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetColumnViewReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetColumnViewReqMultiError) AllErrors() []error { return m }

// SetColumnViewReqValidationError is the validation error returned by
// SetColumnViewReq.Validate if the designated constraints aren't met.
type SetColumnViewReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetColumnViewReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetColumnViewReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetColumnViewReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetColumnViewReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetColumnViewReqValidationError) ErrorName() string { return "SetColumnViewReqValidationError" }

// Error satisfies the builtin error interface
func (e SetColumnViewReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetColumnViewReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetColumnViewReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetColumnViewReqValidationError{}

// Validate checks the field values on AddColumnIncludesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddColumnIncludesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddColumnIncludesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddColumnIncludesReqMultiError, or nil if none found.
func (m *AddColumnIncludesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddColumnIncludesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ArticleId

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = AddColumnIncludesReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddColumnIncludesReqMultiError(errors)
	}

	return nil
}

func (m *AddColumnIncludesReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AddColumnIncludesReqMultiError is an error wrapping multiple validation
// errors returned by AddColumnIncludesReq.ValidateAll() if the designated
// constraints aren't met.
type AddColumnIncludesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddColumnIncludesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddColumnIncludesReqMultiError) AllErrors() []error { return m }

// AddColumnIncludesReqValidationError is the validation error returned by
// AddColumnIncludesReq.Validate if the designated constraints aren't met.
type AddColumnIncludesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddColumnIncludesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddColumnIncludesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddColumnIncludesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddColumnIncludesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddColumnIncludesReqValidationError) ErrorName() string {
	return "AddColumnIncludesReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddColumnIncludesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddColumnIncludesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddColumnIncludesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddColumnIncludesReqValidationError{}

// Validate checks the field values on DeleteColumnIncludesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteColumnIncludesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteColumnIncludesReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteColumnIncludesReqMultiError, or nil if none found.
func (m *DeleteColumnIncludesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteColumnIncludesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ArticleId

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = DeleteColumnIncludesReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteColumnIncludesReqMultiError(errors)
	}

	return nil
}

func (m *DeleteColumnIncludesReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteColumnIncludesReqMultiError is an error wrapping multiple validation
// errors returned by DeleteColumnIncludesReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteColumnIncludesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteColumnIncludesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteColumnIncludesReqMultiError) AllErrors() []error { return m }

// DeleteColumnIncludesReqValidationError is the validation error returned by
// DeleteColumnIncludesReq.Validate if the designated constraints aren't met.
type DeleteColumnIncludesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteColumnIncludesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteColumnIncludesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteColumnIncludesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteColumnIncludesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteColumnIncludesReqValidationError) ErrorName() string {
	return "DeleteColumnIncludesReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteColumnIncludesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteColumnIncludesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteColumnIncludesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteColumnIncludesReqValidationError{}

// Validate checks the field values on GetNewsReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetNewsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNewsReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetNewsReqMultiError, or
// nil if none found.
func (m *GetNewsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNewsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if len(errors) > 0 {
		return GetNewsReqMultiError(errors)
	}

	return nil
}

// GetNewsReqMultiError is an error wrapping multiple validation errors
// returned by GetNewsReq.ValidateAll() if the designated constraints aren't met.
type GetNewsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNewsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNewsReqMultiError) AllErrors() []error { return m }

// GetNewsReqValidationError is the validation error returned by
// GetNewsReq.Validate if the designated constraints aren't met.
type GetNewsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNewsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNewsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNewsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNewsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNewsReqValidationError) ErrorName() string { return "GetNewsReqValidationError" }

// Error satisfies the builtin error interface
func (e GetNewsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNewsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNewsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNewsReqValidationError{}

// Validate checks the field values on GetNewsReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetNewsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNewsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetNewsReplyMultiError, or
// nil if none found.
func (m *GetNewsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNewsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNews() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNewsReplyValidationError{
						field:  fmt.Sprintf("News[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNewsReplyValidationError{
						field:  fmt.Sprintf("News[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNewsReplyValidationError{
					field:  fmt.Sprintf("News[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetNewsReplyMultiError(errors)
	}

	return nil
}

// GetNewsReplyMultiError is an error wrapping multiple validation errors
// returned by GetNewsReply.ValidateAll() if the designated constraints aren't met.
type GetNewsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNewsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNewsReplyMultiError) AllErrors() []error { return m }

// GetNewsReplyValidationError is the validation error returned by
// GetNewsReply.Validate if the designated constraints aren't met.
type GetNewsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNewsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNewsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNewsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNewsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNewsReplyValidationError) ErrorName() string { return "GetNewsReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetNewsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNewsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNewsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNewsReplyValidationError{}

// Validate checks the field values on AddCreationCommentReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddCreationCommentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCreationCommentReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddCreationCommentReqMultiError, or nil if none found.
func (m *AddCreationCommentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCreationCommentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreationId

	// no validation rules for CreationType

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = AddCreationCommentReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddCreationCommentReqMultiError(errors)
	}

	return nil
}

func (m *AddCreationCommentReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AddCreationCommentReqMultiError is an error wrapping multiple validation
// errors returned by AddCreationCommentReq.ValidateAll() if the designated
// constraints aren't met.
type AddCreationCommentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCreationCommentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCreationCommentReqMultiError) AllErrors() []error { return m }

// AddCreationCommentReqValidationError is the validation error returned by
// AddCreationCommentReq.Validate if the designated constraints aren't met.
type AddCreationCommentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCreationCommentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCreationCommentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCreationCommentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCreationCommentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCreationCommentReqValidationError) ErrorName() string {
	return "AddCreationCommentReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddCreationCommentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCreationCommentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCreationCommentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCreationCommentReqValidationError{}

// Validate checks the field values on ReduceCreationCommentReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReduceCreationCommentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReduceCreationCommentReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReduceCreationCommentReqMultiError, or nil if none found.
func (m *ReduceCreationCommentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ReduceCreationCommentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreationId

	// no validation rules for CreationType

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = ReduceCreationCommentReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReduceCreationCommentReqMultiError(errors)
	}

	return nil
}

func (m *ReduceCreationCommentReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ReduceCreationCommentReqMultiError is an error wrapping multiple validation
// errors returned by ReduceCreationCommentReq.ValidateAll() if the designated
// constraints aren't met.
type ReduceCreationCommentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReduceCreationCommentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReduceCreationCommentReqMultiError) AllErrors() []error { return m }

// ReduceCreationCommentReqValidationError is the validation error returned by
// ReduceCreationCommentReq.Validate if the designated constraints aren't met.
type ReduceCreationCommentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReduceCreationCommentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReduceCreationCommentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReduceCreationCommentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReduceCreationCommentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReduceCreationCommentReqValidationError) ErrorName() string {
	return "ReduceCreationCommentReqValidationError"
}

// Error satisfies the builtin error interface
func (e ReduceCreationCommentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReduceCreationCommentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReduceCreationCommentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReduceCreationCommentReqValidationError{}

// Validate checks the field values on GetLeaderBoardReply_Board with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLeaderBoardReply_Board) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLeaderBoardReply_Board with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLeaderBoardReply_BoardMultiError, or nil if none found.
func (m *GetLeaderBoardReply_Board) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLeaderBoardReply_Board) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	// no validation rules for Mode

	if len(errors) > 0 {
		return GetLeaderBoardReply_BoardMultiError(errors)
	}

	return nil
}

// GetLeaderBoardReply_BoardMultiError is an error wrapping multiple validation
// errors returned by GetLeaderBoardReply_Board.ValidateAll() if the
// designated constraints aren't met.
type GetLeaderBoardReply_BoardMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLeaderBoardReply_BoardMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLeaderBoardReply_BoardMultiError) AllErrors() []error { return m }

// GetLeaderBoardReply_BoardValidationError is the validation error returned by
// GetLeaderBoardReply_Board.Validate if the designated constraints aren't met.
type GetLeaderBoardReply_BoardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLeaderBoardReply_BoardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLeaderBoardReply_BoardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLeaderBoardReply_BoardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLeaderBoardReply_BoardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLeaderBoardReply_BoardValidationError) ErrorName() string {
	return "GetLeaderBoardReply_BoardValidationError"
}

// Error satisfies the builtin error interface
func (e GetLeaderBoardReply_BoardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLeaderBoardReply_Board.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLeaderBoardReply_BoardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLeaderBoardReply_BoardValidationError{}

// Validate checks the field values on GetCollectionsReply_Collections with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionsReply_Collections) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionsReply_Collections with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCollectionsReply_CollectionsMultiError, or nil if none found.
func (m *GetCollectionsReply_Collections) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionsReply_Collections) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Introduce

	if len(errors) > 0 {
		return GetCollectionsReply_CollectionsMultiError(errors)
	}

	return nil
}

// GetCollectionsReply_CollectionsMultiError is an error wrapping multiple
// validation errors returned by GetCollectionsReply_Collections.ValidateAll()
// if the designated constraints aren't met.
type GetCollectionsReply_CollectionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionsReply_CollectionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionsReply_CollectionsMultiError) AllErrors() []error { return m }

// GetCollectionsReply_CollectionsValidationError is the validation error
// returned by GetCollectionsReply_Collections.Validate if the designated
// constraints aren't met.
type GetCollectionsReply_CollectionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionsReply_CollectionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionsReply_CollectionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionsReply_CollectionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionsReply_CollectionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionsReply_CollectionsValidationError) ErrorName() string {
	return "GetCollectionsReply_CollectionsValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionsReply_CollectionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionsReply_Collections.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionsReply_CollectionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionsReply_CollectionsValidationError{}

// Validate checks the field values on GetArticleListReply_Article with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListReply_Article) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListReply_Article with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleListReply_ArticleMultiError, or nil if none found.
func (m *GetArticleListReply_Article) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListReply_Article) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetArticleListReply_ArticleMultiError(errors)
	}

	return nil
}

// GetArticleListReply_ArticleMultiError is an error wrapping multiple
// validation errors returned by GetArticleListReply_Article.ValidateAll() if
// the designated constraints aren't met.
type GetArticleListReply_ArticleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListReply_ArticleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListReply_ArticleMultiError) AllErrors() []error { return m }

// GetArticleListReply_ArticleValidationError is the validation error returned
// by GetArticleListReply_Article.Validate if the designated constraints
// aren't met.
type GetArticleListReply_ArticleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListReply_ArticleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListReply_ArticleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListReply_ArticleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListReply_ArticleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListReply_ArticleValidationError) ErrorName() string {
	return "GetArticleListReply_ArticleValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListReply_ArticleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListReply_Article.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListReply_ArticleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListReply_ArticleValidationError{}

// Validate checks the field values on GetArticleListHotReply_Article with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListHotReply_Article) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListHotReply_Article with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetArticleListHotReply_ArticleMultiError, or nil if none found.
func (m *GetArticleListHotReply_Article) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListHotReply_Article) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetArticleListHotReply_ArticleMultiError(errors)
	}

	return nil
}

// GetArticleListHotReply_ArticleMultiError is an error wrapping multiple
// validation errors returned by GetArticleListHotReply_Article.ValidateAll()
// if the designated constraints aren't met.
type GetArticleListHotReply_ArticleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListHotReply_ArticleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListHotReply_ArticleMultiError) AllErrors() []error { return m }

// GetArticleListHotReply_ArticleValidationError is the validation error
// returned by GetArticleListHotReply_Article.Validate if the designated
// constraints aren't met.
type GetArticleListHotReply_ArticleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListHotReply_ArticleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListHotReply_ArticleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListHotReply_ArticleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListHotReply_ArticleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListHotReply_ArticleValidationError) ErrorName() string {
	return "GetArticleListHotReply_ArticleValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListHotReply_ArticleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListHotReply_Article.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListHotReply_ArticleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListHotReply_ArticleValidationError{}

// Validate checks the field values on GetArticleListStatisticReply_Count with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetArticleListStatisticReply_Count) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListStatisticReply_Count
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetArticleListStatisticReply_CountMultiError, or nil if none found.
func (m *GetArticleListStatisticReply_Count) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListStatisticReply_Count) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Agree

	// no validation rules for Collect

	// no validation rules for View

	// no validation rules for Comment

	if len(errors) > 0 {
		return GetArticleListStatisticReply_CountMultiError(errors)
	}

	return nil
}

// GetArticleListStatisticReply_CountMultiError is an error wrapping multiple
// validation errors returned by
// GetArticleListStatisticReply_Count.ValidateAll() if the designated
// constraints aren't met.
type GetArticleListStatisticReply_CountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListStatisticReply_CountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListStatisticReply_CountMultiError) AllErrors() []error { return m }

// GetArticleListStatisticReply_CountValidationError is the validation error
// returned by GetArticleListStatisticReply_Count.Validate if the designated
// constraints aren't met.
type GetArticleListStatisticReply_CountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListStatisticReply_CountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListStatisticReply_CountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListStatisticReply_CountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListStatisticReply_CountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListStatisticReply_CountValidationError) ErrorName() string {
	return "GetArticleListStatisticReply_CountValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListStatisticReply_CountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListStatisticReply_Count.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListStatisticReply_CountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListStatisticReply_CountValidationError{}

// Validate checks the field values on GetArticleSearchReply_List with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleSearchReply_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleSearchReply_List with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleSearchReply_ListMultiError, or nil if none found.
func (m *GetArticleSearchReply_List) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleSearchReply_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Tags

	// no validation rules for Text

	// no validation rules for Cover

	// no validation rules for Update

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetArticleSearchReply_ListMultiError(errors)
	}

	return nil
}

// GetArticleSearchReply_ListMultiError is an error wrapping multiple
// validation errors returned by GetArticleSearchReply_List.ValidateAll() if
// the designated constraints aren't met.
type GetArticleSearchReply_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleSearchReply_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleSearchReply_ListMultiError) AllErrors() []error { return m }

// GetArticleSearchReply_ListValidationError is the validation error returned
// by GetArticleSearchReply_List.Validate if the designated constraints aren't met.
type GetArticleSearchReply_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleSearchReply_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleSearchReply_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleSearchReply_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleSearchReply_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleSearchReply_ListValidationError) ErrorName() string {
	return "GetArticleSearchReply_ListValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleSearchReply_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleSearchReply_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleSearchReply_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleSearchReply_ListValidationError{}

// Validate checks the field values on GetArticleDraftListReply_Draft with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleDraftListReply_Draft) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleDraftListReply_Draft with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetArticleDraftListReply_DraftMultiError, or nil if none found.
func (m *GetArticleDraftListReply_Draft) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleDraftListReply_Draft) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetArticleDraftListReply_DraftMultiError(errors)
	}

	return nil
}

// GetArticleDraftListReply_DraftMultiError is an error wrapping multiple
// validation errors returned by GetArticleDraftListReply_Draft.ValidateAll()
// if the designated constraints aren't met.
type GetArticleDraftListReply_DraftMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleDraftListReply_DraftMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleDraftListReply_DraftMultiError) AllErrors() []error { return m }

// GetArticleDraftListReply_DraftValidationError is the validation error
// returned by GetArticleDraftListReply_Draft.Validate if the designated
// constraints aren't met.
type GetArticleDraftListReply_DraftValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleDraftListReply_DraftValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleDraftListReply_DraftValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleDraftListReply_DraftValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleDraftListReply_DraftValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleDraftListReply_DraftValidationError) ErrorName() string {
	return "GetArticleDraftListReply_DraftValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleDraftListReply_DraftValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleDraftListReply_Draft.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleDraftListReply_DraftValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleDraftListReply_DraftValidationError{}

// Validate checks the field values on GetTalkListReply_Talk with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTalkListReply_Talk) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTalkListReply_Talk with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTalkListReply_TalkMultiError, or nil if none found.
func (m *GetTalkListReply_Talk) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTalkListReply_Talk) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetTalkListReply_TalkMultiError(errors)
	}

	return nil
}

// GetTalkListReply_TalkMultiError is an error wrapping multiple validation
// errors returned by GetTalkListReply_Talk.ValidateAll() if the designated
// constraints aren't met.
type GetTalkListReply_TalkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTalkListReply_TalkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTalkListReply_TalkMultiError) AllErrors() []error { return m }

// GetTalkListReply_TalkValidationError is the validation error returned by
// GetTalkListReply_Talk.Validate if the designated constraints aren't met.
type GetTalkListReply_TalkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTalkListReply_TalkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTalkListReply_TalkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTalkListReply_TalkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTalkListReply_TalkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTalkListReply_TalkValidationError) ErrorName() string {
	return "GetTalkListReply_TalkValidationError"
}

// Error satisfies the builtin error interface
func (e GetTalkListReply_TalkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTalkListReply_Talk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTalkListReply_TalkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTalkListReply_TalkValidationError{}

// Validate checks the field values on GetTalkListHotReply_Talk with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTalkListHotReply_Talk) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTalkListHotReply_Talk with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTalkListHotReply_TalkMultiError, or nil if none found.
func (m *GetTalkListHotReply_Talk) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTalkListHotReply_Talk) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetTalkListHotReply_TalkMultiError(errors)
	}

	return nil
}

// GetTalkListHotReply_TalkMultiError is an error wrapping multiple validation
// errors returned by GetTalkListHotReply_Talk.ValidateAll() if the designated
// constraints aren't met.
type GetTalkListHotReply_TalkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTalkListHotReply_TalkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTalkListHotReply_TalkMultiError) AllErrors() []error { return m }

// GetTalkListHotReply_TalkValidationError is the validation error returned by
// GetTalkListHotReply_Talk.Validate if the designated constraints aren't met.
type GetTalkListHotReply_TalkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTalkListHotReply_TalkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTalkListHotReply_TalkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTalkListHotReply_TalkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTalkListHotReply_TalkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTalkListHotReply_TalkValidationError) ErrorName() string {
	return "GetTalkListHotReply_TalkValidationError"
}

// Error satisfies the builtin error interface
func (e GetTalkListHotReply_TalkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTalkListHotReply_Talk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTalkListHotReply_TalkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTalkListHotReply_TalkValidationError{}

// Validate checks the field values on GetTalkListStatisticReply_Count with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTalkListStatisticReply_Count) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTalkListStatisticReply_Count with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTalkListStatisticReply_CountMultiError, or nil if none found.
func (m *GetTalkListStatisticReply_Count) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTalkListStatisticReply_Count) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Agree

	// no validation rules for Collect

	// no validation rules for View

	// no validation rules for Comment

	if len(errors) > 0 {
		return GetTalkListStatisticReply_CountMultiError(errors)
	}

	return nil
}

// GetTalkListStatisticReply_CountMultiError is an error wrapping multiple
// validation errors returned by GetTalkListStatisticReply_Count.ValidateAll()
// if the designated constraints aren't met.
type GetTalkListStatisticReply_CountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTalkListStatisticReply_CountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTalkListStatisticReply_CountMultiError) AllErrors() []error { return m }

// GetTalkListStatisticReply_CountValidationError is the validation error
// returned by GetTalkListStatisticReply_Count.Validate if the designated
// constraints aren't met.
type GetTalkListStatisticReply_CountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTalkListStatisticReply_CountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTalkListStatisticReply_CountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTalkListStatisticReply_CountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTalkListStatisticReply_CountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTalkListStatisticReply_CountValidationError) ErrorName() string {
	return "GetTalkListStatisticReply_CountValidationError"
}

// Error satisfies the builtin error interface
func (e GetTalkListStatisticReply_CountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTalkListStatisticReply_Count.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTalkListStatisticReply_CountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTalkListStatisticReply_CountValidationError{}

// Validate checks the field values on GetTalkSearchReply_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTalkSearchReply_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTalkSearchReply_List with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTalkSearchReply_ListMultiError, or nil if none found.
func (m *GetTalkSearchReply_List) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTalkSearchReply_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Tags

	// no validation rules for Text

	// no validation rules for Cover

	// no validation rules for Update

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetTalkSearchReply_ListMultiError(errors)
	}

	return nil
}

// GetTalkSearchReply_ListMultiError is an error wrapping multiple validation
// errors returned by GetTalkSearchReply_List.ValidateAll() if the designated
// constraints aren't met.
type GetTalkSearchReply_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTalkSearchReply_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTalkSearchReply_ListMultiError) AllErrors() []error { return m }

// GetTalkSearchReply_ListValidationError is the validation error returned by
// GetTalkSearchReply_List.Validate if the designated constraints aren't met.
type GetTalkSearchReply_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTalkSearchReply_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTalkSearchReply_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTalkSearchReply_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTalkSearchReply_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTalkSearchReply_ListValidationError) ErrorName() string {
	return "GetTalkSearchReply_ListValidationError"
}

// Error satisfies the builtin error interface
func (e GetTalkSearchReply_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTalkSearchReply_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTalkSearchReply_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTalkSearchReply_ListValidationError{}

// Validate checks the field values on GetColumnSearchReply_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColumnSearchReply_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnSearchReply_List with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnSearchReply_ListMultiError, or nil if none found.
func (m *GetColumnSearchReply_List) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnSearchReply_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Tags

	// no validation rules for Introduce

	// no validation rules for Cover

	// no validation rules for Update

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetColumnSearchReply_ListMultiError(errors)
	}

	return nil
}

// GetColumnSearchReply_ListMultiError is an error wrapping multiple validation
// errors returned by GetColumnSearchReply_List.ValidateAll() if the
// designated constraints aren't met.
type GetColumnSearchReply_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnSearchReply_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnSearchReply_ListMultiError) AllErrors() []error { return m }

// GetColumnSearchReply_ListValidationError is the validation error returned by
// GetColumnSearchReply_List.Validate if the designated constraints aren't met.
type GetColumnSearchReply_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnSearchReply_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnSearchReply_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnSearchReply_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnSearchReply_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnSearchReply_ListValidationError) ErrorName() string {
	return "GetColumnSearchReply_ListValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnSearchReply_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnSearchReply_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnSearchReply_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnSearchReply_ListValidationError{}

// Validate checks the field values on GetColumnListReply_Column with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColumnListReply_Column) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnListReply_Column with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnListReply_ColumnMultiError, or nil if none found.
func (m *GetColumnListReply_Column) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnListReply_Column) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetColumnListReply_ColumnMultiError(errors)
	}

	return nil
}

// GetColumnListReply_ColumnMultiError is an error wrapping multiple validation
// errors returned by GetColumnListReply_Column.ValidateAll() if the
// designated constraints aren't met.
type GetColumnListReply_ColumnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnListReply_ColumnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnListReply_ColumnMultiError) AllErrors() []error { return m }

// GetColumnListReply_ColumnValidationError is the validation error returned by
// GetColumnListReply_Column.Validate if the designated constraints aren't met.
type GetColumnListReply_ColumnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnListReply_ColumnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnListReply_ColumnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnListReply_ColumnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnListReply_ColumnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnListReply_ColumnValidationError) ErrorName() string {
	return "GetColumnListReply_ColumnValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnListReply_ColumnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnListReply_Column.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnListReply_ColumnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnListReply_ColumnValidationError{}

// Validate checks the field values on GetColumnListHotReply_Column with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColumnListHotReply_Column) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnListHotReply_Column with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnListHotReply_ColumnMultiError, or nil if none found.
func (m *GetColumnListHotReply_Column) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnListHotReply_Column) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetColumnListHotReply_ColumnMultiError(errors)
	}

	return nil
}

// GetColumnListHotReply_ColumnMultiError is an error wrapping multiple
// validation errors returned by GetColumnListHotReply_Column.ValidateAll() if
// the designated constraints aren't met.
type GetColumnListHotReply_ColumnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnListHotReply_ColumnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnListHotReply_ColumnMultiError) AllErrors() []error { return m }

// GetColumnListHotReply_ColumnValidationError is the validation error returned
// by GetColumnListHotReply_Column.Validate if the designated constraints
// aren't met.
type GetColumnListHotReply_ColumnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnListHotReply_ColumnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnListHotReply_ColumnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnListHotReply_ColumnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnListHotReply_ColumnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnListHotReply_ColumnValidationError) ErrorName() string {
	return "GetColumnListHotReply_ColumnValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnListHotReply_ColumnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnListHotReply_Column.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnListHotReply_ColumnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnListHotReply_ColumnValidationError{}

// Validate checks the field values on GetColumnListStatisticReply_Count with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetColumnListStatisticReply_Count) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnListStatisticReply_Count
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetColumnListStatisticReply_CountMultiError, or nil if none found.
func (m *GetColumnListStatisticReply_Count) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnListStatisticReply_Count) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Agree

	// no validation rules for Collect

	// no validation rules for View

	if len(errors) > 0 {
		return GetColumnListStatisticReply_CountMultiError(errors)
	}

	return nil
}

// GetColumnListStatisticReply_CountMultiError is an error wrapping multiple
// validation errors returned by
// GetColumnListStatisticReply_Count.ValidateAll() if the designated
// constraints aren't met.
type GetColumnListStatisticReply_CountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnListStatisticReply_CountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnListStatisticReply_CountMultiError) AllErrors() []error { return m }

// GetColumnListStatisticReply_CountValidationError is the validation error
// returned by GetColumnListStatisticReply_Count.Validate if the designated
// constraints aren't met.
type GetColumnListStatisticReply_CountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnListStatisticReply_CountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnListStatisticReply_CountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnListStatisticReply_CountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnListStatisticReply_CountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnListStatisticReply_CountValidationError) ErrorName() string {
	return "GetColumnListStatisticReply_CountValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnListStatisticReply_CountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnListStatisticReply_Count.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnListStatisticReply_CountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnListStatisticReply_CountValidationError{}

// Validate checks the field values on GetSubscribeListReply_Subscribe with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubscribeListReply_Subscribe) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubscribeListReply_Subscribe with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetSubscribeListReply_SubscribeMultiError, or nil if none found.
func (m *GetSubscribeListReply_Subscribe) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubscribeListReply_Subscribe) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetSubscribeListReply_SubscribeMultiError(errors)
	}

	return nil
}

// GetSubscribeListReply_SubscribeMultiError is an error wrapping multiple
// validation errors returned by GetSubscribeListReply_Subscribe.ValidateAll()
// if the designated constraints aren't met.
type GetSubscribeListReply_SubscribeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubscribeListReply_SubscribeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubscribeListReply_SubscribeMultiError) AllErrors() []error { return m }

// GetSubscribeListReply_SubscribeValidationError is the validation error
// returned by GetSubscribeListReply_Subscribe.Validate if the designated
// constraints aren't met.
type GetSubscribeListReply_SubscribeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubscribeListReply_SubscribeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubscribeListReply_SubscribeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubscribeListReply_SubscribeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubscribeListReply_SubscribeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubscribeListReply_SubscribeValidationError) ErrorName() string {
	return "GetSubscribeListReply_SubscribeValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubscribeListReply_SubscribeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubscribeListReply_Subscribe.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubscribeListReply_SubscribeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubscribeListReply_SubscribeValidationError{}

// Validate checks the field values on GetColumnSubscribesReply_Subscribes with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetColumnSubscribesReply_Subscribes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnSubscribesReply_Subscribes
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetColumnSubscribesReply_SubscribesMultiError, or nil if none found.
func (m *GetColumnSubscribesReply_Subscribes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnSubscribesReply_Subscribes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SubscribeJudge

	if len(errors) > 0 {
		return GetColumnSubscribesReply_SubscribesMultiError(errors)
	}

	return nil
}

// GetColumnSubscribesReply_SubscribesMultiError is an error wrapping multiple
// validation errors returned by
// GetColumnSubscribesReply_Subscribes.ValidateAll() if the designated
// constraints aren't met.
type GetColumnSubscribesReply_SubscribesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnSubscribesReply_SubscribesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnSubscribesReply_SubscribesMultiError) AllErrors() []error { return m }

// GetColumnSubscribesReply_SubscribesValidationError is the validation error
// returned by GetColumnSubscribesReply_Subscribes.Validate if the designated
// constraints aren't met.
type GetColumnSubscribesReply_SubscribesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnSubscribesReply_SubscribesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnSubscribesReply_SubscribesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnSubscribesReply_SubscribesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnSubscribesReply_SubscribesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnSubscribesReply_SubscribesValidationError) ErrorName() string {
	return "GetColumnSubscribesReply_SubscribesValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnSubscribesReply_SubscribesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnSubscribesReply_Subscribes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnSubscribesReply_SubscribesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnSubscribesReply_SubscribesValidationError{}

// Validate checks the field values on GetNewsReply_News with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetNewsReply_News) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNewsReply_News with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNewsReply_NewsMultiError, or nil if none found.
func (m *GetNewsReply_News) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNewsReply_News) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Update

	// no validation rules for Author

	// no validation rules for Title

	// no validation rules for Text

	// no validation rules for Tags

	// no validation rules for Cover

	// no validation rules for Url

	if len(errors) > 0 {
		return GetNewsReply_NewsMultiError(errors)
	}

	return nil
}

// GetNewsReply_NewsMultiError is an error wrapping multiple validation errors
// returned by GetNewsReply_News.ValidateAll() if the designated constraints
// aren't met.
type GetNewsReply_NewsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNewsReply_NewsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNewsReply_NewsMultiError) AllErrors() []error { return m }

// GetNewsReply_NewsValidationError is the validation error returned by
// GetNewsReply_News.Validate if the designated constraints aren't met.
type GetNewsReply_NewsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNewsReply_NewsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNewsReply_NewsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNewsReply_NewsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNewsReply_NewsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNewsReply_NewsValidationError) ErrorName() string {
	return "GetNewsReply_NewsValidationError"
}

// Error satisfies the builtin error interface
func (e GetNewsReply_NewsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNewsReply_News.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNewsReply_NewsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNewsReply_NewsValidationError{}
