syntax = "proto3";

package message.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";

option go_package = "api/message/service/v1;v1";

service Message {

  rpc GetHealth(google.protobuf.Empty) returns (google.protobuf.Empty){
    option (google.api.http) = {
      get: "/v1/get/message/healthz"
    };
  }

  rpc AvatarReview(ImageReviewReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/tx/message/avatar/review"
      body: "*"
    };
  }

  rpc CoverReview(ImageReviewReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/tx/message/cover/review"
      body: "*"
    };
  }

  rpc ProfileReview(TextReviewReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/tx/message/profile/review"
      body: "*"
    };
  }

  rpc ArticleCreateReview(TextReviewReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/tx/message/article/create/review"
      body: "*"
    };
  }

  rpc ArticleEditReview(TextReviewReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/tx/message/article/edit/review"
      body: "*"
    };
  }

  rpc ArticleImageReview(ImageReviewReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/tx/message/article/image/review"
      body: "*"
    };
  }

  rpc TalkCreateReview(TextReviewReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/tx/message/talk/create/review"
      body: "*"
    };
  }

  rpc TalkEditReview(TextReviewReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/tx/message/talk/edit/review"
      body: "*"
    };
  }

  rpc TalkImageReview(ImageReviewReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/tx/message/talk/image/review"
      body: "*"
    };
  }

  rpc ColumnCreateReview(TextReviewReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/tx/message/column/create/review"
      body: "*"
    };
  }

  rpc ColumnEditReview(TextReviewReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/tx/message/column/edit/review"
      body: "*"
    };
  }

  rpc ColumnImageReview(ImageReviewReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/tx/message/column/image/review"
      body: "*"
    };
  }

  rpc CollectionsCreateReview(TextReviewReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/tx/message/collections/create/review"
      body: "*"
    };
  }

  rpc CollectionsEditReview(TextReviewReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/tx/message/collections/edit/review"
      body: "*"
    };
  }

  rpc CommentCreateReview(TextReviewReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/tx/message/comment/create/review"
      body: "*"
    };
  }

  rpc SubCommentCreateReview(TextReviewReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/tx/message/subcomment/create/review"
      body: "*"
    };
  }

  rpc GetMessageNotification(GetMessageNotificationReq) returns (GetMessageNotificationReply){}

  rpc GetMailBoxLastTime(GetMailBoxLastTimeReq) returns (GetMailBoxLastTimeReply){}

  rpc GetMessageSystemNotification(GetMessageSystemNotificationReq) returns (GetMessageSystemNotificationReply){}

  rpc SetMailBoxLastTime(SetMailBoxLastTimeReq) returns (google.protobuf.Empty){}

  rpc RemoveMailBoxCommentCount(RemoveMailBoxCommentCountReq) returns (google.protobuf.Empty){}

  rpc RemoveMailBoxSubCommentCount(RemoveMailBoxSubCommentCountReq) returns (google.protobuf.Empty){}

  rpc RemoveMailBoxSystemNotificationCount(RemoveMailBoxSystemNotificationCountReq) returns (google.protobuf.Empty){}
}

message ImageReviewReq{
  message JobsDetailStruct{
    string Code = 1 [(validate.rules).string = {max_len: 1000}];
    string Message = 2 [(validate.rules).string = {max_len: 1000}];
    string JobId = 3 [(validate.rules).string = {max_len: 1000}];
    string State = 4 [(validate.rules).string = {max_len: 1000}];
    string Object = 5 [(validate.rules).string = {max_len: 1000}];
    string Url = 6 [(validate.rules).string = {max_len: 1000}];
    string Label = 7 [(validate.rules).string = {max_len: 1000}];
    int32 Result = 8;
    int32 Score = 9;
    string Category = 10 [(validate.rules).string = {max_len: 1000}];
    string SubLabel = 11 [(validate.rules).string = {max_len: 1000}];
    string BucketId = 12 [(validate.rules).string = {max_len: 1000}];
    string Region = 13 [(validate.rules).string = {max_len: 1000}];
    map<string, string> CosHeaders = 14 [(validate.rules).map.values.string.max_len = 1000, (validate.rules).map.keys.string.max_len = 1000];
  }
  JobsDetailStruct JobsDetail = 1;
  string EventName = 2 [(validate.rules).string = {max_len: 1000}];
}

message TextReviewReq{
  JobsDetailStruct JobsDetail = 1;
  string EventName = 2 [(validate.rules).string = {max_len: 1000}];
}

message GetMessageNotificationReq{
  string uuid = 1 [(validate.rules).string.uuid = true];
  repeated string follows = 2;
}

message GetMailBoxLastTimeReq{
  string uuid = 1 [(validate.rules).string.uuid = true];
}

message GetMessageNotificationReply{
  map<string, int32> timeline = 1;
  int32 comment = 2;
  int32 subComment = 3;
  int32 system = 4;
}

message GetMailBoxLastTimeReply{
  int32 time = 1;
}

message GetMessageSystemNotificationReq{
  int32 page = 1;
  string uuid = 2 [(validate.rules).string.uuid = true];
}

message GetMessageSystemNotificationReply{
  message List {
    int32 id = 1;
    int32 contentId = 2;
    string createdAt = 3;
    string notificationType = 4;
    string title = 5;
    string uid = 6;
    string uuid = 7;
    string label = 8;
    int32 result = 9;
    string section = 10;
    string text = 11;
    string comment = 12;
  }
  repeated List list = 1;
}

message SetMailBoxLastTimeReq{
  string uuid = 1 [(validate.rules).string.uuid = true];
  int32 time = 2;
}

message RemoveMailBoxCommentCountReq{
  string uuid = 1 [(validate.rules).string.uuid = true];
}

message RemoveMailBoxSubCommentCountReq{
  string uuid = 1 [(validate.rules).string.uuid = true];
}

message RemoveMailBoxSystemNotificationCountReq{
  string uuid = 1 [(validate.rules).string.uuid = true];
}

// --------------------text review message define-------------------------

message SectionPornInfoStruct{
  int32 HitFlag = 1;
  int32 Score = 2;
  string Keywords = 3 [(validate.rules).string = {max_len: 1000}];
}
message SectionAdsInfoStruct{
  int32 HitFlag = 1;
  int32 Score = 2;
  string Keywords = 3 [(validate.rules).string = {max_len: 1000}];
}
message SectionIllegalInfoStruct{
  int32 HitFlag = 1;
  int32 Score = 2;
  string Keywords = 3 [(validate.rules).string = {max_len: 1000}];
}
message SectionAbuseInfoStruct{
  int32 HitFlag = 1;
  int32 Score = 2;
  string Keywords = 3 [(validate.rules).string = {max_len: 1000}];
}
message SectionStruct{
  string Label = 1 [(validate.rules).string = {max_len: 1000}];
  int32 Result = 2;
  SectionPornInfoStruct PornInfo = 3;
  SectionAdsInfoStruct AdsInfo = 4;
  SectionIllegalInfoStruct IllegalInfo = 5;
  SectionAbuseInfoStruct AbuseInfo = 6;
}
message JobsDetailStruct{
  string Code = 1 [(validate.rules).string = {max_len: 1000}];
  string Message = 2 [(validate.rules).string = {max_len: 1000}];
  string JobId = 3 [(validate.rules).string = {max_len: 1000}];
  string DataId = 4 [(validate.rules).string = {max_len: 1000}];
  string State = 5 [(validate.rules).string = {max_len: 1000}];
  string CreationTime = 6 [(validate.rules).string = {max_len: 1000}];
  string Object = 7 [(validate.rules).string = {max_len: 1000}];
  string Label = 8 [(validate.rules).string = {max_len: 1000}];
  int32 Result = 9;
  string BucketId = 10 [(validate.rules).string = {max_len: 1000}];
  string Region = 11 [(validate.rules).string = {max_len: 1000}];
  map<string, string> CosHeaders = 12 [(validate.rules).map.values.string.max_len = 1000, (validate.rules).map.keys.string.max_len = 1000];
  repeated SectionStruct Section = 13;
}
