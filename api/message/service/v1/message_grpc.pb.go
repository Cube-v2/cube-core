// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: message/service/v1/message.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageClient is the client API for Message service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageClient interface {
	AvatarReview(ctx context.Context, in *AvatarReviewReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ProfileReview(ctx context.Context, in *TextReviewReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ArticleCreateReview(ctx context.Context, in *TextReviewReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ArticleEditReview(ctx context.Context, in *TextReviewReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TalkCreateReview(ctx context.Context, in *TextReviewReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TalkEditReview(ctx context.Context, in *TextReviewReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ColumnCreateReview(ctx context.Context, in *TextReviewReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ColumnEditReview(ctx context.Context, in *TextReviewReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CommentCreateReview(ctx context.Context, in *TextReviewReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SubCommentCreateReview(ctx context.Context, in *TextReviewReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type messageClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageClient(cc grpc.ClientConnInterface) MessageClient {
	return &messageClient{cc}
}

func (c *messageClient) AvatarReview(ctx context.Context, in *AvatarReviewReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/message.v1.Message/AvatarReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) ProfileReview(ctx context.Context, in *TextReviewReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/message.v1.Message/ProfileReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) ArticleCreateReview(ctx context.Context, in *TextReviewReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/message.v1.Message/ArticleCreateReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) ArticleEditReview(ctx context.Context, in *TextReviewReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/message.v1.Message/ArticleEditReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) TalkCreateReview(ctx context.Context, in *TextReviewReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/message.v1.Message/TalkCreateReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) TalkEditReview(ctx context.Context, in *TextReviewReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/message.v1.Message/TalkEditReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) ColumnCreateReview(ctx context.Context, in *TextReviewReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/message.v1.Message/ColumnCreateReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) ColumnEditReview(ctx context.Context, in *TextReviewReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/message.v1.Message/ColumnEditReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) CommentCreateReview(ctx context.Context, in *TextReviewReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/message.v1.Message/CommentCreateReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) SubCommentCreateReview(ctx context.Context, in *TextReviewReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/message.v1.Message/SubCommentCreateReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServer is the server API for Message service.
// All implementations must embed UnimplementedMessageServer
// for forward compatibility
type MessageServer interface {
	AvatarReview(context.Context, *AvatarReviewReq) (*emptypb.Empty, error)
	ProfileReview(context.Context, *TextReviewReq) (*emptypb.Empty, error)
	ArticleCreateReview(context.Context, *TextReviewReq) (*emptypb.Empty, error)
	ArticleEditReview(context.Context, *TextReviewReq) (*emptypb.Empty, error)
	TalkCreateReview(context.Context, *TextReviewReq) (*emptypb.Empty, error)
	TalkEditReview(context.Context, *TextReviewReq) (*emptypb.Empty, error)
	ColumnCreateReview(context.Context, *TextReviewReq) (*emptypb.Empty, error)
	ColumnEditReview(context.Context, *TextReviewReq) (*emptypb.Empty, error)
	CommentCreateReview(context.Context, *TextReviewReq) (*emptypb.Empty, error)
	SubCommentCreateReview(context.Context, *TextReviewReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedMessageServer()
}

// UnimplementedMessageServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServer struct {
}

func (UnimplementedMessageServer) AvatarReview(context.Context, *AvatarReviewReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvatarReview not implemented")
}
func (UnimplementedMessageServer) ProfileReview(context.Context, *TextReviewReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileReview not implemented")
}
func (UnimplementedMessageServer) ArticleCreateReview(context.Context, *TextReviewReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleCreateReview not implemented")
}
func (UnimplementedMessageServer) ArticleEditReview(context.Context, *TextReviewReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleEditReview not implemented")
}
func (UnimplementedMessageServer) TalkCreateReview(context.Context, *TextReviewReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TalkCreateReview not implemented")
}
func (UnimplementedMessageServer) TalkEditReview(context.Context, *TextReviewReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TalkEditReview not implemented")
}
func (UnimplementedMessageServer) ColumnCreateReview(context.Context, *TextReviewReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ColumnCreateReview not implemented")
}
func (UnimplementedMessageServer) ColumnEditReview(context.Context, *TextReviewReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ColumnEditReview not implemented")
}
func (UnimplementedMessageServer) CommentCreateReview(context.Context, *TextReviewReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentCreateReview not implemented")
}
func (UnimplementedMessageServer) SubCommentCreateReview(context.Context, *TextReviewReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubCommentCreateReview not implemented")
}
func (UnimplementedMessageServer) mustEmbedUnimplementedMessageServer() {}

// UnsafeMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServer will
// result in compilation errors.
type UnsafeMessageServer interface {
	mustEmbedUnimplementedMessageServer()
}

func RegisterMessageServer(s grpc.ServiceRegistrar, srv MessageServer) {
	s.RegisterService(&Message_ServiceDesc, srv)
}

func _Message_AvatarReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvatarReviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).AvatarReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.v1.Message/AvatarReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).AvatarReview(ctx, req.(*AvatarReviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_ProfileReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextReviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).ProfileReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.v1.Message/ProfileReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).ProfileReview(ctx, req.(*TextReviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_ArticleCreateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextReviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).ArticleCreateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.v1.Message/ArticleCreateReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).ArticleCreateReview(ctx, req.(*TextReviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_ArticleEditReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextReviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).ArticleEditReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.v1.Message/ArticleEditReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).ArticleEditReview(ctx, req.(*TextReviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_TalkCreateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextReviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).TalkCreateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.v1.Message/TalkCreateReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).TalkCreateReview(ctx, req.(*TextReviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_TalkEditReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextReviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).TalkEditReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.v1.Message/TalkEditReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).TalkEditReview(ctx, req.(*TextReviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_ColumnCreateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextReviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).ColumnCreateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.v1.Message/ColumnCreateReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).ColumnCreateReview(ctx, req.(*TextReviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_ColumnEditReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextReviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).ColumnEditReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.v1.Message/ColumnEditReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).ColumnEditReview(ctx, req.(*TextReviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_CommentCreateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextReviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).CommentCreateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.v1.Message/CommentCreateReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).CommentCreateReview(ctx, req.(*TextReviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_SubCommentCreateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextReviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).SubCommentCreateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.v1.Message/SubCommentCreateReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).SubCommentCreateReview(ctx, req.(*TextReviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Message_ServiceDesc is the grpc.ServiceDesc for Message service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Message_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.v1.Message",
	HandlerType: (*MessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AvatarReview",
			Handler:    _Message_AvatarReview_Handler,
		},
		{
			MethodName: "ProfileReview",
			Handler:    _Message_ProfileReview_Handler,
		},
		{
			MethodName: "ArticleCreateReview",
			Handler:    _Message_ArticleCreateReview_Handler,
		},
		{
			MethodName: "ArticleEditReview",
			Handler:    _Message_ArticleEditReview_Handler,
		},
		{
			MethodName: "TalkCreateReview",
			Handler:    _Message_TalkCreateReview_Handler,
		},
		{
			MethodName: "TalkEditReview",
			Handler:    _Message_TalkEditReview_Handler,
		},
		{
			MethodName: "ColumnCreateReview",
			Handler:    _Message_ColumnCreateReview_Handler,
		},
		{
			MethodName: "ColumnEditReview",
			Handler:    _Message_ColumnEditReview_Handler,
		},
		{
			MethodName: "CommentCreateReview",
			Handler:    _Message_CommentCreateReview_Handler,
		},
		{
			MethodName: "SubCommentCreateReview",
			Handler:    _Message_SubCommentCreateReview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message/service/v1/message.proto",
}
