// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: creation/service/v1/creation.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CreationClient is the client API for Creation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CreationClient interface {
	GetLeaderBoard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetLeaderBoardReply, error)
	GetCollectArticle(ctx context.Context, in *GetCollectArticleReq, opts ...grpc.CallOption) (*GetArticleListReply, error)
	GetCollectArticleCount(ctx context.Context, in *GetCollectArticleCountReq, opts ...grpc.CallOption) (*GetCollectArticleCountReply, error)
	GetCollectTalk(ctx context.Context, in *GetCollectTalkReq, opts ...grpc.CallOption) (*GetTalkListReply, error)
	GetCollectTalkCount(ctx context.Context, in *GetCollectTalkCountReq, opts ...grpc.CallOption) (*GetCollectTalkCountReply, error)
	GetCollectColumn(ctx context.Context, in *GetCollectColumnReq, opts ...grpc.CallOption) (*GetColumnListReply, error)
	GetCollectColumnCount(ctx context.Context, in *GetCollectColumnCountReq, opts ...grpc.CallOption) (*GetCollectColumnCountReply, error)
	GetCollection(ctx context.Context, in *GetCollectionReq, opts ...grpc.CallOption) (*GetCollectionReply, error)
	GetCollectionListInfo(ctx context.Context, in *GetCollectionListInfoReq, opts ...grpc.CallOption) (*GetCollectionsReply, error)
	GetCollections(ctx context.Context, in *GetCollectionsReq, opts ...grpc.CallOption) (*GetCollectionsReply, error)
	GetCollectionsCount(ctx context.Context, in *GetCollectionsCountReq, opts ...grpc.CallOption) (*GetCollectionsCountReply, error)
	GetCollectionsByVisitor(ctx context.Context, in *GetCollectionsReq, opts ...grpc.CallOption) (*GetCollectionsReply, error)
	GetCollectionsVisitorCount(ctx context.Context, in *GetCollectionsCountReq, opts ...grpc.CallOption) (*GetCollectionsCountReply, error)
	CreateCollections(ctx context.Context, in *CreateCollectionsReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EditCollections(ctx context.Context, in *EditCollectionsReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteCollections(ctx context.Context, in *DeleteCollectionsReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetArticleList(ctx context.Context, in *GetArticleListReq, opts ...grpc.CallOption) (*GetArticleListReply, error)
	GetArticleListHot(ctx context.Context, in *GetArticleListHotReq, opts ...grpc.CallOption) (*GetArticleListHotReply, error)
	GetColumnArticleList(ctx context.Context, in *GetColumnArticleListReq, opts ...grpc.CallOption) (*GetArticleListReply, error)
	GetArticleCount(ctx context.Context, in *GetArticleCountReq, opts ...grpc.CallOption) (*GetArticleCountReply, error)
	GetArticleCountVisitor(ctx context.Context, in *GetArticleCountVisitorReq, opts ...grpc.CallOption) (*GetArticleCountReply, error)
	GetUserArticleList(ctx context.Context, in *GetUserArticleListReq, opts ...grpc.CallOption) (*GetArticleListReply, error)
	GetUserArticleListVisitor(ctx context.Context, in *GetUserArticleListVisitorReq, opts ...grpc.CallOption) (*GetArticleListReply, error)
	GetArticleStatistic(ctx context.Context, in *GetArticleStatisticReq, opts ...grpc.CallOption) (*GetArticleStatisticReply, error)
	GetArticleListStatistic(ctx context.Context, in *GetArticleListStatisticReq, opts ...grpc.CallOption) (*GetArticleListStatisticReply, error)
	GetLastArticleDraft(ctx context.Context, in *GetLastArticleDraftReq, opts ...grpc.CallOption) (*GetLastArticleDraftReply, error)
	GetArticleSearch(ctx context.Context, in *GetArticleSearchReq, opts ...grpc.CallOption) (*GetArticleSearchReply, error)
	CreateArticle(ctx context.Context, in *CreateArticleReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EditArticle(ctx context.Context, in *EditArticleReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateArticleDbCacheAndSearch(ctx context.Context, in *CreateArticleDbCacheAndSearchReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EditArticleCosAndSearch(ctx context.Context, in *EditArticleCosAndSearchReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteArticleCacheAndSearch(ctx context.Context, in *DeleteArticleCacheAndSearchReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateArticleDraft(ctx context.Context, in *CreateArticleDraftReq, opts ...grpc.CallOption) (*CreateArticleDraftReply, error)
	ArticleDraftMark(ctx context.Context, in *ArticleDraftMarkReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetArticleDraftList(ctx context.Context, in *GetArticleDraftListReq, opts ...grpc.CallOption) (*GetArticleDraftListReply, error)
	SendArticle(ctx context.Context, in *SendArticleReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendArticleEdit(ctx context.Context, in *SendArticleEditReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteArticle(ctx context.Context, in *DeleteArticleReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetArticleAgree(ctx context.Context, in *SetArticleAgreeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetArticleView(ctx context.Context, in *SetArticleViewReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetArticleCollect(ctx context.Context, in *SetArticleCollectReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CancelArticleAgree(ctx context.Context, in *CancelArticleAgreeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CancelArticleCollect(ctx context.Context, in *CancelArticleCollectReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ArticleStatisticJudge(ctx context.Context, in *ArticleStatisticJudgeReq, opts ...grpc.CallOption) (*ArticleStatisticJudgeReply, error)
	GetTalkList(ctx context.Context, in *GetTalkListReq, opts ...grpc.CallOption) (*GetTalkListReply, error)
	GetTalkListHot(ctx context.Context, in *GetTalkListHotReq, opts ...grpc.CallOption) (*GetTalkListHotReply, error)
	GetUserTalkList(ctx context.Context, in *GetUserTalkListReq, opts ...grpc.CallOption) (*GetTalkListReply, error)
	GetUserTalkListVisitor(ctx context.Context, in *GetUserTalkListVisitorReq, opts ...grpc.CallOption) (*GetTalkListReply, error)
	GetTalkCount(ctx context.Context, in *GetTalkCountReq, opts ...grpc.CallOption) (*GetTalkCountReply, error)
	GetTalkCountVisitor(ctx context.Context, in *GetTalkCountVisitorReq, opts ...grpc.CallOption) (*GetTalkCountReply, error)
	GetTalkListStatistic(ctx context.Context, in *GetTalkListStatisticReq, opts ...grpc.CallOption) (*GetTalkListStatisticReply, error)
	GetTalkStatistic(ctx context.Context, in *GetTalkStatisticReq, opts ...grpc.CallOption) (*GetTalkStatisticReply, error)
	GetLastTalkDraft(ctx context.Context, in *GetLastTalkDraftReq, opts ...grpc.CallOption) (*GetLastTalkDraftReply, error)
	GetTalkSearch(ctx context.Context, in *GetTalkSearchReq, opts ...grpc.CallOption) (*GetTalkSearchReply, error)
	CreateTalkDraft(ctx context.Context, in *CreateTalkDraftReq, opts ...grpc.CallOption) (*CreateTalkDraftReply, error)
	SendTalk(ctx context.Context, in *SendTalkReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendTalkEdit(ctx context.Context, in *SendTalkEditReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateTalk(ctx context.Context, in *CreateTalkReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EditTalk(ctx context.Context, in *EditTalkReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteTalk(ctx context.Context, in *DeleteTalkReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateTalkDbCacheAndSearch(ctx context.Context, in *CreateTalkDbCacheAndSearchReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EditTalkCosAndSearch(ctx context.Context, in *EditTalkCosAndSearchReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteTalkCacheAndSearch(ctx context.Context, in *DeleteTalkCacheAndSearchReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetTalkView(ctx context.Context, in *SetTalkViewReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TalkStatisticJudge(ctx context.Context, in *TalkStatisticJudgeReq, opts ...grpc.CallOption) (*TalkStatisticJudgeReply, error)
	SetTalkAgree(ctx context.Context, in *SetTalkAgreeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetTalkCollect(ctx context.Context, in *SetTalkCollectReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CancelTalkAgree(ctx context.Context, in *CancelTalkAgreeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CancelTalkCollect(ctx context.Context, in *CancelTalkCollectReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetLastColumnDraft(ctx context.Context, in *GetLastColumnDraftReq, opts ...grpc.CallOption) (*GetLastColumnDraftReply, error)
	GetColumnSearch(ctx context.Context, in *GetColumnSearchReq, opts ...grpc.CallOption) (*GetColumnSearchReply, error)
	CreateColumnDraft(ctx context.Context, in *CreateColumnDraftReq, opts ...grpc.CallOption) (*CreateColumnDraftReply, error)
	SendColumn(ctx context.Context, in *SendColumnReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateColumn(ctx context.Context, in *CreateColumnReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateColumnDbCacheAndSearch(ctx context.Context, in *CreateColumnDbCacheAndSearchReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SubscribeColumn(ctx context.Context, in *SubscribeColumnReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CancelSubscribeColumn(ctx context.Context, in *CancelSubscribeColumnReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SubscribeJudge(ctx context.Context, in *SubscribeJudgeReq, opts ...grpc.CallOption) (*SubscribeJudgeReply, error)
	EditColumnCosAndSearch(ctx context.Context, in *EditColumnCosAndSearchReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetColumnList(ctx context.Context, in *GetColumnListReq, opts ...grpc.CallOption) (*GetColumnListReply, error)
	GetColumnListHot(ctx context.Context, in *GetColumnListHotReq, opts ...grpc.CallOption) (*GetColumnListHotReply, error)
	GetColumnListStatistic(ctx context.Context, in *GetColumnListStatisticReq, opts ...grpc.CallOption) (*GetColumnListStatisticReply, error)
	GetColumnStatistic(ctx context.Context, in *GetColumnStatisticReq, opts ...grpc.CallOption) (*GetColumnStatisticReply, error)
	GetUserColumnList(ctx context.Context, in *GetUserColumnListReq, opts ...grpc.CallOption) (*GetColumnListReply, error)
	GetUserColumnListVisitor(ctx context.Context, in *GetUserColumnListVisitorReq, opts ...grpc.CallOption) (*GetColumnListReply, error)
	GetColumnCount(ctx context.Context, in *GetColumnCountReq, opts ...grpc.CallOption) (*GetColumnCountReply, error)
	GetColumnCountVisitor(ctx context.Context, in *GetColumnCountVisitorReq, opts ...grpc.CallOption) (*GetColumnCountReply, error)
	GetSubscribeList(ctx context.Context, in *GetSubscribeListReq, opts ...grpc.CallOption) (*GetSubscribeListReply, error)
	GetSubscribeListCount(ctx context.Context, in *GetSubscribeListCountReq, opts ...grpc.CallOption) (*GetSubscribeListCountReply, error)
	GetColumnSubscribes(ctx context.Context, in *GetColumnSubscribesReq, opts ...grpc.CallOption) (*GetColumnSubscribesReply, error)
	SendColumnEdit(ctx context.Context, in *SendColumnEditReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EditColumn(ctx context.Context, in *EditColumnReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteColumn(ctx context.Context, in *DeleteColumnReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteColumnCacheAndSearch(ctx context.Context, in *DeleteColumnCacheAndSearchReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ColumnStatisticJudge(ctx context.Context, in *ColumnStatisticJudgeReq, opts ...grpc.CallOption) (*ColumnStatisticJudgeReply, error)
	SetColumnAgree(ctx context.Context, in *SetColumnAgreeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CancelColumnAgree(ctx context.Context, in *CancelColumnAgreeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetColumnCollect(ctx context.Context, in *SetColumnCollectReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CancelColumnCollect(ctx context.Context, in *CancelColumnCollectReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetColumnView(ctx context.Context, in *SetColumnViewReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddColumnIncludes(ctx context.Context, in *AddColumnIncludesReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteColumnIncludes(ctx context.Context, in *DeleteColumnIncludesReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetNews(ctx context.Context, in *GetNewsReq, opts ...grpc.CallOption) (*GetNewsReply, error)
	AddCreationComment(ctx context.Context, in *AddCreationCommentReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReduceCreationComment(ctx context.Context, in *ReduceCreationCommentReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type creationClient struct {
	cc grpc.ClientConnInterface
}

func NewCreationClient(cc grpc.ClientConnInterface) CreationClient {
	return &creationClient{cc}
}

func (c *creationClient) GetLeaderBoard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetLeaderBoardReply, error) {
	out := new(GetLeaderBoardReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetLeaderBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetCollectArticle(ctx context.Context, in *GetCollectArticleReq, opts ...grpc.CallOption) (*GetArticleListReply, error) {
	out := new(GetArticleListReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetCollectArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetCollectArticleCount(ctx context.Context, in *GetCollectArticleCountReq, opts ...grpc.CallOption) (*GetCollectArticleCountReply, error) {
	out := new(GetCollectArticleCountReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetCollectArticleCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetCollectTalk(ctx context.Context, in *GetCollectTalkReq, opts ...grpc.CallOption) (*GetTalkListReply, error) {
	out := new(GetTalkListReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetCollectTalk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetCollectTalkCount(ctx context.Context, in *GetCollectTalkCountReq, opts ...grpc.CallOption) (*GetCollectTalkCountReply, error) {
	out := new(GetCollectTalkCountReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetCollectTalkCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetCollectColumn(ctx context.Context, in *GetCollectColumnReq, opts ...grpc.CallOption) (*GetColumnListReply, error) {
	out := new(GetColumnListReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetCollectColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetCollectColumnCount(ctx context.Context, in *GetCollectColumnCountReq, opts ...grpc.CallOption) (*GetCollectColumnCountReply, error) {
	out := new(GetCollectColumnCountReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetCollectColumnCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetCollection(ctx context.Context, in *GetCollectionReq, opts ...grpc.CallOption) (*GetCollectionReply, error) {
	out := new(GetCollectionReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetCollectionListInfo(ctx context.Context, in *GetCollectionListInfoReq, opts ...grpc.CallOption) (*GetCollectionsReply, error) {
	out := new(GetCollectionsReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetCollectionListInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetCollections(ctx context.Context, in *GetCollectionsReq, opts ...grpc.CallOption) (*GetCollectionsReply, error) {
	out := new(GetCollectionsReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetCollectionsCount(ctx context.Context, in *GetCollectionsCountReq, opts ...grpc.CallOption) (*GetCollectionsCountReply, error) {
	out := new(GetCollectionsCountReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetCollectionsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetCollectionsByVisitor(ctx context.Context, in *GetCollectionsReq, opts ...grpc.CallOption) (*GetCollectionsReply, error) {
	out := new(GetCollectionsReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetCollectionsByVisitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetCollectionsVisitorCount(ctx context.Context, in *GetCollectionsCountReq, opts ...grpc.CallOption) (*GetCollectionsCountReply, error) {
	out := new(GetCollectionsCountReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetCollectionsVisitorCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) CreateCollections(ctx context.Context, in *CreateCollectionsReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/CreateCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) EditCollections(ctx context.Context, in *EditCollectionsReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/EditCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) DeleteCollections(ctx context.Context, in *DeleteCollectionsReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/DeleteCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetArticleList(ctx context.Context, in *GetArticleListReq, opts ...grpc.CallOption) (*GetArticleListReply, error) {
	out := new(GetArticleListReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetArticleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetArticleListHot(ctx context.Context, in *GetArticleListHotReq, opts ...grpc.CallOption) (*GetArticleListHotReply, error) {
	out := new(GetArticleListHotReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetArticleListHot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetColumnArticleList(ctx context.Context, in *GetColumnArticleListReq, opts ...grpc.CallOption) (*GetArticleListReply, error) {
	out := new(GetArticleListReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetColumnArticleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetArticleCount(ctx context.Context, in *GetArticleCountReq, opts ...grpc.CallOption) (*GetArticleCountReply, error) {
	out := new(GetArticleCountReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetArticleCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetArticleCountVisitor(ctx context.Context, in *GetArticleCountVisitorReq, opts ...grpc.CallOption) (*GetArticleCountReply, error) {
	out := new(GetArticleCountReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetArticleCountVisitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetUserArticleList(ctx context.Context, in *GetUserArticleListReq, opts ...grpc.CallOption) (*GetArticleListReply, error) {
	out := new(GetArticleListReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetUserArticleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetUserArticleListVisitor(ctx context.Context, in *GetUserArticleListVisitorReq, opts ...grpc.CallOption) (*GetArticleListReply, error) {
	out := new(GetArticleListReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetUserArticleListVisitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetArticleStatistic(ctx context.Context, in *GetArticleStatisticReq, opts ...grpc.CallOption) (*GetArticleStatisticReply, error) {
	out := new(GetArticleStatisticReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetArticleStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetArticleListStatistic(ctx context.Context, in *GetArticleListStatisticReq, opts ...grpc.CallOption) (*GetArticleListStatisticReply, error) {
	out := new(GetArticleListStatisticReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetArticleListStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetLastArticleDraft(ctx context.Context, in *GetLastArticleDraftReq, opts ...grpc.CallOption) (*GetLastArticleDraftReply, error) {
	out := new(GetLastArticleDraftReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetLastArticleDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetArticleSearch(ctx context.Context, in *GetArticleSearchReq, opts ...grpc.CallOption) (*GetArticleSearchReply, error) {
	out := new(GetArticleSearchReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetArticleSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) CreateArticle(ctx context.Context, in *CreateArticleReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/CreateArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) EditArticle(ctx context.Context, in *EditArticleReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/EditArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) CreateArticleDbCacheAndSearch(ctx context.Context, in *CreateArticleDbCacheAndSearchReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/CreateArticleDbCacheAndSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) EditArticleCosAndSearch(ctx context.Context, in *EditArticleCosAndSearchReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/EditArticleCosAndSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) DeleteArticleCacheAndSearch(ctx context.Context, in *DeleteArticleCacheAndSearchReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/DeleteArticleCacheAndSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) CreateArticleDraft(ctx context.Context, in *CreateArticleDraftReq, opts ...grpc.CallOption) (*CreateArticleDraftReply, error) {
	out := new(CreateArticleDraftReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/CreateArticleDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) ArticleDraftMark(ctx context.Context, in *ArticleDraftMarkReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/ArticleDraftMark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetArticleDraftList(ctx context.Context, in *GetArticleDraftListReq, opts ...grpc.CallOption) (*GetArticleDraftListReply, error) {
	out := new(GetArticleDraftListReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetArticleDraftList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) SendArticle(ctx context.Context, in *SendArticleReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/SendArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) SendArticleEdit(ctx context.Context, in *SendArticleEditReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/SendArticleEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) DeleteArticle(ctx context.Context, in *DeleteArticleReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/DeleteArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) SetArticleAgree(ctx context.Context, in *SetArticleAgreeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/SetArticleAgree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) SetArticleView(ctx context.Context, in *SetArticleViewReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/SetArticleView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) SetArticleCollect(ctx context.Context, in *SetArticleCollectReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/SetArticleCollect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) CancelArticleAgree(ctx context.Context, in *CancelArticleAgreeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/CancelArticleAgree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) CancelArticleCollect(ctx context.Context, in *CancelArticleCollectReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/CancelArticleCollect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) ArticleStatisticJudge(ctx context.Context, in *ArticleStatisticJudgeReq, opts ...grpc.CallOption) (*ArticleStatisticJudgeReply, error) {
	out := new(ArticleStatisticJudgeReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/ArticleStatisticJudge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetTalkList(ctx context.Context, in *GetTalkListReq, opts ...grpc.CallOption) (*GetTalkListReply, error) {
	out := new(GetTalkListReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetTalkList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetTalkListHot(ctx context.Context, in *GetTalkListHotReq, opts ...grpc.CallOption) (*GetTalkListHotReply, error) {
	out := new(GetTalkListHotReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetTalkListHot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetUserTalkList(ctx context.Context, in *GetUserTalkListReq, opts ...grpc.CallOption) (*GetTalkListReply, error) {
	out := new(GetTalkListReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetUserTalkList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetUserTalkListVisitor(ctx context.Context, in *GetUserTalkListVisitorReq, opts ...grpc.CallOption) (*GetTalkListReply, error) {
	out := new(GetTalkListReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetUserTalkListVisitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetTalkCount(ctx context.Context, in *GetTalkCountReq, opts ...grpc.CallOption) (*GetTalkCountReply, error) {
	out := new(GetTalkCountReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetTalkCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetTalkCountVisitor(ctx context.Context, in *GetTalkCountVisitorReq, opts ...grpc.CallOption) (*GetTalkCountReply, error) {
	out := new(GetTalkCountReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetTalkCountVisitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetTalkListStatistic(ctx context.Context, in *GetTalkListStatisticReq, opts ...grpc.CallOption) (*GetTalkListStatisticReply, error) {
	out := new(GetTalkListStatisticReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetTalkListStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetTalkStatistic(ctx context.Context, in *GetTalkStatisticReq, opts ...grpc.CallOption) (*GetTalkStatisticReply, error) {
	out := new(GetTalkStatisticReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetTalkStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetLastTalkDraft(ctx context.Context, in *GetLastTalkDraftReq, opts ...grpc.CallOption) (*GetLastTalkDraftReply, error) {
	out := new(GetLastTalkDraftReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetLastTalkDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetTalkSearch(ctx context.Context, in *GetTalkSearchReq, opts ...grpc.CallOption) (*GetTalkSearchReply, error) {
	out := new(GetTalkSearchReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetTalkSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) CreateTalkDraft(ctx context.Context, in *CreateTalkDraftReq, opts ...grpc.CallOption) (*CreateTalkDraftReply, error) {
	out := new(CreateTalkDraftReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/CreateTalkDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) SendTalk(ctx context.Context, in *SendTalkReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/SendTalk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) SendTalkEdit(ctx context.Context, in *SendTalkEditReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/SendTalkEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) CreateTalk(ctx context.Context, in *CreateTalkReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/CreateTalk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) EditTalk(ctx context.Context, in *EditTalkReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/EditTalk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) DeleteTalk(ctx context.Context, in *DeleteTalkReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/DeleteTalk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) CreateTalkDbCacheAndSearch(ctx context.Context, in *CreateTalkDbCacheAndSearchReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/CreateTalkDbCacheAndSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) EditTalkCosAndSearch(ctx context.Context, in *EditTalkCosAndSearchReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/EditTalkCosAndSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) DeleteTalkCacheAndSearch(ctx context.Context, in *DeleteTalkCacheAndSearchReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/DeleteTalkCacheAndSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) SetTalkView(ctx context.Context, in *SetTalkViewReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/SetTalkView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) TalkStatisticJudge(ctx context.Context, in *TalkStatisticJudgeReq, opts ...grpc.CallOption) (*TalkStatisticJudgeReply, error) {
	out := new(TalkStatisticJudgeReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/TalkStatisticJudge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) SetTalkAgree(ctx context.Context, in *SetTalkAgreeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/SetTalkAgree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) SetTalkCollect(ctx context.Context, in *SetTalkCollectReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/SetTalkCollect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) CancelTalkAgree(ctx context.Context, in *CancelTalkAgreeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/CancelTalkAgree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) CancelTalkCollect(ctx context.Context, in *CancelTalkCollectReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/CancelTalkCollect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetLastColumnDraft(ctx context.Context, in *GetLastColumnDraftReq, opts ...grpc.CallOption) (*GetLastColumnDraftReply, error) {
	out := new(GetLastColumnDraftReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetLastColumnDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetColumnSearch(ctx context.Context, in *GetColumnSearchReq, opts ...grpc.CallOption) (*GetColumnSearchReply, error) {
	out := new(GetColumnSearchReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetColumnSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) CreateColumnDraft(ctx context.Context, in *CreateColumnDraftReq, opts ...grpc.CallOption) (*CreateColumnDraftReply, error) {
	out := new(CreateColumnDraftReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/CreateColumnDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) SendColumn(ctx context.Context, in *SendColumnReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/SendColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) CreateColumn(ctx context.Context, in *CreateColumnReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/CreateColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) CreateColumnDbCacheAndSearch(ctx context.Context, in *CreateColumnDbCacheAndSearchReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/CreateColumnDbCacheAndSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) SubscribeColumn(ctx context.Context, in *SubscribeColumnReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/SubscribeColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) CancelSubscribeColumn(ctx context.Context, in *CancelSubscribeColumnReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/CancelSubscribeColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) SubscribeJudge(ctx context.Context, in *SubscribeJudgeReq, opts ...grpc.CallOption) (*SubscribeJudgeReply, error) {
	out := new(SubscribeJudgeReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/SubscribeJudge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) EditColumnCosAndSearch(ctx context.Context, in *EditColumnCosAndSearchReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/EditColumnCosAndSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetColumnList(ctx context.Context, in *GetColumnListReq, opts ...grpc.CallOption) (*GetColumnListReply, error) {
	out := new(GetColumnListReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetColumnList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetColumnListHot(ctx context.Context, in *GetColumnListHotReq, opts ...grpc.CallOption) (*GetColumnListHotReply, error) {
	out := new(GetColumnListHotReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetColumnListHot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetColumnListStatistic(ctx context.Context, in *GetColumnListStatisticReq, opts ...grpc.CallOption) (*GetColumnListStatisticReply, error) {
	out := new(GetColumnListStatisticReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetColumnListStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetColumnStatistic(ctx context.Context, in *GetColumnStatisticReq, opts ...grpc.CallOption) (*GetColumnStatisticReply, error) {
	out := new(GetColumnStatisticReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetColumnStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetUserColumnList(ctx context.Context, in *GetUserColumnListReq, opts ...grpc.CallOption) (*GetColumnListReply, error) {
	out := new(GetColumnListReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetUserColumnList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetUserColumnListVisitor(ctx context.Context, in *GetUserColumnListVisitorReq, opts ...grpc.CallOption) (*GetColumnListReply, error) {
	out := new(GetColumnListReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetUserColumnListVisitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetColumnCount(ctx context.Context, in *GetColumnCountReq, opts ...grpc.CallOption) (*GetColumnCountReply, error) {
	out := new(GetColumnCountReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetColumnCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetColumnCountVisitor(ctx context.Context, in *GetColumnCountVisitorReq, opts ...grpc.CallOption) (*GetColumnCountReply, error) {
	out := new(GetColumnCountReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetColumnCountVisitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetSubscribeList(ctx context.Context, in *GetSubscribeListReq, opts ...grpc.CallOption) (*GetSubscribeListReply, error) {
	out := new(GetSubscribeListReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetSubscribeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetSubscribeListCount(ctx context.Context, in *GetSubscribeListCountReq, opts ...grpc.CallOption) (*GetSubscribeListCountReply, error) {
	out := new(GetSubscribeListCountReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetSubscribeListCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetColumnSubscribes(ctx context.Context, in *GetColumnSubscribesReq, opts ...grpc.CallOption) (*GetColumnSubscribesReply, error) {
	out := new(GetColumnSubscribesReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetColumnSubscribes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) SendColumnEdit(ctx context.Context, in *SendColumnEditReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/SendColumnEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) EditColumn(ctx context.Context, in *EditColumnReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/EditColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) DeleteColumn(ctx context.Context, in *DeleteColumnReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/DeleteColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) DeleteColumnCacheAndSearch(ctx context.Context, in *DeleteColumnCacheAndSearchReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/DeleteColumnCacheAndSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) ColumnStatisticJudge(ctx context.Context, in *ColumnStatisticJudgeReq, opts ...grpc.CallOption) (*ColumnStatisticJudgeReply, error) {
	out := new(ColumnStatisticJudgeReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/ColumnStatisticJudge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) SetColumnAgree(ctx context.Context, in *SetColumnAgreeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/SetColumnAgree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) CancelColumnAgree(ctx context.Context, in *CancelColumnAgreeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/CancelColumnAgree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) SetColumnCollect(ctx context.Context, in *SetColumnCollectReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/SetColumnCollect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) CancelColumnCollect(ctx context.Context, in *CancelColumnCollectReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/CancelColumnCollect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) SetColumnView(ctx context.Context, in *SetColumnViewReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/SetColumnView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) AddColumnIncludes(ctx context.Context, in *AddColumnIncludesReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/AddColumnIncludes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) DeleteColumnIncludes(ctx context.Context, in *DeleteColumnIncludesReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/DeleteColumnIncludes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) GetNews(ctx context.Context, in *GetNewsReq, opts ...grpc.CallOption) (*GetNewsReply, error) {
	out := new(GetNewsReply)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/GetNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) AddCreationComment(ctx context.Context, in *AddCreationCommentReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/AddCreationComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creationClient) ReduceCreationComment(ctx context.Context, in *ReduceCreationCommentReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/creation.v1.Creation/ReduceCreationComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreationServer is the server API for Creation service.
// All implementations must embed UnimplementedCreationServer
// for forward compatibility
type CreationServer interface {
	GetLeaderBoard(context.Context, *emptypb.Empty) (*GetLeaderBoardReply, error)
	GetCollectArticle(context.Context, *GetCollectArticleReq) (*GetArticleListReply, error)
	GetCollectArticleCount(context.Context, *GetCollectArticleCountReq) (*GetCollectArticleCountReply, error)
	GetCollectTalk(context.Context, *GetCollectTalkReq) (*GetTalkListReply, error)
	GetCollectTalkCount(context.Context, *GetCollectTalkCountReq) (*GetCollectTalkCountReply, error)
	GetCollectColumn(context.Context, *GetCollectColumnReq) (*GetColumnListReply, error)
	GetCollectColumnCount(context.Context, *GetCollectColumnCountReq) (*GetCollectColumnCountReply, error)
	GetCollection(context.Context, *GetCollectionReq) (*GetCollectionReply, error)
	GetCollectionListInfo(context.Context, *GetCollectionListInfoReq) (*GetCollectionsReply, error)
	GetCollections(context.Context, *GetCollectionsReq) (*GetCollectionsReply, error)
	GetCollectionsCount(context.Context, *GetCollectionsCountReq) (*GetCollectionsCountReply, error)
	GetCollectionsByVisitor(context.Context, *GetCollectionsReq) (*GetCollectionsReply, error)
	GetCollectionsVisitorCount(context.Context, *GetCollectionsCountReq) (*GetCollectionsCountReply, error)
	CreateCollections(context.Context, *CreateCollectionsReq) (*emptypb.Empty, error)
	EditCollections(context.Context, *EditCollectionsReq) (*emptypb.Empty, error)
	DeleteCollections(context.Context, *DeleteCollectionsReq) (*emptypb.Empty, error)
	GetArticleList(context.Context, *GetArticleListReq) (*GetArticleListReply, error)
	GetArticleListHot(context.Context, *GetArticleListHotReq) (*GetArticleListHotReply, error)
	GetColumnArticleList(context.Context, *GetColumnArticleListReq) (*GetArticleListReply, error)
	GetArticleCount(context.Context, *GetArticleCountReq) (*GetArticleCountReply, error)
	GetArticleCountVisitor(context.Context, *GetArticleCountVisitorReq) (*GetArticleCountReply, error)
	GetUserArticleList(context.Context, *GetUserArticleListReq) (*GetArticleListReply, error)
	GetUserArticleListVisitor(context.Context, *GetUserArticleListVisitorReq) (*GetArticleListReply, error)
	GetArticleStatistic(context.Context, *GetArticleStatisticReq) (*GetArticleStatisticReply, error)
	GetArticleListStatistic(context.Context, *GetArticleListStatisticReq) (*GetArticleListStatisticReply, error)
	GetLastArticleDraft(context.Context, *GetLastArticleDraftReq) (*GetLastArticleDraftReply, error)
	GetArticleSearch(context.Context, *GetArticleSearchReq) (*GetArticleSearchReply, error)
	CreateArticle(context.Context, *CreateArticleReq) (*emptypb.Empty, error)
	EditArticle(context.Context, *EditArticleReq) (*emptypb.Empty, error)
	CreateArticleDbCacheAndSearch(context.Context, *CreateArticleDbCacheAndSearchReq) (*emptypb.Empty, error)
	EditArticleCosAndSearch(context.Context, *EditArticleCosAndSearchReq) (*emptypb.Empty, error)
	DeleteArticleCacheAndSearch(context.Context, *DeleteArticleCacheAndSearchReq) (*emptypb.Empty, error)
	CreateArticleDraft(context.Context, *CreateArticleDraftReq) (*CreateArticleDraftReply, error)
	ArticleDraftMark(context.Context, *ArticleDraftMarkReq) (*emptypb.Empty, error)
	GetArticleDraftList(context.Context, *GetArticleDraftListReq) (*GetArticleDraftListReply, error)
	SendArticle(context.Context, *SendArticleReq) (*emptypb.Empty, error)
	SendArticleEdit(context.Context, *SendArticleEditReq) (*emptypb.Empty, error)
	DeleteArticle(context.Context, *DeleteArticleReq) (*emptypb.Empty, error)
	SetArticleAgree(context.Context, *SetArticleAgreeReq) (*emptypb.Empty, error)
	SetArticleView(context.Context, *SetArticleViewReq) (*emptypb.Empty, error)
	SetArticleCollect(context.Context, *SetArticleCollectReq) (*emptypb.Empty, error)
	CancelArticleAgree(context.Context, *CancelArticleAgreeReq) (*emptypb.Empty, error)
	CancelArticleCollect(context.Context, *CancelArticleCollectReq) (*emptypb.Empty, error)
	ArticleStatisticJudge(context.Context, *ArticleStatisticJudgeReq) (*ArticleStatisticJudgeReply, error)
	GetTalkList(context.Context, *GetTalkListReq) (*GetTalkListReply, error)
	GetTalkListHot(context.Context, *GetTalkListHotReq) (*GetTalkListHotReply, error)
	GetUserTalkList(context.Context, *GetUserTalkListReq) (*GetTalkListReply, error)
	GetUserTalkListVisitor(context.Context, *GetUserTalkListVisitorReq) (*GetTalkListReply, error)
	GetTalkCount(context.Context, *GetTalkCountReq) (*GetTalkCountReply, error)
	GetTalkCountVisitor(context.Context, *GetTalkCountVisitorReq) (*GetTalkCountReply, error)
	GetTalkListStatistic(context.Context, *GetTalkListStatisticReq) (*GetTalkListStatisticReply, error)
	GetTalkStatistic(context.Context, *GetTalkStatisticReq) (*GetTalkStatisticReply, error)
	GetLastTalkDraft(context.Context, *GetLastTalkDraftReq) (*GetLastTalkDraftReply, error)
	GetTalkSearch(context.Context, *GetTalkSearchReq) (*GetTalkSearchReply, error)
	CreateTalkDraft(context.Context, *CreateTalkDraftReq) (*CreateTalkDraftReply, error)
	SendTalk(context.Context, *SendTalkReq) (*emptypb.Empty, error)
	SendTalkEdit(context.Context, *SendTalkEditReq) (*emptypb.Empty, error)
	CreateTalk(context.Context, *CreateTalkReq) (*emptypb.Empty, error)
	EditTalk(context.Context, *EditTalkReq) (*emptypb.Empty, error)
	DeleteTalk(context.Context, *DeleteTalkReq) (*emptypb.Empty, error)
	CreateTalkDbCacheAndSearch(context.Context, *CreateTalkDbCacheAndSearchReq) (*emptypb.Empty, error)
	EditTalkCosAndSearch(context.Context, *EditTalkCosAndSearchReq) (*emptypb.Empty, error)
	DeleteTalkCacheAndSearch(context.Context, *DeleteTalkCacheAndSearchReq) (*emptypb.Empty, error)
	SetTalkView(context.Context, *SetTalkViewReq) (*emptypb.Empty, error)
	TalkStatisticJudge(context.Context, *TalkStatisticJudgeReq) (*TalkStatisticJudgeReply, error)
	SetTalkAgree(context.Context, *SetTalkAgreeReq) (*emptypb.Empty, error)
	SetTalkCollect(context.Context, *SetTalkCollectReq) (*emptypb.Empty, error)
	CancelTalkAgree(context.Context, *CancelTalkAgreeReq) (*emptypb.Empty, error)
	CancelTalkCollect(context.Context, *CancelTalkCollectReq) (*emptypb.Empty, error)
	GetLastColumnDraft(context.Context, *GetLastColumnDraftReq) (*GetLastColumnDraftReply, error)
	GetColumnSearch(context.Context, *GetColumnSearchReq) (*GetColumnSearchReply, error)
	CreateColumnDraft(context.Context, *CreateColumnDraftReq) (*CreateColumnDraftReply, error)
	SendColumn(context.Context, *SendColumnReq) (*emptypb.Empty, error)
	CreateColumn(context.Context, *CreateColumnReq) (*emptypb.Empty, error)
	CreateColumnDbCacheAndSearch(context.Context, *CreateColumnDbCacheAndSearchReq) (*emptypb.Empty, error)
	SubscribeColumn(context.Context, *SubscribeColumnReq) (*emptypb.Empty, error)
	CancelSubscribeColumn(context.Context, *CancelSubscribeColumnReq) (*emptypb.Empty, error)
	SubscribeJudge(context.Context, *SubscribeJudgeReq) (*SubscribeJudgeReply, error)
	EditColumnCosAndSearch(context.Context, *EditColumnCosAndSearchReq) (*emptypb.Empty, error)
	GetColumnList(context.Context, *GetColumnListReq) (*GetColumnListReply, error)
	GetColumnListHot(context.Context, *GetColumnListHotReq) (*GetColumnListHotReply, error)
	GetColumnListStatistic(context.Context, *GetColumnListStatisticReq) (*GetColumnListStatisticReply, error)
	GetColumnStatistic(context.Context, *GetColumnStatisticReq) (*GetColumnStatisticReply, error)
	GetUserColumnList(context.Context, *GetUserColumnListReq) (*GetColumnListReply, error)
	GetUserColumnListVisitor(context.Context, *GetUserColumnListVisitorReq) (*GetColumnListReply, error)
	GetColumnCount(context.Context, *GetColumnCountReq) (*GetColumnCountReply, error)
	GetColumnCountVisitor(context.Context, *GetColumnCountVisitorReq) (*GetColumnCountReply, error)
	GetSubscribeList(context.Context, *GetSubscribeListReq) (*GetSubscribeListReply, error)
	GetSubscribeListCount(context.Context, *GetSubscribeListCountReq) (*GetSubscribeListCountReply, error)
	GetColumnSubscribes(context.Context, *GetColumnSubscribesReq) (*GetColumnSubscribesReply, error)
	SendColumnEdit(context.Context, *SendColumnEditReq) (*emptypb.Empty, error)
	EditColumn(context.Context, *EditColumnReq) (*emptypb.Empty, error)
	DeleteColumn(context.Context, *DeleteColumnReq) (*emptypb.Empty, error)
	DeleteColumnCacheAndSearch(context.Context, *DeleteColumnCacheAndSearchReq) (*emptypb.Empty, error)
	ColumnStatisticJudge(context.Context, *ColumnStatisticJudgeReq) (*ColumnStatisticJudgeReply, error)
	SetColumnAgree(context.Context, *SetColumnAgreeReq) (*emptypb.Empty, error)
	CancelColumnAgree(context.Context, *CancelColumnAgreeReq) (*emptypb.Empty, error)
	SetColumnCollect(context.Context, *SetColumnCollectReq) (*emptypb.Empty, error)
	CancelColumnCollect(context.Context, *CancelColumnCollectReq) (*emptypb.Empty, error)
	SetColumnView(context.Context, *SetColumnViewReq) (*emptypb.Empty, error)
	AddColumnIncludes(context.Context, *AddColumnIncludesReq) (*emptypb.Empty, error)
	DeleteColumnIncludes(context.Context, *DeleteColumnIncludesReq) (*emptypb.Empty, error)
	GetNews(context.Context, *GetNewsReq) (*GetNewsReply, error)
	AddCreationComment(context.Context, *AddCreationCommentReq) (*emptypb.Empty, error)
	ReduceCreationComment(context.Context, *ReduceCreationCommentReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedCreationServer()
}

// UnimplementedCreationServer must be embedded to have forward compatible implementations.
type UnimplementedCreationServer struct {
}

func (UnimplementedCreationServer) GetLeaderBoard(context.Context, *emptypb.Empty) (*GetLeaderBoardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaderBoard not implemented")
}
func (UnimplementedCreationServer) GetCollectArticle(context.Context, *GetCollectArticleReq) (*GetArticleListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectArticle not implemented")
}
func (UnimplementedCreationServer) GetCollectArticleCount(context.Context, *GetCollectArticleCountReq) (*GetCollectArticleCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectArticleCount not implemented")
}
func (UnimplementedCreationServer) GetCollectTalk(context.Context, *GetCollectTalkReq) (*GetTalkListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectTalk not implemented")
}
func (UnimplementedCreationServer) GetCollectTalkCount(context.Context, *GetCollectTalkCountReq) (*GetCollectTalkCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectTalkCount not implemented")
}
func (UnimplementedCreationServer) GetCollectColumn(context.Context, *GetCollectColumnReq) (*GetColumnListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectColumn not implemented")
}
func (UnimplementedCreationServer) GetCollectColumnCount(context.Context, *GetCollectColumnCountReq) (*GetCollectColumnCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectColumnCount not implemented")
}
func (UnimplementedCreationServer) GetCollection(context.Context, *GetCollectionReq) (*GetCollectionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollection not implemented")
}
func (UnimplementedCreationServer) GetCollectionListInfo(context.Context, *GetCollectionListInfoReq) (*GetCollectionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionListInfo not implemented")
}
func (UnimplementedCreationServer) GetCollections(context.Context, *GetCollectionsReq) (*GetCollectionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollections not implemented")
}
func (UnimplementedCreationServer) GetCollectionsCount(context.Context, *GetCollectionsCountReq) (*GetCollectionsCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionsCount not implemented")
}
func (UnimplementedCreationServer) GetCollectionsByVisitor(context.Context, *GetCollectionsReq) (*GetCollectionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionsByVisitor not implemented")
}
func (UnimplementedCreationServer) GetCollectionsVisitorCount(context.Context, *GetCollectionsCountReq) (*GetCollectionsCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionsVisitorCount not implemented")
}
func (UnimplementedCreationServer) CreateCollections(context.Context, *CreateCollectionsReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollections not implemented")
}
func (UnimplementedCreationServer) EditCollections(context.Context, *EditCollectionsReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditCollections not implemented")
}
func (UnimplementedCreationServer) DeleteCollections(context.Context, *DeleteCollectionsReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollections not implemented")
}
func (UnimplementedCreationServer) GetArticleList(context.Context, *GetArticleListReq) (*GetArticleListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleList not implemented")
}
func (UnimplementedCreationServer) GetArticleListHot(context.Context, *GetArticleListHotReq) (*GetArticleListHotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleListHot not implemented")
}
func (UnimplementedCreationServer) GetColumnArticleList(context.Context, *GetColumnArticleListReq) (*GetArticleListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColumnArticleList not implemented")
}
func (UnimplementedCreationServer) GetArticleCount(context.Context, *GetArticleCountReq) (*GetArticleCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleCount not implemented")
}
func (UnimplementedCreationServer) GetArticleCountVisitor(context.Context, *GetArticleCountVisitorReq) (*GetArticleCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleCountVisitor not implemented")
}
func (UnimplementedCreationServer) GetUserArticleList(context.Context, *GetUserArticleListReq) (*GetArticleListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserArticleList not implemented")
}
func (UnimplementedCreationServer) GetUserArticleListVisitor(context.Context, *GetUserArticleListVisitorReq) (*GetArticleListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserArticleListVisitor not implemented")
}
func (UnimplementedCreationServer) GetArticleStatistic(context.Context, *GetArticleStatisticReq) (*GetArticleStatisticReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleStatistic not implemented")
}
func (UnimplementedCreationServer) GetArticleListStatistic(context.Context, *GetArticleListStatisticReq) (*GetArticleListStatisticReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleListStatistic not implemented")
}
func (UnimplementedCreationServer) GetLastArticleDraft(context.Context, *GetLastArticleDraftReq) (*GetLastArticleDraftReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastArticleDraft not implemented")
}
func (UnimplementedCreationServer) GetArticleSearch(context.Context, *GetArticleSearchReq) (*GetArticleSearchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleSearch not implemented")
}
func (UnimplementedCreationServer) CreateArticle(context.Context, *CreateArticleReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticle not implemented")
}
func (UnimplementedCreationServer) EditArticle(context.Context, *EditArticleReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditArticle not implemented")
}
func (UnimplementedCreationServer) CreateArticleDbCacheAndSearch(context.Context, *CreateArticleDbCacheAndSearchReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticleDbCacheAndSearch not implemented")
}
func (UnimplementedCreationServer) EditArticleCosAndSearch(context.Context, *EditArticleCosAndSearchReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditArticleCosAndSearch not implemented")
}
func (UnimplementedCreationServer) DeleteArticleCacheAndSearch(context.Context, *DeleteArticleCacheAndSearchReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticleCacheAndSearch not implemented")
}
func (UnimplementedCreationServer) CreateArticleDraft(context.Context, *CreateArticleDraftReq) (*CreateArticleDraftReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticleDraft not implemented")
}
func (UnimplementedCreationServer) ArticleDraftMark(context.Context, *ArticleDraftMarkReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleDraftMark not implemented")
}
func (UnimplementedCreationServer) GetArticleDraftList(context.Context, *GetArticleDraftListReq) (*GetArticleDraftListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleDraftList not implemented")
}
func (UnimplementedCreationServer) SendArticle(context.Context, *SendArticleReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendArticle not implemented")
}
func (UnimplementedCreationServer) SendArticleEdit(context.Context, *SendArticleEditReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendArticleEdit not implemented")
}
func (UnimplementedCreationServer) DeleteArticle(context.Context, *DeleteArticleReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticle not implemented")
}
func (UnimplementedCreationServer) SetArticleAgree(context.Context, *SetArticleAgreeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetArticleAgree not implemented")
}
func (UnimplementedCreationServer) SetArticleView(context.Context, *SetArticleViewReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetArticleView not implemented")
}
func (UnimplementedCreationServer) SetArticleCollect(context.Context, *SetArticleCollectReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetArticleCollect not implemented")
}
func (UnimplementedCreationServer) CancelArticleAgree(context.Context, *CancelArticleAgreeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelArticleAgree not implemented")
}
func (UnimplementedCreationServer) CancelArticleCollect(context.Context, *CancelArticleCollectReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelArticleCollect not implemented")
}
func (UnimplementedCreationServer) ArticleStatisticJudge(context.Context, *ArticleStatisticJudgeReq) (*ArticleStatisticJudgeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleStatisticJudge not implemented")
}
func (UnimplementedCreationServer) GetTalkList(context.Context, *GetTalkListReq) (*GetTalkListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTalkList not implemented")
}
func (UnimplementedCreationServer) GetTalkListHot(context.Context, *GetTalkListHotReq) (*GetTalkListHotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTalkListHot not implemented")
}
func (UnimplementedCreationServer) GetUserTalkList(context.Context, *GetUserTalkListReq) (*GetTalkListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTalkList not implemented")
}
func (UnimplementedCreationServer) GetUserTalkListVisitor(context.Context, *GetUserTalkListVisitorReq) (*GetTalkListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTalkListVisitor not implemented")
}
func (UnimplementedCreationServer) GetTalkCount(context.Context, *GetTalkCountReq) (*GetTalkCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTalkCount not implemented")
}
func (UnimplementedCreationServer) GetTalkCountVisitor(context.Context, *GetTalkCountVisitorReq) (*GetTalkCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTalkCountVisitor not implemented")
}
func (UnimplementedCreationServer) GetTalkListStatistic(context.Context, *GetTalkListStatisticReq) (*GetTalkListStatisticReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTalkListStatistic not implemented")
}
func (UnimplementedCreationServer) GetTalkStatistic(context.Context, *GetTalkStatisticReq) (*GetTalkStatisticReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTalkStatistic not implemented")
}
func (UnimplementedCreationServer) GetLastTalkDraft(context.Context, *GetLastTalkDraftReq) (*GetLastTalkDraftReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastTalkDraft not implemented")
}
func (UnimplementedCreationServer) GetTalkSearch(context.Context, *GetTalkSearchReq) (*GetTalkSearchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTalkSearch not implemented")
}
func (UnimplementedCreationServer) CreateTalkDraft(context.Context, *CreateTalkDraftReq) (*CreateTalkDraftReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTalkDraft not implemented")
}
func (UnimplementedCreationServer) SendTalk(context.Context, *SendTalkReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTalk not implemented")
}
func (UnimplementedCreationServer) SendTalkEdit(context.Context, *SendTalkEditReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTalkEdit not implemented")
}
func (UnimplementedCreationServer) CreateTalk(context.Context, *CreateTalkReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTalk not implemented")
}
func (UnimplementedCreationServer) EditTalk(context.Context, *EditTalkReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditTalk not implemented")
}
func (UnimplementedCreationServer) DeleteTalk(context.Context, *DeleteTalkReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTalk not implemented")
}
func (UnimplementedCreationServer) CreateTalkDbCacheAndSearch(context.Context, *CreateTalkDbCacheAndSearchReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTalkDbCacheAndSearch not implemented")
}
func (UnimplementedCreationServer) EditTalkCosAndSearch(context.Context, *EditTalkCosAndSearchReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditTalkCosAndSearch not implemented")
}
func (UnimplementedCreationServer) DeleteTalkCacheAndSearch(context.Context, *DeleteTalkCacheAndSearchReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTalkCacheAndSearch not implemented")
}
func (UnimplementedCreationServer) SetTalkView(context.Context, *SetTalkViewReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTalkView not implemented")
}
func (UnimplementedCreationServer) TalkStatisticJudge(context.Context, *TalkStatisticJudgeReq) (*TalkStatisticJudgeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TalkStatisticJudge not implemented")
}
func (UnimplementedCreationServer) SetTalkAgree(context.Context, *SetTalkAgreeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTalkAgree not implemented")
}
func (UnimplementedCreationServer) SetTalkCollect(context.Context, *SetTalkCollectReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTalkCollect not implemented")
}
func (UnimplementedCreationServer) CancelTalkAgree(context.Context, *CancelTalkAgreeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTalkAgree not implemented")
}
func (UnimplementedCreationServer) CancelTalkCollect(context.Context, *CancelTalkCollectReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTalkCollect not implemented")
}
func (UnimplementedCreationServer) GetLastColumnDraft(context.Context, *GetLastColumnDraftReq) (*GetLastColumnDraftReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastColumnDraft not implemented")
}
func (UnimplementedCreationServer) GetColumnSearch(context.Context, *GetColumnSearchReq) (*GetColumnSearchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColumnSearch not implemented")
}
func (UnimplementedCreationServer) CreateColumnDraft(context.Context, *CreateColumnDraftReq) (*CreateColumnDraftReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateColumnDraft not implemented")
}
func (UnimplementedCreationServer) SendColumn(context.Context, *SendColumnReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendColumn not implemented")
}
func (UnimplementedCreationServer) CreateColumn(context.Context, *CreateColumnReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateColumn not implemented")
}
func (UnimplementedCreationServer) CreateColumnDbCacheAndSearch(context.Context, *CreateColumnDbCacheAndSearchReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateColumnDbCacheAndSearch not implemented")
}
func (UnimplementedCreationServer) SubscribeColumn(context.Context, *SubscribeColumnReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeColumn not implemented")
}
func (UnimplementedCreationServer) CancelSubscribeColumn(context.Context, *CancelSubscribeColumnReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSubscribeColumn not implemented")
}
func (UnimplementedCreationServer) SubscribeJudge(context.Context, *SubscribeJudgeReq) (*SubscribeJudgeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeJudge not implemented")
}
func (UnimplementedCreationServer) EditColumnCosAndSearch(context.Context, *EditColumnCosAndSearchReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditColumnCosAndSearch not implemented")
}
func (UnimplementedCreationServer) GetColumnList(context.Context, *GetColumnListReq) (*GetColumnListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColumnList not implemented")
}
func (UnimplementedCreationServer) GetColumnListHot(context.Context, *GetColumnListHotReq) (*GetColumnListHotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColumnListHot not implemented")
}
func (UnimplementedCreationServer) GetColumnListStatistic(context.Context, *GetColumnListStatisticReq) (*GetColumnListStatisticReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColumnListStatistic not implemented")
}
func (UnimplementedCreationServer) GetColumnStatistic(context.Context, *GetColumnStatisticReq) (*GetColumnStatisticReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColumnStatistic not implemented")
}
func (UnimplementedCreationServer) GetUserColumnList(context.Context, *GetUserColumnListReq) (*GetColumnListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserColumnList not implemented")
}
func (UnimplementedCreationServer) GetUserColumnListVisitor(context.Context, *GetUserColumnListVisitorReq) (*GetColumnListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserColumnListVisitor not implemented")
}
func (UnimplementedCreationServer) GetColumnCount(context.Context, *GetColumnCountReq) (*GetColumnCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColumnCount not implemented")
}
func (UnimplementedCreationServer) GetColumnCountVisitor(context.Context, *GetColumnCountVisitorReq) (*GetColumnCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColumnCountVisitor not implemented")
}
func (UnimplementedCreationServer) GetSubscribeList(context.Context, *GetSubscribeListReq) (*GetSubscribeListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscribeList not implemented")
}
func (UnimplementedCreationServer) GetSubscribeListCount(context.Context, *GetSubscribeListCountReq) (*GetSubscribeListCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscribeListCount not implemented")
}
func (UnimplementedCreationServer) GetColumnSubscribes(context.Context, *GetColumnSubscribesReq) (*GetColumnSubscribesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColumnSubscribes not implemented")
}
func (UnimplementedCreationServer) SendColumnEdit(context.Context, *SendColumnEditReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendColumnEdit not implemented")
}
func (UnimplementedCreationServer) EditColumn(context.Context, *EditColumnReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditColumn not implemented")
}
func (UnimplementedCreationServer) DeleteColumn(context.Context, *DeleteColumnReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteColumn not implemented")
}
func (UnimplementedCreationServer) DeleteColumnCacheAndSearch(context.Context, *DeleteColumnCacheAndSearchReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteColumnCacheAndSearch not implemented")
}
func (UnimplementedCreationServer) ColumnStatisticJudge(context.Context, *ColumnStatisticJudgeReq) (*ColumnStatisticJudgeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ColumnStatisticJudge not implemented")
}
func (UnimplementedCreationServer) SetColumnAgree(context.Context, *SetColumnAgreeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetColumnAgree not implemented")
}
func (UnimplementedCreationServer) CancelColumnAgree(context.Context, *CancelColumnAgreeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelColumnAgree not implemented")
}
func (UnimplementedCreationServer) SetColumnCollect(context.Context, *SetColumnCollectReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetColumnCollect not implemented")
}
func (UnimplementedCreationServer) CancelColumnCollect(context.Context, *CancelColumnCollectReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelColumnCollect not implemented")
}
func (UnimplementedCreationServer) SetColumnView(context.Context, *SetColumnViewReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetColumnView not implemented")
}
func (UnimplementedCreationServer) AddColumnIncludes(context.Context, *AddColumnIncludesReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddColumnIncludes not implemented")
}
func (UnimplementedCreationServer) DeleteColumnIncludes(context.Context, *DeleteColumnIncludesReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteColumnIncludes not implemented")
}
func (UnimplementedCreationServer) GetNews(context.Context, *GetNewsReq) (*GetNewsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNews not implemented")
}
func (UnimplementedCreationServer) AddCreationComment(context.Context, *AddCreationCommentReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCreationComment not implemented")
}
func (UnimplementedCreationServer) ReduceCreationComment(context.Context, *ReduceCreationCommentReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReduceCreationComment not implemented")
}
func (UnimplementedCreationServer) mustEmbedUnimplementedCreationServer() {}

// UnsafeCreationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreationServer will
// result in compilation errors.
type UnsafeCreationServer interface {
	mustEmbedUnimplementedCreationServer()
}

func RegisterCreationServer(s grpc.ServiceRegistrar, srv CreationServer) {
	s.RegisterService(&Creation_ServiceDesc, srv)
}

func _Creation_GetLeaderBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetLeaderBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetLeaderBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetLeaderBoard(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetCollectArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetCollectArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetCollectArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetCollectArticle(ctx, req.(*GetCollectArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetCollectArticleCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectArticleCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetCollectArticleCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetCollectArticleCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetCollectArticleCount(ctx, req.(*GetCollectArticleCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetCollectTalk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectTalkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetCollectTalk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetCollectTalk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetCollectTalk(ctx, req.(*GetCollectTalkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetCollectTalkCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectTalkCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetCollectTalkCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetCollectTalkCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetCollectTalkCount(ctx, req.(*GetCollectTalkCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetCollectColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectColumnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetCollectColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetCollectColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetCollectColumn(ctx, req.(*GetCollectColumnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetCollectColumnCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectColumnCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetCollectColumnCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetCollectColumnCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetCollectColumnCount(ctx, req.(*GetCollectColumnCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetCollection(ctx, req.(*GetCollectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetCollectionListInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionListInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetCollectionListInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetCollectionListInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetCollectionListInfo(ctx, req.(*GetCollectionListInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetCollections(ctx, req.(*GetCollectionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetCollectionsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionsCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetCollectionsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetCollectionsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetCollectionsCount(ctx, req.(*GetCollectionsCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetCollectionsByVisitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetCollectionsByVisitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetCollectionsByVisitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetCollectionsByVisitor(ctx, req.(*GetCollectionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetCollectionsVisitorCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionsCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetCollectionsVisitorCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetCollectionsVisitorCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetCollectionsVisitorCount(ctx, req.(*GetCollectionsCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_CreateCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCollectionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).CreateCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/CreateCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).CreateCollections(ctx, req.(*CreateCollectionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_EditCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditCollectionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).EditCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/EditCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).EditCollections(ctx, req.(*EditCollectionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_DeleteCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCollectionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).DeleteCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/DeleteCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).DeleteCollections(ctx, req.(*DeleteCollectionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetArticleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetArticleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetArticleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetArticleList(ctx, req.(*GetArticleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetArticleListHot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleListHotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetArticleListHot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetArticleListHot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetArticleListHot(ctx, req.(*GetArticleListHotReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetColumnArticleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetColumnArticleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetColumnArticleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetColumnArticleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetColumnArticleList(ctx, req.(*GetColumnArticleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetArticleCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetArticleCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetArticleCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetArticleCount(ctx, req.(*GetArticleCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetArticleCountVisitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleCountVisitorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetArticleCountVisitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetArticleCountVisitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetArticleCountVisitor(ctx, req.(*GetArticleCountVisitorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetUserArticleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserArticleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetUserArticleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetUserArticleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetUserArticleList(ctx, req.(*GetUserArticleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetUserArticleListVisitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserArticleListVisitorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetUserArticleListVisitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetUserArticleListVisitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetUserArticleListVisitor(ctx, req.(*GetUserArticleListVisitorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetArticleStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleStatisticReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetArticleStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetArticleStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetArticleStatistic(ctx, req.(*GetArticleStatisticReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetArticleListStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleListStatisticReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetArticleListStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetArticleListStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetArticleListStatistic(ctx, req.(*GetArticleListStatisticReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetLastArticleDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastArticleDraftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetLastArticleDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetLastArticleDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetLastArticleDraft(ctx, req.(*GetLastArticleDraftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetArticleSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetArticleSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetArticleSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetArticleSearch(ctx, req.(*GetArticleSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_CreateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).CreateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/CreateArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).CreateArticle(ctx, req.(*CreateArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_EditArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).EditArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/EditArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).EditArticle(ctx, req.(*EditArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_CreateArticleDbCacheAndSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArticleDbCacheAndSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).CreateArticleDbCacheAndSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/CreateArticleDbCacheAndSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).CreateArticleDbCacheAndSearch(ctx, req.(*CreateArticleDbCacheAndSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_EditArticleCosAndSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditArticleCosAndSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).EditArticleCosAndSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/EditArticleCosAndSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).EditArticleCosAndSearch(ctx, req.(*EditArticleCosAndSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_DeleteArticleCacheAndSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArticleCacheAndSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).DeleteArticleCacheAndSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/DeleteArticleCacheAndSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).DeleteArticleCacheAndSearch(ctx, req.(*DeleteArticleCacheAndSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_CreateArticleDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArticleDraftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).CreateArticleDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/CreateArticleDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).CreateArticleDraft(ctx, req.(*CreateArticleDraftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_ArticleDraftMark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleDraftMarkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).ArticleDraftMark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/ArticleDraftMark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).ArticleDraftMark(ctx, req.(*ArticleDraftMarkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetArticleDraftList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleDraftListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetArticleDraftList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetArticleDraftList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetArticleDraftList(ctx, req.(*GetArticleDraftListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_SendArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).SendArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/SendArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).SendArticle(ctx, req.(*SendArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_SendArticleEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendArticleEditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).SendArticleEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/SendArticleEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).SendArticleEdit(ctx, req.(*SendArticleEditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_DeleteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArticleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).DeleteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/DeleteArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).DeleteArticle(ctx, req.(*DeleteArticleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_SetArticleAgree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetArticleAgreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).SetArticleAgree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/SetArticleAgree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).SetArticleAgree(ctx, req.(*SetArticleAgreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_SetArticleView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetArticleViewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).SetArticleView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/SetArticleView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).SetArticleView(ctx, req.(*SetArticleViewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_SetArticleCollect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetArticleCollectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).SetArticleCollect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/SetArticleCollect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).SetArticleCollect(ctx, req.(*SetArticleCollectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_CancelArticleAgree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelArticleAgreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).CancelArticleAgree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/CancelArticleAgree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).CancelArticleAgree(ctx, req.(*CancelArticleAgreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_CancelArticleCollect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelArticleCollectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).CancelArticleCollect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/CancelArticleCollect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).CancelArticleCollect(ctx, req.(*CancelArticleCollectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_ArticleStatisticJudge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleStatisticJudgeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).ArticleStatisticJudge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/ArticleStatisticJudge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).ArticleStatisticJudge(ctx, req.(*ArticleStatisticJudgeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetTalkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTalkListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetTalkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetTalkList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetTalkList(ctx, req.(*GetTalkListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetTalkListHot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTalkListHotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetTalkListHot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetTalkListHot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetTalkListHot(ctx, req.(*GetTalkListHotReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetUserTalkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTalkListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetUserTalkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetUserTalkList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetUserTalkList(ctx, req.(*GetUserTalkListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetUserTalkListVisitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTalkListVisitorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetUserTalkListVisitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetUserTalkListVisitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetUserTalkListVisitor(ctx, req.(*GetUserTalkListVisitorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetTalkCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTalkCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetTalkCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetTalkCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetTalkCount(ctx, req.(*GetTalkCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetTalkCountVisitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTalkCountVisitorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetTalkCountVisitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetTalkCountVisitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetTalkCountVisitor(ctx, req.(*GetTalkCountVisitorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetTalkListStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTalkListStatisticReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetTalkListStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetTalkListStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetTalkListStatistic(ctx, req.(*GetTalkListStatisticReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetTalkStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTalkStatisticReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetTalkStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetTalkStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetTalkStatistic(ctx, req.(*GetTalkStatisticReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetLastTalkDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastTalkDraftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetLastTalkDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetLastTalkDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetLastTalkDraft(ctx, req.(*GetLastTalkDraftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetTalkSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTalkSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetTalkSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetTalkSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetTalkSearch(ctx, req.(*GetTalkSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_CreateTalkDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTalkDraftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).CreateTalkDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/CreateTalkDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).CreateTalkDraft(ctx, req.(*CreateTalkDraftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_SendTalk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTalkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).SendTalk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/SendTalk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).SendTalk(ctx, req.(*SendTalkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_SendTalkEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTalkEditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).SendTalkEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/SendTalkEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).SendTalkEdit(ctx, req.(*SendTalkEditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_CreateTalk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTalkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).CreateTalk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/CreateTalk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).CreateTalk(ctx, req.(*CreateTalkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_EditTalk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditTalkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).EditTalk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/EditTalk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).EditTalk(ctx, req.(*EditTalkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_DeleteTalk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTalkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).DeleteTalk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/DeleteTalk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).DeleteTalk(ctx, req.(*DeleteTalkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_CreateTalkDbCacheAndSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTalkDbCacheAndSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).CreateTalkDbCacheAndSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/CreateTalkDbCacheAndSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).CreateTalkDbCacheAndSearch(ctx, req.(*CreateTalkDbCacheAndSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_EditTalkCosAndSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditTalkCosAndSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).EditTalkCosAndSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/EditTalkCosAndSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).EditTalkCosAndSearch(ctx, req.(*EditTalkCosAndSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_DeleteTalkCacheAndSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTalkCacheAndSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).DeleteTalkCacheAndSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/DeleteTalkCacheAndSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).DeleteTalkCacheAndSearch(ctx, req.(*DeleteTalkCacheAndSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_SetTalkView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTalkViewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).SetTalkView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/SetTalkView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).SetTalkView(ctx, req.(*SetTalkViewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_TalkStatisticJudge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TalkStatisticJudgeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).TalkStatisticJudge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/TalkStatisticJudge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).TalkStatisticJudge(ctx, req.(*TalkStatisticJudgeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_SetTalkAgree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTalkAgreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).SetTalkAgree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/SetTalkAgree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).SetTalkAgree(ctx, req.(*SetTalkAgreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_SetTalkCollect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTalkCollectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).SetTalkCollect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/SetTalkCollect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).SetTalkCollect(ctx, req.(*SetTalkCollectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_CancelTalkAgree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTalkAgreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).CancelTalkAgree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/CancelTalkAgree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).CancelTalkAgree(ctx, req.(*CancelTalkAgreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_CancelTalkCollect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTalkCollectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).CancelTalkCollect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/CancelTalkCollect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).CancelTalkCollect(ctx, req.(*CancelTalkCollectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetLastColumnDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastColumnDraftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetLastColumnDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetLastColumnDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetLastColumnDraft(ctx, req.(*GetLastColumnDraftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetColumnSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetColumnSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetColumnSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetColumnSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetColumnSearch(ctx, req.(*GetColumnSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_CreateColumnDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateColumnDraftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).CreateColumnDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/CreateColumnDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).CreateColumnDraft(ctx, req.(*CreateColumnDraftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_SendColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendColumnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).SendColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/SendColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).SendColumn(ctx, req.(*SendColumnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_CreateColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateColumnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).CreateColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/CreateColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).CreateColumn(ctx, req.(*CreateColumnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_CreateColumnDbCacheAndSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateColumnDbCacheAndSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).CreateColumnDbCacheAndSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/CreateColumnDbCacheAndSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).CreateColumnDbCacheAndSearch(ctx, req.(*CreateColumnDbCacheAndSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_SubscribeColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeColumnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).SubscribeColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/SubscribeColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).SubscribeColumn(ctx, req.(*SubscribeColumnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_CancelSubscribeColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelSubscribeColumnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).CancelSubscribeColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/CancelSubscribeColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).CancelSubscribeColumn(ctx, req.(*CancelSubscribeColumnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_SubscribeJudge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeJudgeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).SubscribeJudge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/SubscribeJudge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).SubscribeJudge(ctx, req.(*SubscribeJudgeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_EditColumnCosAndSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditColumnCosAndSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).EditColumnCosAndSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/EditColumnCosAndSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).EditColumnCosAndSearch(ctx, req.(*EditColumnCosAndSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetColumnList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetColumnListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetColumnList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetColumnList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetColumnList(ctx, req.(*GetColumnListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetColumnListHot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetColumnListHotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetColumnListHot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetColumnListHot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetColumnListHot(ctx, req.(*GetColumnListHotReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetColumnListStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetColumnListStatisticReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetColumnListStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetColumnListStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetColumnListStatistic(ctx, req.(*GetColumnListStatisticReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetColumnStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetColumnStatisticReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetColumnStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetColumnStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetColumnStatistic(ctx, req.(*GetColumnStatisticReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetUserColumnList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserColumnListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetUserColumnList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetUserColumnList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetUserColumnList(ctx, req.(*GetUserColumnListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetUserColumnListVisitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserColumnListVisitorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetUserColumnListVisitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetUserColumnListVisitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetUserColumnListVisitor(ctx, req.(*GetUserColumnListVisitorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetColumnCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetColumnCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetColumnCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetColumnCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetColumnCount(ctx, req.(*GetColumnCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetColumnCountVisitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetColumnCountVisitorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetColumnCountVisitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetColumnCountVisitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetColumnCountVisitor(ctx, req.(*GetColumnCountVisitorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetSubscribeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscribeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetSubscribeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetSubscribeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetSubscribeList(ctx, req.(*GetSubscribeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetSubscribeListCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscribeListCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetSubscribeListCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetSubscribeListCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetSubscribeListCount(ctx, req.(*GetSubscribeListCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetColumnSubscribes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetColumnSubscribesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetColumnSubscribes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetColumnSubscribes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetColumnSubscribes(ctx, req.(*GetColumnSubscribesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_SendColumnEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendColumnEditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).SendColumnEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/SendColumnEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).SendColumnEdit(ctx, req.(*SendColumnEditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_EditColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditColumnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).EditColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/EditColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).EditColumn(ctx, req.(*EditColumnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_DeleteColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteColumnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).DeleteColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/DeleteColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).DeleteColumn(ctx, req.(*DeleteColumnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_DeleteColumnCacheAndSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteColumnCacheAndSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).DeleteColumnCacheAndSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/DeleteColumnCacheAndSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).DeleteColumnCacheAndSearch(ctx, req.(*DeleteColumnCacheAndSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_ColumnStatisticJudge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColumnStatisticJudgeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).ColumnStatisticJudge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/ColumnStatisticJudge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).ColumnStatisticJudge(ctx, req.(*ColumnStatisticJudgeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_SetColumnAgree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetColumnAgreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).SetColumnAgree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/SetColumnAgree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).SetColumnAgree(ctx, req.(*SetColumnAgreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_CancelColumnAgree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelColumnAgreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).CancelColumnAgree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/CancelColumnAgree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).CancelColumnAgree(ctx, req.(*CancelColumnAgreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_SetColumnCollect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetColumnCollectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).SetColumnCollect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/SetColumnCollect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).SetColumnCollect(ctx, req.(*SetColumnCollectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_CancelColumnCollect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelColumnCollectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).CancelColumnCollect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/CancelColumnCollect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).CancelColumnCollect(ctx, req.(*CancelColumnCollectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_SetColumnView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetColumnViewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).SetColumnView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/SetColumnView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).SetColumnView(ctx, req.(*SetColumnViewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_AddColumnIncludes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddColumnIncludesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).AddColumnIncludes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/AddColumnIncludes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).AddColumnIncludes(ctx, req.(*AddColumnIncludesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_DeleteColumnIncludes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteColumnIncludesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).DeleteColumnIncludes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/DeleteColumnIncludes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).DeleteColumnIncludes(ctx, req.(*DeleteColumnIncludesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_GetNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).GetNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/GetNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).GetNews(ctx, req.(*GetNewsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_AddCreationComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCreationCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).AddCreationComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/AddCreationComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).AddCreationComment(ctx, req.(*AddCreationCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creation_ReduceCreationComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReduceCreationCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreationServer).ReduceCreationComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creation.v1.Creation/ReduceCreationComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreationServer).ReduceCreationComment(ctx, req.(*ReduceCreationCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Creation_ServiceDesc is the grpc.ServiceDesc for Creation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Creation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "creation.v1.Creation",
	HandlerType: (*CreationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLeaderBoard",
			Handler:    _Creation_GetLeaderBoard_Handler,
		},
		{
			MethodName: "GetCollectArticle",
			Handler:    _Creation_GetCollectArticle_Handler,
		},
		{
			MethodName: "GetCollectArticleCount",
			Handler:    _Creation_GetCollectArticleCount_Handler,
		},
		{
			MethodName: "GetCollectTalk",
			Handler:    _Creation_GetCollectTalk_Handler,
		},
		{
			MethodName: "GetCollectTalkCount",
			Handler:    _Creation_GetCollectTalkCount_Handler,
		},
		{
			MethodName: "GetCollectColumn",
			Handler:    _Creation_GetCollectColumn_Handler,
		},
		{
			MethodName: "GetCollectColumnCount",
			Handler:    _Creation_GetCollectColumnCount_Handler,
		},
		{
			MethodName: "GetCollection",
			Handler:    _Creation_GetCollection_Handler,
		},
		{
			MethodName: "GetCollectionListInfo",
			Handler:    _Creation_GetCollectionListInfo_Handler,
		},
		{
			MethodName: "GetCollections",
			Handler:    _Creation_GetCollections_Handler,
		},
		{
			MethodName: "GetCollectionsCount",
			Handler:    _Creation_GetCollectionsCount_Handler,
		},
		{
			MethodName: "GetCollectionsByVisitor",
			Handler:    _Creation_GetCollectionsByVisitor_Handler,
		},
		{
			MethodName: "GetCollectionsVisitorCount",
			Handler:    _Creation_GetCollectionsVisitorCount_Handler,
		},
		{
			MethodName: "CreateCollections",
			Handler:    _Creation_CreateCollections_Handler,
		},
		{
			MethodName: "EditCollections",
			Handler:    _Creation_EditCollections_Handler,
		},
		{
			MethodName: "DeleteCollections",
			Handler:    _Creation_DeleteCollections_Handler,
		},
		{
			MethodName: "GetArticleList",
			Handler:    _Creation_GetArticleList_Handler,
		},
		{
			MethodName: "GetArticleListHot",
			Handler:    _Creation_GetArticleListHot_Handler,
		},
		{
			MethodName: "GetColumnArticleList",
			Handler:    _Creation_GetColumnArticleList_Handler,
		},
		{
			MethodName: "GetArticleCount",
			Handler:    _Creation_GetArticleCount_Handler,
		},
		{
			MethodName: "GetArticleCountVisitor",
			Handler:    _Creation_GetArticleCountVisitor_Handler,
		},
		{
			MethodName: "GetUserArticleList",
			Handler:    _Creation_GetUserArticleList_Handler,
		},
		{
			MethodName: "GetUserArticleListVisitor",
			Handler:    _Creation_GetUserArticleListVisitor_Handler,
		},
		{
			MethodName: "GetArticleStatistic",
			Handler:    _Creation_GetArticleStatistic_Handler,
		},
		{
			MethodName: "GetArticleListStatistic",
			Handler:    _Creation_GetArticleListStatistic_Handler,
		},
		{
			MethodName: "GetLastArticleDraft",
			Handler:    _Creation_GetLastArticleDraft_Handler,
		},
		{
			MethodName: "GetArticleSearch",
			Handler:    _Creation_GetArticleSearch_Handler,
		},
		{
			MethodName: "CreateArticle",
			Handler:    _Creation_CreateArticle_Handler,
		},
		{
			MethodName: "EditArticle",
			Handler:    _Creation_EditArticle_Handler,
		},
		{
			MethodName: "CreateArticleDbCacheAndSearch",
			Handler:    _Creation_CreateArticleDbCacheAndSearch_Handler,
		},
		{
			MethodName: "EditArticleCosAndSearch",
			Handler:    _Creation_EditArticleCosAndSearch_Handler,
		},
		{
			MethodName: "DeleteArticleCacheAndSearch",
			Handler:    _Creation_DeleteArticleCacheAndSearch_Handler,
		},
		{
			MethodName: "CreateArticleDraft",
			Handler:    _Creation_CreateArticleDraft_Handler,
		},
		{
			MethodName: "ArticleDraftMark",
			Handler:    _Creation_ArticleDraftMark_Handler,
		},
		{
			MethodName: "GetArticleDraftList",
			Handler:    _Creation_GetArticleDraftList_Handler,
		},
		{
			MethodName: "SendArticle",
			Handler:    _Creation_SendArticle_Handler,
		},
		{
			MethodName: "SendArticleEdit",
			Handler:    _Creation_SendArticleEdit_Handler,
		},
		{
			MethodName: "DeleteArticle",
			Handler:    _Creation_DeleteArticle_Handler,
		},
		{
			MethodName: "SetArticleAgree",
			Handler:    _Creation_SetArticleAgree_Handler,
		},
		{
			MethodName: "SetArticleView",
			Handler:    _Creation_SetArticleView_Handler,
		},
		{
			MethodName: "SetArticleCollect",
			Handler:    _Creation_SetArticleCollect_Handler,
		},
		{
			MethodName: "CancelArticleAgree",
			Handler:    _Creation_CancelArticleAgree_Handler,
		},
		{
			MethodName: "CancelArticleCollect",
			Handler:    _Creation_CancelArticleCollect_Handler,
		},
		{
			MethodName: "ArticleStatisticJudge",
			Handler:    _Creation_ArticleStatisticJudge_Handler,
		},
		{
			MethodName: "GetTalkList",
			Handler:    _Creation_GetTalkList_Handler,
		},
		{
			MethodName: "GetTalkListHot",
			Handler:    _Creation_GetTalkListHot_Handler,
		},
		{
			MethodName: "GetUserTalkList",
			Handler:    _Creation_GetUserTalkList_Handler,
		},
		{
			MethodName: "GetUserTalkListVisitor",
			Handler:    _Creation_GetUserTalkListVisitor_Handler,
		},
		{
			MethodName: "GetTalkCount",
			Handler:    _Creation_GetTalkCount_Handler,
		},
		{
			MethodName: "GetTalkCountVisitor",
			Handler:    _Creation_GetTalkCountVisitor_Handler,
		},
		{
			MethodName: "GetTalkListStatistic",
			Handler:    _Creation_GetTalkListStatistic_Handler,
		},
		{
			MethodName: "GetTalkStatistic",
			Handler:    _Creation_GetTalkStatistic_Handler,
		},
		{
			MethodName: "GetLastTalkDraft",
			Handler:    _Creation_GetLastTalkDraft_Handler,
		},
		{
			MethodName: "GetTalkSearch",
			Handler:    _Creation_GetTalkSearch_Handler,
		},
		{
			MethodName: "CreateTalkDraft",
			Handler:    _Creation_CreateTalkDraft_Handler,
		},
		{
			MethodName: "SendTalk",
			Handler:    _Creation_SendTalk_Handler,
		},
		{
			MethodName: "SendTalkEdit",
			Handler:    _Creation_SendTalkEdit_Handler,
		},
		{
			MethodName: "CreateTalk",
			Handler:    _Creation_CreateTalk_Handler,
		},
		{
			MethodName: "EditTalk",
			Handler:    _Creation_EditTalk_Handler,
		},
		{
			MethodName: "DeleteTalk",
			Handler:    _Creation_DeleteTalk_Handler,
		},
		{
			MethodName: "CreateTalkDbCacheAndSearch",
			Handler:    _Creation_CreateTalkDbCacheAndSearch_Handler,
		},
		{
			MethodName: "EditTalkCosAndSearch",
			Handler:    _Creation_EditTalkCosAndSearch_Handler,
		},
		{
			MethodName: "DeleteTalkCacheAndSearch",
			Handler:    _Creation_DeleteTalkCacheAndSearch_Handler,
		},
		{
			MethodName: "SetTalkView",
			Handler:    _Creation_SetTalkView_Handler,
		},
		{
			MethodName: "TalkStatisticJudge",
			Handler:    _Creation_TalkStatisticJudge_Handler,
		},
		{
			MethodName: "SetTalkAgree",
			Handler:    _Creation_SetTalkAgree_Handler,
		},
		{
			MethodName: "SetTalkCollect",
			Handler:    _Creation_SetTalkCollect_Handler,
		},
		{
			MethodName: "CancelTalkAgree",
			Handler:    _Creation_CancelTalkAgree_Handler,
		},
		{
			MethodName: "CancelTalkCollect",
			Handler:    _Creation_CancelTalkCollect_Handler,
		},
		{
			MethodName: "GetLastColumnDraft",
			Handler:    _Creation_GetLastColumnDraft_Handler,
		},
		{
			MethodName: "GetColumnSearch",
			Handler:    _Creation_GetColumnSearch_Handler,
		},
		{
			MethodName: "CreateColumnDraft",
			Handler:    _Creation_CreateColumnDraft_Handler,
		},
		{
			MethodName: "SendColumn",
			Handler:    _Creation_SendColumn_Handler,
		},
		{
			MethodName: "CreateColumn",
			Handler:    _Creation_CreateColumn_Handler,
		},
		{
			MethodName: "CreateColumnDbCacheAndSearch",
			Handler:    _Creation_CreateColumnDbCacheAndSearch_Handler,
		},
		{
			MethodName: "SubscribeColumn",
			Handler:    _Creation_SubscribeColumn_Handler,
		},
		{
			MethodName: "CancelSubscribeColumn",
			Handler:    _Creation_CancelSubscribeColumn_Handler,
		},
		{
			MethodName: "SubscribeJudge",
			Handler:    _Creation_SubscribeJudge_Handler,
		},
		{
			MethodName: "EditColumnCosAndSearch",
			Handler:    _Creation_EditColumnCosAndSearch_Handler,
		},
		{
			MethodName: "GetColumnList",
			Handler:    _Creation_GetColumnList_Handler,
		},
		{
			MethodName: "GetColumnListHot",
			Handler:    _Creation_GetColumnListHot_Handler,
		},
		{
			MethodName: "GetColumnListStatistic",
			Handler:    _Creation_GetColumnListStatistic_Handler,
		},
		{
			MethodName: "GetColumnStatistic",
			Handler:    _Creation_GetColumnStatistic_Handler,
		},
		{
			MethodName: "GetUserColumnList",
			Handler:    _Creation_GetUserColumnList_Handler,
		},
		{
			MethodName: "GetUserColumnListVisitor",
			Handler:    _Creation_GetUserColumnListVisitor_Handler,
		},
		{
			MethodName: "GetColumnCount",
			Handler:    _Creation_GetColumnCount_Handler,
		},
		{
			MethodName: "GetColumnCountVisitor",
			Handler:    _Creation_GetColumnCountVisitor_Handler,
		},
		{
			MethodName: "GetSubscribeList",
			Handler:    _Creation_GetSubscribeList_Handler,
		},
		{
			MethodName: "GetSubscribeListCount",
			Handler:    _Creation_GetSubscribeListCount_Handler,
		},
		{
			MethodName: "GetColumnSubscribes",
			Handler:    _Creation_GetColumnSubscribes_Handler,
		},
		{
			MethodName: "SendColumnEdit",
			Handler:    _Creation_SendColumnEdit_Handler,
		},
		{
			MethodName: "EditColumn",
			Handler:    _Creation_EditColumn_Handler,
		},
		{
			MethodName: "DeleteColumn",
			Handler:    _Creation_DeleteColumn_Handler,
		},
		{
			MethodName: "DeleteColumnCacheAndSearch",
			Handler:    _Creation_DeleteColumnCacheAndSearch_Handler,
		},
		{
			MethodName: "ColumnStatisticJudge",
			Handler:    _Creation_ColumnStatisticJudge_Handler,
		},
		{
			MethodName: "SetColumnAgree",
			Handler:    _Creation_SetColumnAgree_Handler,
		},
		{
			MethodName: "CancelColumnAgree",
			Handler:    _Creation_CancelColumnAgree_Handler,
		},
		{
			MethodName: "SetColumnCollect",
			Handler:    _Creation_SetColumnCollect_Handler,
		},
		{
			MethodName: "CancelColumnCollect",
			Handler:    _Creation_CancelColumnCollect_Handler,
		},
		{
			MethodName: "SetColumnView",
			Handler:    _Creation_SetColumnView_Handler,
		},
		{
			MethodName: "AddColumnIncludes",
			Handler:    _Creation_AddColumnIncludes_Handler,
		},
		{
			MethodName: "DeleteColumnIncludes",
			Handler:    _Creation_DeleteColumnIncludes_Handler,
		},
		{
			MethodName: "GetNews",
			Handler:    _Creation_GetNews_Handler,
		},
		{
			MethodName: "AddCreationComment",
			Handler:    _Creation_AddCreationComment_Handler,
		},
		{
			MethodName: "ReduceCreationComment",
			Handler:    _Creation_ReduceCreationComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "creation/service/v1/creation.proto",
}
