syntax = "proto3";

package comment.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";

option go_package = "api/comment/service/v1;v1";

service Comment {
  rpc GetHealth(google.protobuf.Empty) returns (google.protobuf.Empty){
    option (google.api.http) = {
      get: "/v1/get/comment/health"
    };
  }

  rpc GetLastCommentDraft(GetLastCommentDraftReq) returns (GetLastCommentDraftReply){}

  rpc GetUserCommentAgree(GetUserCommentAgreeReq) returns (GetUserCommentAgreeReply){}

  rpc GetCommentUser(GetCommentUserReq) returns (GetCommentUserReply){}

  rpc GetCommentList(GetCommentListReq) returns (GetCommentListReply){}

  rpc GetSubCommentList(GetSubCommentListReq) returns (GetSubCommentListReply){}

  rpc GetCommentListHot(GetCommentListReq) returns (GetCommentListReply){}

  rpc GetCommentListStatistic(GetCommentListStatisticReq)returns (GetCommentListStatisticReply){}

  rpc GetSubCommentListStatistic(GetCommentListStatisticReq)returns (GetCommentListStatisticReply){}

  rpc CreateCommentDraft(CreateCommentDraftReq) returns (CreateCommentDraftReply){}

  rpc CreateComment(CreateCommentReq) returns (google.protobuf.Empty){}

  rpc CreateSubComment(CreateSubCommentReq) returns (google.protobuf.Empty){}

  rpc CreateCommentDbAndCache(CreateCommentDbAndCacheReq) returns (google.protobuf.Empty){}

  rpc CreateSubCommentDbAndCache(CreateSubCommentDbAndCacheReq) returns (google.protobuf.Empty){}

  rpc SendComment(SendCommentReq) returns (google.protobuf.Empty){}

  rpc SendSubComment(SendSubCommentReq) returns (google.protobuf.Empty){}

  rpc SetCommentAgree(SetCommentAgreeReq) returns (google.protobuf.Empty){}

  rpc SetSubCommentAgree(SetSubCommentAgreeReq) returns (google.protobuf.Empty){}

  rpc SetCommentAgreeDbAndCache(SetCommentAgreeReq) returns (google.protobuf.Empty){}

  rpc SetSubCommentAgreeDbAndCache(SetSubCommentAgreeReq) returns (google.protobuf.Empty){}

  rpc CancelCommentAgree(CancelCommentAgreeReq) returns (google.protobuf.Empty){}

  rpc CancelSubCommentAgree(CancelSubCommentAgreeReq) returns (google.protobuf.Empty){}

  rpc CancelCommentAgreeDbAndCache(CancelCommentAgreeReq) returns (google.protobuf.Empty){}

  rpc CancelSubCommentAgreeDbAndCache(CancelSubCommentAgreeReq) returns (google.protobuf.Empty){}

  rpc RemoveComment(RemoveCommentReq) returns (google.protobuf.Empty){}

  rpc RemoveSubComment(RemoveSubCommentReq) returns (google.protobuf.Empty){}

  rpc RemoveCommentDbAndCache(RemoveCommentDbAndCacheReq) returns (google.protobuf.Empty){}

  rpc RemoveSubCommentDbAndCache(RemoveSubCommentDbAndCacheReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/text"
      body: "*"
    };
  }

}

message CreateCommentDraftReq{
  string uuid = 1 [(validate.rules).string.uuid = true];
}

message CreateCommentDraftReply{
  int32 id = 1;
}

message GetLastCommentDraftReq{
  string uuid = 1 [(validate.rules).string.uuid = true];
}

message GetLastCommentDraftReply{
  int32 id = 1;
  int32 status = 2;
}

message GetUserCommentAgreeReq{
  string uuid = 1 [(validate.rules).string.uuid = true];
}

message GetUserCommentAgreeReply{
  map<int32, bool> agree = 1;
}

message GetCommentUserReq{
  string uuid = 1 [(validate.rules).string.uuid = true];
}

message GetCommentUserReply{
  int32 comment = 1;
}

message SendCommentReq{
  int32 id = 1;
  string uuid = 2 [(validate.rules).string.uuid = true];
  string ip = 3 [(validate.rules).string.ip = true];
}

message SendSubCommentReq{
  int32 id = 1;
  string uuid = 2 [(validate.rules).string.uuid = true];
  string ip = 3 [(validate.rules).string.ip = true];
}

message CreateCommentReq{
  int32 id = 1;
  int32 creationId = 2;
  int32 creationType = 3;
  string uuid = 4 [(validate.rules).string.uuid = true];
}

message CreateSubCommentReq{
  int32 id = 1;
  int32 rootId = 2;
  int32 parentId = 3;
  string uuid = 4 [(validate.rules).string.uuid = true];
}

message CreateCommentDbAndCacheReq{
  int32 id = 1;
  int32 creationId = 2;
  int32 creationType = 3;
  string uuid = 4 [(validate.rules).string.uuid = true];
}

message CreateSubCommentDbAndCacheReq{
  int32 id = 1;
  int32 rootId = 2;
  int32 parentId = 3;
  string uuid = 4 [(validate.rules).string.uuid = true];
}

message GetCommentListReq{
  int32 page = 1;
  int32 creationId = 2;
  int32 creationType = 3;
}

message GetSubCommentListReq{
  int32 page = 1;
  int32 id = 2;
}

message GetCommentListReply{
  message Comment{
    int32 id = 1;
    string uuid = 2;
  }
  repeated Comment comment = 1;
}

message GetSubCommentListReply{
  message Comment{
    int32 id = 1;
    string uuid = 2;
    string reply = 3;
  }
  repeated Comment comment = 1;
}

message RemoveCommentDbAndCacheReq{
  int32 id = 1;
  int32 creationId = 2;
  int32 creationType = 3;
  string uuid = 4 [(validate.rules).string.uuid = true];
}

message RemoveSubCommentDbAndCacheReq{
  int32 id = 1;
  int32 rootId = 2;
  string uuid = 4 [(validate.rules).string.uuid = true];
}

message GetCommentListStatisticReq{
  repeated int32 ids = 1;
}

message GetCommentListStatisticReply{
  message Count{
    int32 id = 1;
    int32 agree = 2;
    int32 comment = 5;
  }
  repeated Count count = 1;
}

message SetCommentAgreeReq{
  int32 id = 1;
  string uuid = 2 [(validate.rules).string.uuid = true];
  string user_uuid = 3 [(validate.rules).string.uuid = true];
  int32 creationId = 4;
  int32 creationType = 5;
}

message SetSubCommentAgreeReq{
  int32 id = 1;
  string uuid = 2 [(validate.rules).string.uuid = true];
  string user_uuid = 3 [(validate.rules).string.uuid = true];
}

message CancelCommentAgreeReq{
  int32 id = 1;
  string uuid = 2 [(validate.rules).string.uuid = true];
  string user_uuid = 3 [(validate.rules).string.uuid = true];
  int32 creationId = 4;
  int32 creationType = 5;
}

message CancelSubCommentAgreeReq{
  int32 id = 1;
  string uuid = 2 [(validate.rules).string.uuid = true];
  string user_uuid = 3 [(validate.rules).string.uuid = true];
}

message RemoveCommentReq{
  int32 id = 1;
  string uuid = 2 [(validate.rules).string.uuid = true];
  string user_uuid = 3 [(validate.rules).string.uuid = true];
  int32 creationId = 4;
  int32 creationType = 5;
}

message RemoveSubCommentReq{
  int32 id = 1;
  int32 rootId = 2;
  string uuid = 3 [(validate.rules).string.uuid = true];
  string user_uuid = 4 [(validate.rules).string.uuid = true];
  string reply = 5 [(validate.rules).string = {ignore_empty:true, uuid:true}];
}