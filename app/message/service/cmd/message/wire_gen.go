// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/contrib/registry/nacos/v2"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/the-zion/matrix-core/app/message/service/internal/biz"
	"github.com/the-zion/matrix-core/app/message/service/internal/conf"
	"github.com/the-zion/matrix-core/app/message/service/internal/data"
	"github.com/the-zion/matrix-core/app/message/service/internal/server"
	"github.com/the-zion/matrix-core/app/message/service/internal/service"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger, registry *nacos.Registry) (*kratos.App, func(), error) {
	userClient := data.NewUserServiceClient(registry, logger)
	creationClient := data.NewCreationServiceClient(registry, logger)
	commentClient := data.NewCommentServiceClient(registry, logger)
	achievementClient := data.NewAchievementServiceClient(registry, logger)
	jwt := data.NewJwtClient(confData)
	cosUser := data.NewCosUserClient(confData, logger)
	cosCreation := data.NewCosCreationClient(confData, logger)
	cosComment := data.NewCosCommentClient(confData, logger)
	txCode := data.NewPhoneCode(confData)
	goMail := data.NewGoMail(confData)
	dataData, err := data.NewData(logger, userClient, creationClient, commentClient, achievementClient, jwt, cosUser, cosCreation, cosComment, txCode, goMail)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData, logger)
	userUseCase := biz.NewUserUseCase(userRepo, logger)
	creationRepo := data.NewCreationRepo(dataData, logger)
	bizJwt := data.NewJwt(dataData)
	creationUseCase := biz.NewCreationUseCase(creationRepo, bizJwt, logger)
	achievementRepo := data.NewAchievementRepo(dataData, logger)
	achievementCase := biz.NewAchievementUseCase(achievementRepo, logger)
	commentRepo := data.NewCommentRepo(dataData, logger)
	commentUseCase := biz.NewCommentUseCase(commentRepo, bizJwt, logger)
	messageService := service.NewMessageService(userUseCase, creationUseCase, achievementCase, commentUseCase, logger)
	httpServer := server.NewHTTPServer(confServer, messageService, logger)
	grpcServer := server.NewGRPCServer(confServer, messageService, logger)
	codeMqConsumerServer := server.NewCodeMqConsumerServer(confServer, messageService, logger)
	profileMqConsumerServer := server.NewProfileMqConsumerServer(confServer, messageService, logger)
	followMqConsumerServer := server.NewFollowMqConsumerServer(confServer, messageService, logger)
	articleReviewMqConsumerServer := server.NewArticleReviewMqConsumerServer(confServer, messageService, logger)
	articleMqConsumerServer := server.NewArticleMqConsumerServer(confServer, messageService, logger)
	talkReviewMqConsumerServer := server.NewTalkReviewMqConsumerServer(confServer, messageService, logger)
	talkMqConsumerServer := server.NewTalkMqConsumerServer(confServer, messageService, logger)
	columnReviewMqConsumerServer := server.NewColumnReviewMqConsumerServer(confServer, messageService, logger)
	columnMqConsumerServer := server.NewColumnMqConsumerServer(confServer, messageService, logger)
	achievementMqConsumerServer := server.NewAchievementMqConsumerServer(confServer, messageService, logger)
	commentReviewMqConsumerServer := server.NewCommentReviewMqConsumerServer(confServer, messageService, logger)
	commentMqConsumerServer := server.NewCommentMqConsumerServer(confServer, messageService, logger)
	app := newApp(logger, registry, httpServer, grpcServer, codeMqConsumerServer, profileMqConsumerServer, followMqConsumerServer, articleReviewMqConsumerServer, articleMqConsumerServer, talkReviewMqConsumerServer, talkMqConsumerServer, columnReviewMqConsumerServer, columnMqConsumerServer, achievementMqConsumerServer, commentReviewMqConsumerServer, commentMqConsumerServer)
	return app, func() {
	}, nil
}
