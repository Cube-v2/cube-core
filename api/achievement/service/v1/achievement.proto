syntax = "proto3";

package achievement.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";

option go_package = "api/achievement/service/v1;v1";

service Achievement {
  rpc SetAchievementAgree(SetAchievementAgreeReq) returns (google.protobuf.Empty){}
  rpc CancelAchievementAgree(CancelAchievementAgreeReq) returns (google.protobuf.Empty){}
  rpc SetAchievementView(SetAchievementViewReq) returns (google.protobuf.Empty){}
  rpc SetAchievementCollect(SetAchievementCollectReq) returns (google.protobuf.Empty){}
  rpc CancelAchievementCollect(CancelAchievementCollectReq) returns (google.protobuf.Empty){}
  rpc GetHealth(google.protobuf.Empty) returns (google.protobuf.Empty){
    option (google.api.http) = {
      get: "/v1/get/achievement/health"
    };
  }
}

message SetAchievementAgreeReq{
  string uuid = 1 [(validate.rules).string.uuid = true];
}

message CancelAchievementAgreeReq{
  string uuid = 1 [(validate.rules).string.uuid = true];
}

message SetAchievementViewReq{
  string uuid = 1 [(validate.rules).string.uuid = true];
}

message SetAchievementCollectReq{
  string uuid = 1 [(validate.rules).string.uuid = true];
}

message CancelAchievementCollectReq{
  string uuid = 1 [(validate.rules).string.uuid = true];
}
