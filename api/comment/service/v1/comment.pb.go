// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.0
// source: comment/service/v1/comment.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateCommentDraftReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *CreateCommentDraftReq) Reset() {
	*x = CreateCommentDraftReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCommentDraftReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommentDraftReq) ProtoMessage() {}

func (x *CreateCommentDraftReq) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommentDraftReq.ProtoReflect.Descriptor instead.
func (*CreateCommentDraftReq) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{0}
}

func (x *CreateCommentDraftReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type CreateCommentDraftReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateCommentDraftReply) Reset() {
	*x = CreateCommentDraftReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCommentDraftReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommentDraftReply) ProtoMessage() {}

func (x *CreateCommentDraftReply) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommentDraftReply.ProtoReflect.Descriptor instead.
func (*CreateCommentDraftReply) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{1}
}

func (x *CreateCommentDraftReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetLastCommentDraftReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *GetLastCommentDraftReq) Reset() {
	*x = GetLastCommentDraftReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLastCommentDraftReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastCommentDraftReq) ProtoMessage() {}

func (x *GetLastCommentDraftReq) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastCommentDraftReq.ProtoReflect.Descriptor instead.
func (*GetLastCommentDraftReq) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{2}
}

func (x *GetLastCommentDraftReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type GetLastCommentDraftReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status int32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetLastCommentDraftReply) Reset() {
	*x = GetLastCommentDraftReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLastCommentDraftReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastCommentDraftReply) ProtoMessage() {}

func (x *GetLastCommentDraftReply) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastCommentDraftReply.ProtoReflect.Descriptor instead.
func (*GetLastCommentDraftReply) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{3}
}

func (x *GetLastCommentDraftReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetLastCommentDraftReply) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type GetUserCommentAgreeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *GetUserCommentAgreeReq) Reset() {
	*x = GetUserCommentAgreeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCommentAgreeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCommentAgreeReq) ProtoMessage() {}

func (x *GetUserCommentAgreeReq) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCommentAgreeReq.ProtoReflect.Descriptor instead.
func (*GetUserCommentAgreeReq) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{4}
}

func (x *GetUserCommentAgreeReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type GetUserCommentAgreeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agree map[int32]bool `protobuf:"bytes,1,rep,name=agree,proto3" json:"agree,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GetUserCommentAgreeReply) Reset() {
	*x = GetUserCommentAgreeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCommentAgreeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCommentAgreeReply) ProtoMessage() {}

func (x *GetUserCommentAgreeReply) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCommentAgreeReply.ProtoReflect.Descriptor instead.
func (*GetUserCommentAgreeReply) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{5}
}

func (x *GetUserCommentAgreeReply) GetAgree() map[int32]bool {
	if x != nil {
		return x.Agree
	}
	return nil
}

type GetCommentUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *GetCommentUserReq) Reset() {
	*x = GetCommentUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommentUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentUserReq) ProtoMessage() {}

func (x *GetCommentUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentUserReq.ProtoReflect.Descriptor instead.
func (*GetCommentUserReq) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{6}
}

func (x *GetCommentUserReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type GetCommentUserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comment int32 `protobuf:"varint,1,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *GetCommentUserReply) Reset() {
	*x = GetCommentUserReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommentUserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentUserReply) ProtoMessage() {}

func (x *GetCommentUserReply) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentUserReply.ProtoReflect.Descriptor instead.
func (*GetCommentUserReply) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{7}
}

func (x *GetCommentUserReply) GetComment() int32 {
	if x != nil {
		return x.Comment
	}
	return 0
}

type SendCommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Ip   string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *SendCommentReq) Reset() {
	*x = SendCommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCommentReq) ProtoMessage() {}

func (x *SendCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCommentReq.ProtoReflect.Descriptor instead.
func (*SendCommentReq) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{8}
}

func (x *SendCommentReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SendCommentReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SendCommentReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type SendSubCommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Ip   string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *SendSubCommentReq) Reset() {
	*x = SendSubCommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendSubCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSubCommentReq) ProtoMessage() {}

func (x *SendSubCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSubCommentReq.ProtoReflect.Descriptor instead.
func (*SendSubCommentReq) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{9}
}

func (x *SendSubCommentReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SendSubCommentReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SendSubCommentReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type CreateCommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreationId   int32  `protobuf:"varint,2,opt,name=creationId,proto3" json:"creationId,omitempty"`
	CreationType int32  `protobuf:"varint,3,opt,name=creationType,proto3" json:"creationType,omitempty"`
	Uuid         string `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *CreateCommentReq) Reset() {
	*x = CreateCommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommentReq) ProtoMessage() {}

func (x *CreateCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommentReq.ProtoReflect.Descriptor instead.
func (*CreateCommentReq) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{10}
}

func (x *CreateCommentReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateCommentReq) GetCreationId() int32 {
	if x != nil {
		return x.CreationId
	}
	return 0
}

func (x *CreateCommentReq) GetCreationType() int32 {
	if x != nil {
		return x.CreationType
	}
	return 0
}

func (x *CreateCommentReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type CreateSubCommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RootId   int32  `protobuf:"varint,2,opt,name=rootId,proto3" json:"rootId,omitempty"`
	ParentId int32  `protobuf:"varint,3,opt,name=parentId,proto3" json:"parentId,omitempty"`
	Uuid     string `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *CreateSubCommentReq) Reset() {
	*x = CreateSubCommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubCommentReq) ProtoMessage() {}

func (x *CreateSubCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubCommentReq.ProtoReflect.Descriptor instead.
func (*CreateSubCommentReq) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{11}
}

func (x *CreateSubCommentReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateSubCommentReq) GetRootId() int32 {
	if x != nil {
		return x.RootId
	}
	return 0
}

func (x *CreateSubCommentReq) GetParentId() int32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *CreateSubCommentReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type CreateCommentDbAndCacheReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreationId   int32  `protobuf:"varint,2,opt,name=creationId,proto3" json:"creationId,omitempty"`
	CreationType int32  `protobuf:"varint,3,opt,name=creationType,proto3" json:"creationType,omitempty"`
	Uuid         string `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *CreateCommentDbAndCacheReq) Reset() {
	*x = CreateCommentDbAndCacheReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCommentDbAndCacheReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommentDbAndCacheReq) ProtoMessage() {}

func (x *CreateCommentDbAndCacheReq) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommentDbAndCacheReq.ProtoReflect.Descriptor instead.
func (*CreateCommentDbAndCacheReq) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{12}
}

func (x *CreateCommentDbAndCacheReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateCommentDbAndCacheReq) GetCreationId() int32 {
	if x != nil {
		return x.CreationId
	}
	return 0
}

func (x *CreateCommentDbAndCacheReq) GetCreationType() int32 {
	if x != nil {
		return x.CreationType
	}
	return 0
}

func (x *CreateCommentDbAndCacheReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type CreateSubCommentDbAndCacheReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RootId   int32  `protobuf:"varint,2,opt,name=rootId,proto3" json:"rootId,omitempty"`
	ParentId int32  `protobuf:"varint,3,opt,name=parentId,proto3" json:"parentId,omitempty"`
	Uuid     string `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *CreateSubCommentDbAndCacheReq) Reset() {
	*x = CreateSubCommentDbAndCacheReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubCommentDbAndCacheReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubCommentDbAndCacheReq) ProtoMessage() {}

func (x *CreateSubCommentDbAndCacheReq) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubCommentDbAndCacheReq.ProtoReflect.Descriptor instead.
func (*CreateSubCommentDbAndCacheReq) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{13}
}

func (x *CreateSubCommentDbAndCacheReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateSubCommentDbAndCacheReq) GetRootId() int32 {
	if x != nil {
		return x.RootId
	}
	return 0
}

func (x *CreateSubCommentDbAndCacheReq) GetParentId() int32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *CreateSubCommentDbAndCacheReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type GetCommentListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page         int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	CreationId   int32 `protobuf:"varint,2,opt,name=creationId,proto3" json:"creationId,omitempty"`
	CreationType int32 `protobuf:"varint,3,opt,name=creationType,proto3" json:"creationType,omitempty"`
}

func (x *GetCommentListReq) Reset() {
	*x = GetCommentListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommentListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentListReq) ProtoMessage() {}

func (x *GetCommentListReq) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentListReq.ProtoReflect.Descriptor instead.
func (*GetCommentListReq) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{14}
}

func (x *GetCommentListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetCommentListReq) GetCreationId() int32 {
	if x != nil {
		return x.CreationId
	}
	return 0
}

func (x *GetCommentListReq) GetCreationType() int32 {
	if x != nil {
		return x.CreationType
	}
	return 0
}

type GetSubCommentListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Id   int32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSubCommentListReq) Reset() {
	*x = GetSubCommentListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubCommentListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubCommentListReq) ProtoMessage() {}

func (x *GetSubCommentListReq) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubCommentListReq.ProtoReflect.Descriptor instead.
func (*GetSubCommentListReq) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{15}
}

func (x *GetSubCommentListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetSubCommentListReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetCommentListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comment []*GetCommentListReply_Comment `protobuf:"bytes,1,rep,name=comment,proto3" json:"comment,omitempty"`
}

func (x *GetCommentListReply) Reset() {
	*x = GetCommentListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommentListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentListReply) ProtoMessage() {}

func (x *GetCommentListReply) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentListReply.ProtoReflect.Descriptor instead.
func (*GetCommentListReply) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{16}
}

func (x *GetCommentListReply) GetComment() []*GetCommentListReply_Comment {
	if x != nil {
		return x.Comment
	}
	return nil
}

type GetSubCommentListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comment []*GetSubCommentListReply_Comment `protobuf:"bytes,1,rep,name=comment,proto3" json:"comment,omitempty"`
}

func (x *GetSubCommentListReply) Reset() {
	*x = GetSubCommentListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubCommentListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubCommentListReply) ProtoMessage() {}

func (x *GetSubCommentListReply) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubCommentListReply.ProtoReflect.Descriptor instead.
func (*GetSubCommentListReply) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{17}
}

func (x *GetSubCommentListReply) GetComment() []*GetSubCommentListReply_Comment {
	if x != nil {
		return x.Comment
	}
	return nil
}

type RemoveCommentDbAndCacheReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreationId   int32  `protobuf:"varint,2,opt,name=creationId,proto3" json:"creationId,omitempty"`
	CreationType int32  `protobuf:"varint,3,opt,name=creationType,proto3" json:"creationType,omitempty"`
	Uuid         string `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *RemoveCommentDbAndCacheReq) Reset() {
	*x = RemoveCommentDbAndCacheReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveCommentDbAndCacheReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveCommentDbAndCacheReq) ProtoMessage() {}

func (x *RemoveCommentDbAndCacheReq) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveCommentDbAndCacheReq.ProtoReflect.Descriptor instead.
func (*RemoveCommentDbAndCacheReq) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{18}
}

func (x *RemoveCommentDbAndCacheReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RemoveCommentDbAndCacheReq) GetCreationId() int32 {
	if x != nil {
		return x.CreationId
	}
	return 0
}

func (x *RemoveCommentDbAndCacheReq) GetCreationType() int32 {
	if x != nil {
		return x.CreationType
	}
	return 0
}

func (x *RemoveCommentDbAndCacheReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type RemoveSubCommentDbAndCacheReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RootId int32  `protobuf:"varint,2,opt,name=rootId,proto3" json:"rootId,omitempty"`
	Uuid   string `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *RemoveSubCommentDbAndCacheReq) Reset() {
	*x = RemoveSubCommentDbAndCacheReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSubCommentDbAndCacheReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSubCommentDbAndCacheReq) ProtoMessage() {}

func (x *RemoveSubCommentDbAndCacheReq) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSubCommentDbAndCacheReq.ProtoReflect.Descriptor instead.
func (*RemoveSubCommentDbAndCacheReq) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{19}
}

func (x *RemoveSubCommentDbAndCacheReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RemoveSubCommentDbAndCacheReq) GetRootId() int32 {
	if x != nil {
		return x.RootId
	}
	return 0
}

func (x *RemoveSubCommentDbAndCacheReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type GetCommentListStatisticReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *GetCommentListStatisticReq) Reset() {
	*x = GetCommentListStatisticReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommentListStatisticReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentListStatisticReq) ProtoMessage() {}

func (x *GetCommentListStatisticReq) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentListStatisticReq.ProtoReflect.Descriptor instead.
func (*GetCommentListStatisticReq) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{20}
}

func (x *GetCommentListStatisticReq) GetIds() []int32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetUserCommentArticleReplyListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page int32  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *GetUserCommentArticleReplyListReq) Reset() {
	*x = GetUserCommentArticleReplyListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCommentArticleReplyListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCommentArticleReplyListReq) ProtoMessage() {}

func (x *GetUserCommentArticleReplyListReq) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCommentArticleReplyListReq.ProtoReflect.Descriptor instead.
func (*GetUserCommentArticleReplyListReq) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{21}
}

func (x *GetUserCommentArticleReplyListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetUserCommentArticleReplyListReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type GetUserSubCommentArticleReplyListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page int32  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *GetUserSubCommentArticleReplyListReq) Reset() {
	*x = GetUserSubCommentArticleReplyListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserSubCommentArticleReplyListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSubCommentArticleReplyListReq) ProtoMessage() {}

func (x *GetUserSubCommentArticleReplyListReq) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSubCommentArticleReplyListReq.ProtoReflect.Descriptor instead.
func (*GetUserSubCommentArticleReplyListReq) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{22}
}

func (x *GetUserSubCommentArticleReplyListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetUserSubCommentArticleReplyListReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type GetUserSubCommentArticleReplyListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*GetUserSubCommentArticleReplyListReply_List `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetUserSubCommentArticleReplyListReply) Reset() {
	*x = GetUserSubCommentArticleReplyListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserSubCommentArticleReplyListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSubCommentArticleReplyListReply) ProtoMessage() {}

func (x *GetUserSubCommentArticleReplyListReply) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSubCommentArticleReplyListReply.ProtoReflect.Descriptor instead.
func (*GetUserSubCommentArticleReplyListReply) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{23}
}

func (x *GetUserSubCommentArticleReplyListReply) GetList() []*GetUserSubCommentArticleReplyListReply_List {
	if x != nil {
		return x.List
	}
	return nil
}

type GetUserCommentArticleReplyListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*GetUserCommentArticleReplyListReply_List `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetUserCommentArticleReplyListReply) Reset() {
	*x = GetUserCommentArticleReplyListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCommentArticleReplyListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCommentArticleReplyListReply) ProtoMessage() {}

func (x *GetUserCommentArticleReplyListReply) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCommentArticleReplyListReply.ProtoReflect.Descriptor instead.
func (*GetUserCommentArticleReplyListReply) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{24}
}

func (x *GetUserCommentArticleReplyListReply) GetList() []*GetUserCommentArticleReplyListReply_List {
	if x != nil {
		return x.List
	}
	return nil
}

type GetUserCommentTalkReplyListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page int32  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *GetUserCommentTalkReplyListReq) Reset() {
	*x = GetUserCommentTalkReplyListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCommentTalkReplyListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCommentTalkReplyListReq) ProtoMessage() {}

func (x *GetUserCommentTalkReplyListReq) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCommentTalkReplyListReq.ProtoReflect.Descriptor instead.
func (*GetUserCommentTalkReplyListReq) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{25}
}

func (x *GetUserCommentTalkReplyListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetUserCommentTalkReplyListReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type GetUserCommentTalkReplyListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*GetUserCommentTalkReplyListReply_List `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetUserCommentTalkReplyListReply) Reset() {
	*x = GetUserCommentTalkReplyListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCommentTalkReplyListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCommentTalkReplyListReply) ProtoMessage() {}

func (x *GetUserCommentTalkReplyListReply) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCommentTalkReplyListReply.ProtoReflect.Descriptor instead.
func (*GetUserCommentTalkReplyListReply) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{26}
}

func (x *GetUserCommentTalkReplyListReply) GetList() []*GetUserCommentTalkReplyListReply_List {
	if x != nil {
		return x.List
	}
	return nil
}

type GetCommentListStatisticReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count []*GetCommentListStatisticReply_Count `protobuf:"bytes,1,rep,name=count,proto3" json:"count,omitempty"`
}

func (x *GetCommentListStatisticReply) Reset() {
	*x = GetCommentListStatisticReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommentListStatisticReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentListStatisticReply) ProtoMessage() {}

func (x *GetCommentListStatisticReply) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentListStatisticReply.ProtoReflect.Descriptor instead.
func (*GetCommentListStatisticReply) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{27}
}

func (x *GetCommentListStatisticReply) GetCount() []*GetCommentListStatisticReply_Count {
	if x != nil {
		return x.Count
	}
	return nil
}

type SetCommentAgreeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid         string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	UserUuid     string `protobuf:"bytes,3,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	CreationId   int32  `protobuf:"varint,4,opt,name=creationId,proto3" json:"creationId,omitempty"`
	CreationType int32  `protobuf:"varint,5,opt,name=creationType,proto3" json:"creationType,omitempty"`
}

func (x *SetCommentAgreeReq) Reset() {
	*x = SetCommentAgreeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCommentAgreeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCommentAgreeReq) ProtoMessage() {}

func (x *SetCommentAgreeReq) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCommentAgreeReq.ProtoReflect.Descriptor instead.
func (*SetCommentAgreeReq) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{28}
}

func (x *SetCommentAgreeReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetCommentAgreeReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SetCommentAgreeReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *SetCommentAgreeReq) GetCreationId() int32 {
	if x != nil {
		return x.CreationId
	}
	return 0
}

func (x *SetCommentAgreeReq) GetCreationType() int32 {
	if x != nil {
		return x.CreationType
	}
	return 0
}

type SetSubCommentAgreeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid     string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	UserUuid string `protobuf:"bytes,3,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
}

func (x *SetSubCommentAgreeReq) Reset() {
	*x = SetSubCommentAgreeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSubCommentAgreeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSubCommentAgreeReq) ProtoMessage() {}

func (x *SetSubCommentAgreeReq) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSubCommentAgreeReq.ProtoReflect.Descriptor instead.
func (*SetSubCommentAgreeReq) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{29}
}

func (x *SetSubCommentAgreeReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetSubCommentAgreeReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SetSubCommentAgreeReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

type CancelCommentAgreeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid         string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	UserUuid     string `protobuf:"bytes,3,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	CreationId   int32  `protobuf:"varint,4,opt,name=creationId,proto3" json:"creationId,omitempty"`
	CreationType int32  `protobuf:"varint,5,opt,name=creationType,proto3" json:"creationType,omitempty"`
}

func (x *CancelCommentAgreeReq) Reset() {
	*x = CancelCommentAgreeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelCommentAgreeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelCommentAgreeReq) ProtoMessage() {}

func (x *CancelCommentAgreeReq) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelCommentAgreeReq.ProtoReflect.Descriptor instead.
func (*CancelCommentAgreeReq) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{30}
}

func (x *CancelCommentAgreeReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CancelCommentAgreeReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CancelCommentAgreeReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CancelCommentAgreeReq) GetCreationId() int32 {
	if x != nil {
		return x.CreationId
	}
	return 0
}

func (x *CancelCommentAgreeReq) GetCreationType() int32 {
	if x != nil {
		return x.CreationType
	}
	return 0
}

type CancelSubCommentAgreeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid     string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	UserUuid string `protobuf:"bytes,3,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
}

func (x *CancelSubCommentAgreeReq) Reset() {
	*x = CancelSubCommentAgreeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelSubCommentAgreeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelSubCommentAgreeReq) ProtoMessage() {}

func (x *CancelSubCommentAgreeReq) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelSubCommentAgreeReq.ProtoReflect.Descriptor instead.
func (*CancelSubCommentAgreeReq) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{31}
}

func (x *CancelSubCommentAgreeReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CancelSubCommentAgreeReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CancelSubCommentAgreeReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

type RemoveCommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid         string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	UserUuid     string `protobuf:"bytes,3,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	CreationId   int32  `protobuf:"varint,4,opt,name=creationId,proto3" json:"creationId,omitempty"`
	CreationType int32  `protobuf:"varint,5,opt,name=creationType,proto3" json:"creationType,omitempty"`
}

func (x *RemoveCommentReq) Reset() {
	*x = RemoveCommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveCommentReq) ProtoMessage() {}

func (x *RemoveCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveCommentReq.ProtoReflect.Descriptor instead.
func (*RemoveCommentReq) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{32}
}

func (x *RemoveCommentReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RemoveCommentReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RemoveCommentReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *RemoveCommentReq) GetCreationId() int32 {
	if x != nil {
		return x.CreationId
	}
	return 0
}

func (x *RemoveCommentReq) GetCreationType() int32 {
	if x != nil {
		return x.CreationType
	}
	return 0
}

type RemoveSubCommentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RootId   int32  `protobuf:"varint,2,opt,name=rootId,proto3" json:"rootId,omitempty"`
	Uuid     string `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
	UserUuid string `protobuf:"bytes,4,opt,name=user_uuid,json=userUuid,proto3" json:"user_uuid,omitempty"`
	Reply    string `protobuf:"bytes,5,opt,name=reply,proto3" json:"reply,omitempty"`
}

func (x *RemoveSubCommentReq) Reset() {
	*x = RemoveSubCommentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSubCommentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSubCommentReq) ProtoMessage() {}

func (x *RemoveSubCommentReq) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSubCommentReq.ProtoReflect.Descriptor instead.
func (*RemoveSubCommentReq) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{33}
}

func (x *RemoveSubCommentReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RemoveSubCommentReq) GetRootId() int32 {
	if x != nil {
		return x.RootId
	}
	return 0
}

func (x *RemoveSubCommentReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RemoveSubCommentReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *RemoveSubCommentReq) GetReply() string {
	if x != nil {
		return x.Reply
	}
	return ""
}

type GetCommentListReply_Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *GetCommentListReply_Comment) Reset() {
	*x = GetCommentListReply_Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommentListReply_Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentListReply_Comment) ProtoMessage() {}

func (x *GetCommentListReply_Comment) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentListReply_Comment.ProtoReflect.Descriptor instead.
func (*GetCommentListReply_Comment) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{16, 0}
}

func (x *GetCommentListReply_Comment) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetCommentListReply_Comment) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type GetSubCommentListReply_Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid  string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Reply string `protobuf:"bytes,3,opt,name=reply,proto3" json:"reply,omitempty"`
}

func (x *GetSubCommentListReply_Comment) Reset() {
	*x = GetSubCommentListReply_Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubCommentListReply_Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubCommentListReply_Comment) ProtoMessage() {}

func (x *GetSubCommentListReply_Comment) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubCommentListReply_Comment.ProtoReflect.Descriptor instead.
func (*GetSubCommentListReply_Comment) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{17, 0}
}

func (x *GetSubCommentListReply_Comment) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetSubCommentListReply_Comment) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *GetSubCommentListReply_Comment) GetReply() string {
	if x != nil {
		return x.Reply
	}
	return ""
}

type GetUserSubCommentArticleReplyListReply_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreationId     int32  `protobuf:"varint,2,opt,name=creation_id,json=creationId,proto3" json:"creation_id,omitempty"`
	CreationAuthor string `protobuf:"bytes,3,opt,name=creation_author,json=creationAuthor,proto3" json:"creation_author,omitempty"`
	RootId         int32  `protobuf:"varint,4,opt,name=root_id,json=rootId,proto3" json:"root_id,omitempty"`
	RootUser       string `protobuf:"bytes,5,opt,name=root_user,json=rootUser,proto3" json:"root_user,omitempty"`
	ParentId       int32  `protobuf:"varint,6,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Reply          string `protobuf:"bytes,7,opt,name=reply,proto3" json:"reply,omitempty"`
	UserName       string `protobuf:"bytes,8,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	ReplyName      string `protobuf:"bytes,9,opt,name=reply_name,json=replyName,proto3" json:"reply_name,omitempty"`
	RootName       string `protobuf:"bytes,10,opt,name=root_name,json=rootName,proto3" json:"root_name,omitempty"`
}

func (x *GetUserSubCommentArticleReplyListReply_List) Reset() {
	*x = GetUserSubCommentArticleReplyListReply_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserSubCommentArticleReplyListReply_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSubCommentArticleReplyListReply_List) ProtoMessage() {}

func (x *GetUserSubCommentArticleReplyListReply_List) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSubCommentArticleReplyListReply_List.ProtoReflect.Descriptor instead.
func (*GetUserSubCommentArticleReplyListReply_List) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{23, 0}
}

func (x *GetUserSubCommentArticleReplyListReply_List) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetUserSubCommentArticleReplyListReply_List) GetCreationId() int32 {
	if x != nil {
		return x.CreationId
	}
	return 0
}

func (x *GetUserSubCommentArticleReplyListReply_List) GetCreationAuthor() string {
	if x != nil {
		return x.CreationAuthor
	}
	return ""
}

func (x *GetUserSubCommentArticleReplyListReply_List) GetRootId() int32 {
	if x != nil {
		return x.RootId
	}
	return 0
}

func (x *GetUserSubCommentArticleReplyListReply_List) GetRootUser() string {
	if x != nil {
		return x.RootUser
	}
	return ""
}

func (x *GetUserSubCommentArticleReplyListReply_List) GetParentId() int32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *GetUserSubCommentArticleReplyListReply_List) GetReply() string {
	if x != nil {
		return x.Reply
	}
	return ""
}

func (x *GetUserSubCommentArticleReplyListReply_List) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *GetUserSubCommentArticleReplyListReply_List) GetReplyName() string {
	if x != nil {
		return x.ReplyName
	}
	return ""
}

func (x *GetUserSubCommentArticleReplyListReply_List) GetRootName() string {
	if x != nil {
		return x.RootName
	}
	return ""
}

type GetUserCommentArticleReplyListReply_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreationId     int32  `protobuf:"varint,2,opt,name=creation_id,json=creationId,proto3" json:"creation_id,omitempty"`
	CreationAuthor string `protobuf:"bytes,3,opt,name=creation_author,json=creationAuthor,proto3" json:"creation_author,omitempty"`
}

func (x *GetUserCommentArticleReplyListReply_List) Reset() {
	*x = GetUserCommentArticleReplyListReply_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCommentArticleReplyListReply_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCommentArticleReplyListReply_List) ProtoMessage() {}

func (x *GetUserCommentArticleReplyListReply_List) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCommentArticleReplyListReply_List.ProtoReflect.Descriptor instead.
func (*GetUserCommentArticleReplyListReply_List) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{24, 0}
}

func (x *GetUserCommentArticleReplyListReply_List) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetUserCommentArticleReplyListReply_List) GetCreationId() int32 {
	if x != nil {
		return x.CreationId
	}
	return 0
}

func (x *GetUserCommentArticleReplyListReply_List) GetCreationAuthor() string {
	if x != nil {
		return x.CreationAuthor
	}
	return ""
}

type GetUserCommentTalkReplyListReply_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreationId     int32  `protobuf:"varint,2,opt,name=creation_id,json=creationId,proto3" json:"creation_id,omitempty"`
	CreationAuthor string `protobuf:"bytes,3,opt,name=creation_author,json=creationAuthor,proto3" json:"creation_author,omitempty"`
}

func (x *GetUserCommentTalkReplyListReply_List) Reset() {
	*x = GetUserCommentTalkReplyListReply_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCommentTalkReplyListReply_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCommentTalkReplyListReply_List) ProtoMessage() {}

func (x *GetUserCommentTalkReplyListReply_List) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCommentTalkReplyListReply_List.ProtoReflect.Descriptor instead.
func (*GetUserCommentTalkReplyListReply_List) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{26, 0}
}

func (x *GetUserCommentTalkReplyListReply_List) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetUserCommentTalkReplyListReply_List) GetCreationId() int32 {
	if x != nil {
		return x.CreationId
	}
	return 0
}

func (x *GetUserCommentTalkReplyListReply_List) GetCreationAuthor() string {
	if x != nil {
		return x.CreationAuthor
	}
	return ""
}

type GetCommentListStatisticReply_Count struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Agree   int32 `protobuf:"varint,2,opt,name=agree,proto3" json:"agree,omitempty"`
	Comment int32 `protobuf:"varint,5,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *GetCommentListStatisticReply_Count) Reset() {
	*x = GetCommentListStatisticReply_Count{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_service_v1_comment_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommentListStatisticReply_Count) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentListStatisticReply_Count) ProtoMessage() {}

func (x *GetCommentListStatisticReply_Count) ProtoReflect() protoreflect.Message {
	mi := &file_comment_service_v1_comment_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentListStatisticReply_Count.ProtoReflect.Descriptor instead.
func (*GetCommentListStatisticReply_Count) Descriptor() ([]byte, []int) {
	return file_comment_service_v1_comment_proto_rawDescGZIP(), []int{27, 0}
}

func (x *GetCommentListStatisticReply_Count) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetCommentListStatisticReply_Count) GetAgree() int32 {
	if x != nil {
		return x.Agree
	}
	return 0
}

func (x *GetCommentListStatisticReply_Count) GetComment() int32 {
	if x != nil {
		return x.Comment
	}
	return 0
}

var File_comment_service_v1_comment_proto protoreflect.FileDescriptor

var file_comment_service_v1_comment_proto_rawDesc = []byte{
	0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x35, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x17, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x36, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x42, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x36, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x45, 0x0a, 0x05, 0x61, 0x67, 0x72, 0x65, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x67, 0x72, 0x65, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x41, 0x67, 0x72, 0x65, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x61, 0x67, 0x72, 0x65, 0x65, 0x1a, 0x38, 0x0a, 0x0a,
	0x41, 0x67, 0x72, 0x65, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x31, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x57, 0x0a, 0x0e, 0x53, 0x65,
	0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0xb0, 0x01, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x70, 0x01, 0x52,
	0x02, 0x69, 0x70, 0x22, 0x5a, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x70, 0x01, 0x52, 0x02, 0x69, 0x70, 0x22,
	0x84, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x77, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22,
	0x8e, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x62, 0x41, 0x6e, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x22, 0x81, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x62, 0x41, 0x6e, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x22, 0x6b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x3a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x87, 0x01,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x41, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x2d, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x44, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x43, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x8e, 0x01,
	0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x62, 0x41, 0x6e, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x65,
	0x0a, 0x1d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x62, 0x41, 0x6e, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x55, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x58, 0x0a, 0x24,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x9a, 0x03, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x4b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0xa2,
	0x02, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f,
	0x6f, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x6f, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x60, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x52, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x6c, 0x6b, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0xcb, 0x01, 0x0a, 0x20,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61,
	0x6c, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x45, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x6c, 0x6b, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x60, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0xad, 0x01, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x1a, 0x47, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x67, 0x72,
	0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x67, 0x72, 0x65, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x12, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x25,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6c, 0x0a, 0x15, 0x53, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x25, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x15, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x25, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6f, 0x0a, 0x18, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x67,
	0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x10,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x25,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x13, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0xb0, 0x01, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa,
	0x42, 0x08, 0x72, 0x06, 0xb0, 0x01, 0x01, 0xd0, 0x01, 0x01, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x32, 0xea, 0x16, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5b, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x61, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x72, 0x61, 0x66,
	0x74, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x61, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x67, 0x72, 0x65, 0x65, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x67, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x52, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x74, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x71, 0x1a,
	0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x82, 0x01,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75,
	0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x79, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x61, 0x6c, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x6c, 0x6b, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x6c, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x72, 0x61, 0x66,
	0x74, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x72, 0x61, 0x66,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75,
	0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x62, 0x41, 0x6e, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x26,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x62, 0x41, 0x6e, 0x64, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x61, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x62, 0x41, 0x6e, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x29,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x62, 0x41, 0x6e,
	0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64,
	0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x67,
	0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x51, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x44, 0x62, 0x41, 0x6e, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x1c, 0x53, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65,
	0x44, 0x62, 0x41, 0x6e, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x12, 0x21, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x15, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x67,
	0x72, 0x65, 0x65, 0x12, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x1c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x44, 0x62, 0x41, 0x6e, 0x64, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x67,
	0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x61, 0x0a, 0x1f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x44, 0x62, 0x41, 0x6e, 0x64, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x12, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x10,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x17, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x62, 0x41, 0x6e,
	0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x62, 0x41, 0x6e, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x62, 0x41, 0x6e,
	0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x62, 0x41, 0x6e, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0d, 0x22, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x3a, 0x01, 0x2a, 0x42, 0x1b,
	0x5a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_comment_service_v1_comment_proto_rawDescOnce sync.Once
	file_comment_service_v1_comment_proto_rawDescData = file_comment_service_v1_comment_proto_rawDesc
)

func file_comment_service_v1_comment_proto_rawDescGZIP() []byte {
	file_comment_service_v1_comment_proto_rawDescOnce.Do(func() {
		file_comment_service_v1_comment_proto_rawDescData = protoimpl.X.CompressGZIP(file_comment_service_v1_comment_proto_rawDescData)
	})
	return file_comment_service_v1_comment_proto_rawDescData
}

var file_comment_service_v1_comment_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_comment_service_v1_comment_proto_goTypes = []interface{}{
	(*CreateCommentDraftReq)(nil),                       // 0: comment.v1.CreateCommentDraftReq
	(*CreateCommentDraftReply)(nil),                     // 1: comment.v1.CreateCommentDraftReply
	(*GetLastCommentDraftReq)(nil),                      // 2: comment.v1.GetLastCommentDraftReq
	(*GetLastCommentDraftReply)(nil),                    // 3: comment.v1.GetLastCommentDraftReply
	(*GetUserCommentAgreeReq)(nil),                      // 4: comment.v1.GetUserCommentAgreeReq
	(*GetUserCommentAgreeReply)(nil),                    // 5: comment.v1.GetUserCommentAgreeReply
	(*GetCommentUserReq)(nil),                           // 6: comment.v1.GetCommentUserReq
	(*GetCommentUserReply)(nil),                         // 7: comment.v1.GetCommentUserReply
	(*SendCommentReq)(nil),                              // 8: comment.v1.SendCommentReq
	(*SendSubCommentReq)(nil),                           // 9: comment.v1.SendSubCommentReq
	(*CreateCommentReq)(nil),                            // 10: comment.v1.CreateCommentReq
	(*CreateSubCommentReq)(nil),                         // 11: comment.v1.CreateSubCommentReq
	(*CreateCommentDbAndCacheReq)(nil),                  // 12: comment.v1.CreateCommentDbAndCacheReq
	(*CreateSubCommentDbAndCacheReq)(nil),               // 13: comment.v1.CreateSubCommentDbAndCacheReq
	(*GetCommentListReq)(nil),                           // 14: comment.v1.GetCommentListReq
	(*GetSubCommentListReq)(nil),                        // 15: comment.v1.GetSubCommentListReq
	(*GetCommentListReply)(nil),                         // 16: comment.v1.GetCommentListReply
	(*GetSubCommentListReply)(nil),                      // 17: comment.v1.GetSubCommentListReply
	(*RemoveCommentDbAndCacheReq)(nil),                  // 18: comment.v1.RemoveCommentDbAndCacheReq
	(*RemoveSubCommentDbAndCacheReq)(nil),               // 19: comment.v1.RemoveSubCommentDbAndCacheReq
	(*GetCommentListStatisticReq)(nil),                  // 20: comment.v1.GetCommentListStatisticReq
	(*GetUserCommentArticleReplyListReq)(nil),           // 21: comment.v1.GetUserCommentArticleReplyListReq
	(*GetUserSubCommentArticleReplyListReq)(nil),        // 22: comment.v1.GetUserSubCommentArticleReplyListReq
	(*GetUserSubCommentArticleReplyListReply)(nil),      // 23: comment.v1.GetUserSubCommentArticleReplyListReply
	(*GetUserCommentArticleReplyListReply)(nil),         // 24: comment.v1.GetUserCommentArticleReplyListReply
	(*GetUserCommentTalkReplyListReq)(nil),              // 25: comment.v1.GetUserCommentTalkReplyListReq
	(*GetUserCommentTalkReplyListReply)(nil),            // 26: comment.v1.GetUserCommentTalkReplyListReply
	(*GetCommentListStatisticReply)(nil),                // 27: comment.v1.GetCommentListStatisticReply
	(*SetCommentAgreeReq)(nil),                          // 28: comment.v1.SetCommentAgreeReq
	(*SetSubCommentAgreeReq)(nil),                       // 29: comment.v1.SetSubCommentAgreeReq
	(*CancelCommentAgreeReq)(nil),                       // 30: comment.v1.CancelCommentAgreeReq
	(*CancelSubCommentAgreeReq)(nil),                    // 31: comment.v1.CancelSubCommentAgreeReq
	(*RemoveCommentReq)(nil),                            // 32: comment.v1.RemoveCommentReq
	(*RemoveSubCommentReq)(nil),                         // 33: comment.v1.RemoveSubCommentReq
	nil,                                                 // 34: comment.v1.GetUserCommentAgreeReply.AgreeEntry
	(*GetCommentListReply_Comment)(nil),                 // 35: comment.v1.GetCommentListReply.Comment
	(*GetSubCommentListReply_Comment)(nil),              // 36: comment.v1.GetSubCommentListReply.Comment
	(*GetUserSubCommentArticleReplyListReply_List)(nil), // 37: comment.v1.GetUserSubCommentArticleReplyListReply.List
	(*GetUserCommentArticleReplyListReply_List)(nil),    // 38: comment.v1.GetUserCommentArticleReplyListReply.List
	(*GetUserCommentTalkReplyListReply_List)(nil),       // 39: comment.v1.GetUserCommentTalkReplyListReply.List
	(*GetCommentListStatisticReply_Count)(nil),          // 40: comment.v1.GetCommentListStatisticReply.Count
	(*emptypb.Empty)(nil),                               // 41: google.protobuf.Empty
}
var file_comment_service_v1_comment_proto_depIdxs = []int32{
	34, // 0: comment.v1.GetUserCommentAgreeReply.agree:type_name -> comment.v1.GetUserCommentAgreeReply.AgreeEntry
	35, // 1: comment.v1.GetCommentListReply.comment:type_name -> comment.v1.GetCommentListReply.Comment
	36, // 2: comment.v1.GetSubCommentListReply.comment:type_name -> comment.v1.GetSubCommentListReply.Comment
	37, // 3: comment.v1.GetUserSubCommentArticleReplyListReply.list:type_name -> comment.v1.GetUserSubCommentArticleReplyListReply.List
	38, // 4: comment.v1.GetUserCommentArticleReplyListReply.list:type_name -> comment.v1.GetUserCommentArticleReplyListReply.List
	39, // 5: comment.v1.GetUserCommentTalkReplyListReply.list:type_name -> comment.v1.GetUserCommentTalkReplyListReply.List
	40, // 6: comment.v1.GetCommentListStatisticReply.count:type_name -> comment.v1.GetCommentListStatisticReply.Count
	41, // 7: comment.v1.Comment.GetHealth:input_type -> google.protobuf.Empty
	2,  // 8: comment.v1.Comment.GetLastCommentDraft:input_type -> comment.v1.GetLastCommentDraftReq
	4,  // 9: comment.v1.Comment.GetUserCommentAgree:input_type -> comment.v1.GetUserCommentAgreeReq
	6,  // 10: comment.v1.Comment.GetCommentUser:input_type -> comment.v1.GetCommentUserReq
	14, // 11: comment.v1.Comment.GetCommentList:input_type -> comment.v1.GetCommentListReq
	15, // 12: comment.v1.Comment.GetSubCommentList:input_type -> comment.v1.GetSubCommentListReq
	14, // 13: comment.v1.Comment.GetCommentListHot:input_type -> comment.v1.GetCommentListReq
	20, // 14: comment.v1.Comment.GetCommentListStatistic:input_type -> comment.v1.GetCommentListStatisticReq
	20, // 15: comment.v1.Comment.GetSubCommentListStatistic:input_type -> comment.v1.GetCommentListStatisticReq
	21, // 16: comment.v1.Comment.GetUserCommentArticleReplyList:input_type -> comment.v1.GetUserCommentArticleReplyListReq
	22, // 17: comment.v1.Comment.GetUserSubCommentArticleReplyList:input_type -> comment.v1.GetUserSubCommentArticleReplyListReq
	25, // 18: comment.v1.Comment.GetUserCommentTalkReplyList:input_type -> comment.v1.GetUserCommentTalkReplyListReq
	0,  // 19: comment.v1.Comment.CreateCommentDraft:input_type -> comment.v1.CreateCommentDraftReq
	10, // 20: comment.v1.Comment.CreateComment:input_type -> comment.v1.CreateCommentReq
	11, // 21: comment.v1.Comment.CreateSubComment:input_type -> comment.v1.CreateSubCommentReq
	12, // 22: comment.v1.Comment.CreateCommentDbAndCache:input_type -> comment.v1.CreateCommentDbAndCacheReq
	13, // 23: comment.v1.Comment.CreateSubCommentDbAndCache:input_type -> comment.v1.CreateSubCommentDbAndCacheReq
	8,  // 24: comment.v1.Comment.SendComment:input_type -> comment.v1.SendCommentReq
	9,  // 25: comment.v1.Comment.SendSubComment:input_type -> comment.v1.SendSubCommentReq
	28, // 26: comment.v1.Comment.SetCommentAgree:input_type -> comment.v1.SetCommentAgreeReq
	29, // 27: comment.v1.Comment.SetSubCommentAgree:input_type -> comment.v1.SetSubCommentAgreeReq
	28, // 28: comment.v1.Comment.SetCommentAgreeDbAndCache:input_type -> comment.v1.SetCommentAgreeReq
	29, // 29: comment.v1.Comment.SetSubCommentAgreeDbAndCache:input_type -> comment.v1.SetSubCommentAgreeReq
	30, // 30: comment.v1.Comment.CancelCommentAgree:input_type -> comment.v1.CancelCommentAgreeReq
	31, // 31: comment.v1.Comment.CancelSubCommentAgree:input_type -> comment.v1.CancelSubCommentAgreeReq
	30, // 32: comment.v1.Comment.CancelCommentAgreeDbAndCache:input_type -> comment.v1.CancelCommentAgreeReq
	31, // 33: comment.v1.Comment.CancelSubCommentAgreeDbAndCache:input_type -> comment.v1.CancelSubCommentAgreeReq
	32, // 34: comment.v1.Comment.RemoveComment:input_type -> comment.v1.RemoveCommentReq
	33, // 35: comment.v1.Comment.RemoveSubComment:input_type -> comment.v1.RemoveSubCommentReq
	18, // 36: comment.v1.Comment.RemoveCommentDbAndCache:input_type -> comment.v1.RemoveCommentDbAndCacheReq
	19, // 37: comment.v1.Comment.RemoveSubCommentDbAndCache:input_type -> comment.v1.RemoveSubCommentDbAndCacheReq
	41, // 38: comment.v1.Comment.GetHealth:output_type -> google.protobuf.Empty
	3,  // 39: comment.v1.Comment.GetLastCommentDraft:output_type -> comment.v1.GetLastCommentDraftReply
	5,  // 40: comment.v1.Comment.GetUserCommentAgree:output_type -> comment.v1.GetUserCommentAgreeReply
	7,  // 41: comment.v1.Comment.GetCommentUser:output_type -> comment.v1.GetCommentUserReply
	16, // 42: comment.v1.Comment.GetCommentList:output_type -> comment.v1.GetCommentListReply
	17, // 43: comment.v1.Comment.GetSubCommentList:output_type -> comment.v1.GetSubCommentListReply
	16, // 44: comment.v1.Comment.GetCommentListHot:output_type -> comment.v1.GetCommentListReply
	27, // 45: comment.v1.Comment.GetCommentListStatistic:output_type -> comment.v1.GetCommentListStatisticReply
	27, // 46: comment.v1.Comment.GetSubCommentListStatistic:output_type -> comment.v1.GetCommentListStatisticReply
	24, // 47: comment.v1.Comment.GetUserCommentArticleReplyList:output_type -> comment.v1.GetUserCommentArticleReplyListReply
	23, // 48: comment.v1.Comment.GetUserSubCommentArticleReplyList:output_type -> comment.v1.GetUserSubCommentArticleReplyListReply
	26, // 49: comment.v1.Comment.GetUserCommentTalkReplyList:output_type -> comment.v1.GetUserCommentTalkReplyListReply
	1,  // 50: comment.v1.Comment.CreateCommentDraft:output_type -> comment.v1.CreateCommentDraftReply
	41, // 51: comment.v1.Comment.CreateComment:output_type -> google.protobuf.Empty
	41, // 52: comment.v1.Comment.CreateSubComment:output_type -> google.protobuf.Empty
	41, // 53: comment.v1.Comment.CreateCommentDbAndCache:output_type -> google.protobuf.Empty
	41, // 54: comment.v1.Comment.CreateSubCommentDbAndCache:output_type -> google.protobuf.Empty
	41, // 55: comment.v1.Comment.SendComment:output_type -> google.protobuf.Empty
	41, // 56: comment.v1.Comment.SendSubComment:output_type -> google.protobuf.Empty
	41, // 57: comment.v1.Comment.SetCommentAgree:output_type -> google.protobuf.Empty
	41, // 58: comment.v1.Comment.SetSubCommentAgree:output_type -> google.protobuf.Empty
	41, // 59: comment.v1.Comment.SetCommentAgreeDbAndCache:output_type -> google.protobuf.Empty
	41, // 60: comment.v1.Comment.SetSubCommentAgreeDbAndCache:output_type -> google.protobuf.Empty
	41, // 61: comment.v1.Comment.CancelCommentAgree:output_type -> google.protobuf.Empty
	41, // 62: comment.v1.Comment.CancelSubCommentAgree:output_type -> google.protobuf.Empty
	41, // 63: comment.v1.Comment.CancelCommentAgreeDbAndCache:output_type -> google.protobuf.Empty
	41, // 64: comment.v1.Comment.CancelSubCommentAgreeDbAndCache:output_type -> google.protobuf.Empty
	41, // 65: comment.v1.Comment.RemoveComment:output_type -> google.protobuf.Empty
	41, // 66: comment.v1.Comment.RemoveSubComment:output_type -> google.protobuf.Empty
	41, // 67: comment.v1.Comment.RemoveCommentDbAndCache:output_type -> google.protobuf.Empty
	41, // 68: comment.v1.Comment.RemoveSubCommentDbAndCache:output_type -> google.protobuf.Empty
	38, // [38:69] is the sub-list for method output_type
	7,  // [7:38] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_comment_service_v1_comment_proto_init() }
func file_comment_service_v1_comment_proto_init() {
	if File_comment_service_v1_comment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_comment_service_v1_comment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCommentDraftReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCommentDraftReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLastCommentDraftReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLastCommentDraftReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCommentAgreeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCommentAgreeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommentUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommentUserReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendCommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendSubCommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubCommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCommentDbAndCacheReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubCommentDbAndCacheReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommentListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubCommentListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommentListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubCommentListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveCommentDbAndCacheReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSubCommentDbAndCacheReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommentListStatisticReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCommentArticleReplyListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserSubCommentArticleReplyListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserSubCommentArticleReplyListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCommentArticleReplyListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCommentTalkReplyListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCommentTalkReplyListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommentListStatisticReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCommentAgreeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSubCommentAgreeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelCommentAgreeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelSubCommentAgreeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveCommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSubCommentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommentListReply_Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubCommentListReply_Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserSubCommentArticleReplyListReply_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCommentArticleReplyListReply_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCommentTalkReplyListReply_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_service_v1_comment_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommentListStatisticReply_Count); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_comment_service_v1_comment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_comment_service_v1_comment_proto_goTypes,
		DependencyIndexes: file_comment_service_v1_comment_proto_depIdxs,
		MessageInfos:      file_comment_service_v1_comment_proto_msgTypes,
	}.Build()
	File_comment_service_v1_comment_proto = out.File
	file_comment_service_v1_comment_proto_rawDesc = nil
	file_comment_service_v1_comment_proto_goTypes = nil
	file_comment_service_v1_comment_proto_depIdxs = nil
}
