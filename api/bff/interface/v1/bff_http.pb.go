// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.3.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type BffHTTPServer interface {
	ArticleDraftMark(context.Context, *ArticleDraftMarkReq) (*emptypb.Empty, error)
	ArticleStatisticJudge(context.Context, *ArticleStatisticJudgeReq) (*ArticleStatisticJudgeReply, error)
	CancelArticleAgree(context.Context, *CancelArticleAgreeReq) (*emptypb.Empty, error)
	CancelArticleCollect(context.Context, *CancelArticleCollectReq) (*emptypb.Empty, error)
	CancelTalkAgree(context.Context, *CancelTalkAgreeReq) (*emptypb.Empty, error)
	CancelTalkCollect(context.Context, *CancelTalkCollectReq) (*emptypb.Empty, error)
	ChangeUserPassword(context.Context, *ChangeUserPasswordReq) (*emptypb.Empty, error)
	CreateArticleDraft(context.Context, *emptypb.Empty) (*CreateArticleDraftReply, error)
	CreateCollections(context.Context, *CreateCollectionsReq) (*emptypb.Empty, error)
	CreateColumn(context.Context, *CreateColumnReq) (*emptypb.Empty, error)
	CreateColumnDraft(context.Context, *emptypb.Empty) (*CreateColumnDraftReply, error)
	CreateTalkDraft(context.Context, *emptypb.Empty) (*CreateTalkDraftReply, error)
	DeleteArticle(context.Context, *DeleteArticleReq) (*emptypb.Empty, error)
	DeleteCollections(context.Context, *DeleteCollectionsReq) (*emptypb.Empty, error)
	DeleteTalk(context.Context, *DeleteTalkReq) (*emptypb.Empty, error)
	EditCollections(context.Context, *EditCollectionsReq) (*emptypb.Empty, error)
	GetAccount(context.Context, *emptypb.Empty) (*GetAccountReply, error)
	GetArticleCount(context.Context, *emptypb.Empty) (*GetArticleCountReply, error)
	GetArticleCountVisitor(context.Context, *GetArticleCountVisitorReq) (*GetArticleCountReply, error)
	GetArticleDraftList(context.Context, *emptypb.Empty) (*GetArticleDraftListReply, error)
	GetArticleList(context.Context, *GetArticleListReq) (*GetArticleListReply, error)
	GetArticleListHot(context.Context, *GetArticleListHotReq) (*GetArticleListHotReply, error)
	GetArticleListStatistic(context.Context, *GetArticleListStatisticReq) (*GetArticleListStatisticReply, error)
	GetArticleStatistic(context.Context, *GetArticleStatisticReq) (*GetArticleStatisticReply, error)
	GetCollectArticle(context.Context, *GetCollectArticleReq) (*GetArticleListReply, error)
	GetCollectArticleCount(context.Context, *GetCollectArticleCountReq) (*GetCollectArticleCountReply, error)
	GetCollectTalk(context.Context, *GetCollectTalkReq) (*GetTalkListReply, error)
	GetCollectTalkCount(context.Context, *GetCollectTalkCountReq) (*GetCollectTalkCountReply, error)
	GetCollection(context.Context, *GetCollectionReq) (*GetCollectionReply, error)
	GetCollections(context.Context, *GetCollectionsReq) (*GetCollectionsReply, error)
	GetCollectionsByVisitor(context.Context, *GetCollectionsByVisitorReq) (*GetCollectionsReply, error)
	GetCollectionsCount(context.Context, *emptypb.Empty) (*GetCollectionsCountReply, error)
	GetCollectionsVisitorCount(context.Context, *GetCollectionsVisitorCountReq) (*GetCollectionsCountReply, error)
	GetColumnList(context.Context, *GetColumnListReq) (*GetColumnListReply, error)
	GetColumnListHot(context.Context, *GetColumnListHotReq) (*GetColumnListHotReply, error)
	GetColumnListStatistic(context.Context, *GetColumnListStatisticReq) (*GetColumnListStatisticReply, error)
	GetCosSessionKey(context.Context, *emptypb.Empty) (*GetCosSessionKeyReply, error)
	GetLastArticleDraft(context.Context, *emptypb.Empty) (*GetLastArticleDraftReply, error)
	GetLastColumnDraft(context.Context, *emptypb.Empty) (*GetLastColumnDraftReply, error)
	GetLastTalkDraft(context.Context, *emptypb.Empty) (*GetLastTalkDraftReply, error)
	GetLeaderBoard(context.Context, *emptypb.Empty) (*GetLeaderBoardReply, error)
	GetProfile(context.Context, *emptypb.Empty) (*GetProfileReply, error)
	GetProfileUpdate(context.Context, *emptypb.Empty) (*GetProfileUpdateReply, error)
	GetTalkCount(context.Context, *emptypb.Empty) (*GetTalkCountReply, error)
	GetTalkCountVisitor(context.Context, *GetTalkCountVisitorReq) (*GetTalkCountReply, error)
	GetTalkList(context.Context, *GetTalkListReq) (*GetTalkListReply, error)
	GetTalkListHot(context.Context, *GetTalkListHotReq) (*GetTalkListHotReply, error)
	GetTalkListStatistic(context.Context, *GetTalkListStatisticReq) (*GetTalkListStatisticReply, error)
	GetTalkStatistic(context.Context, *GetTalkStatisticReq) (*GetTalkStatisticReply, error)
	GetUserArticleList(context.Context, *GetUserArticleListReq) (*GetArticleListReply, error)
	GetUserArticleListVisitor(context.Context, *GetUserArticleListVisitorReq) (*GetArticleListReply, error)
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoReply, error)
	GetUserTalkList(context.Context, *GetUserTalkListReq) (*GetTalkListReply, error)
	GetUserTalkListVisitor(context.Context, *GetUserTalkListVisitorReq) (*GetTalkListReply, error)
	LoginByCode(context.Context, *LoginByCodeReq) (*LoginReply, error)
	LoginByGithub(context.Context, *LoginByGithubReq) (*LoginReply, error)
	LoginByPassword(context.Context, *LoginByPasswordReq) (*LoginReply, error)
	LoginByWeChat(context.Context, *LoginByWeChatReq) (*LoginReply, error)
	LoginPasswordReset(context.Context, *LoginPasswordResetReq) (*emptypb.Empty, error)
	SendArticle(context.Context, *SendArticleReq) (*emptypb.Empty, error)
	SendArticleEdit(context.Context, *SendArticleEditReq) (*emptypb.Empty, error)
	SendEmailCode(context.Context, *SendEmailCodeReq) (*emptypb.Empty, error)
	SendPhoneCode(context.Context, *SendPhoneCodeReq) (*emptypb.Empty, error)
	SendTalk(context.Context, *SendTalkReq) (*emptypb.Empty, error)
	SendTalkEdit(context.Context, *SendTalkEditReq) (*emptypb.Empty, error)
	SetArticleAgree(context.Context, *SetArticleAgreeReq) (*emptypb.Empty, error)
	SetArticleCollect(context.Context, *SetArticleCollectReq) (*emptypb.Empty, error)
	SetArticleView(context.Context, *SetArticleViewReq) (*emptypb.Empty, error)
	SetProfileUpdate(context.Context, *SetProfileUpdateReq) (*emptypb.Empty, error)
	SetTalkAgree(context.Context, *SetTalkAgreeReq) (*emptypb.Empty, error)
	SetTalkCollect(context.Context, *SetTalkCollectReq) (*emptypb.Empty, error)
	SetTalkView(context.Context, *SetTalkViewReq) (*emptypb.Empty, error)
	SetUserEmail(context.Context, *SetUserEmailReq) (*emptypb.Empty, error)
	SetUserPassword(context.Context, *SetUserPasswordReq) (*emptypb.Empty, error)
	SetUserPhone(context.Context, *SetUserPhoneReq) (*emptypb.Empty, error)
	TalkStatisticJudge(context.Context, *TalkStatisticJudgeReq) (*TalkStatisticJudgeReply, error)
	UnbindUserEmail(context.Context, *UnbindUserEmailReq) (*emptypb.Empty, error)
	UnbindUserPhone(context.Context, *UnbindUserPhoneReq) (*emptypb.Empty, error)
	UserRegister(context.Context, *UserRegisterReq) (*emptypb.Empty, error)
}

func RegisterBffHTTPServer(s *http.Server, srv BffHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/user/register", _Bff_UserRegister0_HTTP_Handler(srv))
	r.POST("/v1/user/login/password", _Bff_LoginByPassword0_HTTP_Handler(srv))
	r.POST("/v1/user/login/code", _Bff_LoginByCode0_HTTP_Handler(srv))
	r.POST("/v1/user/login/wechat", _Bff_LoginByWeChat0_HTTP_Handler(srv))
	r.POST("/v1/user/login/github", _Bff_LoginByGithub0_HTTP_Handler(srv))
	r.POST("/v1/user/login/password/reset", _Bff_LoginPasswordReset0_HTTP_Handler(srv))
	r.POST("/v1/user/code/phone", _Bff_SendPhoneCode0_HTTP_Handler(srv))
	r.POST("/v1/user/code/email", _Bff_SendEmailCode0_HTTP_Handler(srv))
	r.GET("/v1/get/cos/session/key", _Bff_GetCosSessionKey0_HTTP_Handler(srv))
	r.GET("/v1/get/user/account", _Bff_GetAccount0_HTTP_Handler(srv))
	r.GET("/v1/get/user/profile", _Bff_GetProfile0_HTTP_Handler(srv))
	r.GET("/v1/get/user/info", _Bff_GetUserInfo0_HTTP_Handler(srv))
	r.GET("/v1/get/user/profile/update", _Bff_GetProfileUpdate0_HTTP_Handler(srv))
	r.POST("/v1/set/user/profile/update", _Bff_SetProfileUpdate0_HTTP_Handler(srv))
	r.POST("/v1/set/user/phone", _Bff_SetUserPhone0_HTTP_Handler(srv))
	r.POST("/v1/set/user/email", _Bff_SetUserEmail0_HTTP_Handler(srv))
	r.POST("/v1/set/user/password", _Bff_SetUserPassword0_HTTP_Handler(srv))
	r.POST("/v1/change/user/password", _Bff_ChangeUserPassword0_HTTP_Handler(srv))
	r.POST("/v1/unbind/user/phone", _Bff_UnbindUserPhone0_HTTP_Handler(srv))
	r.POST("/v1/unbind/user/email", _Bff_UnbindUserEmail0_HTTP_Handler(srv))
	r.GET("/v1/get/leaderboard", _Bff_GetLeaderBoard0_HTTP_Handler(srv))
	r.GET("/v1/get/collect/article", _Bff_GetCollectArticle0_HTTP_Handler(srv))
	r.GET("/v1/get/collect/article/count", _Bff_GetCollectArticleCount0_HTTP_Handler(srv))
	r.GET("/v1/get/collect/talk", _Bff_GetCollectTalk0_HTTP_Handler(srv))
	r.GET("/v1/get/collect/talk/count", _Bff_GetCollectTalkCount0_HTTP_Handler(srv))
	r.GET("/v1/get/collection", _Bff_GetCollection0_HTTP_Handler(srv))
	r.POST("/v1/get/collections", _Bff_GetCollections0_HTTP_Handler(srv))
	r.POST("/v1/get/collections/count", _Bff_GetCollectionsCount0_HTTP_Handler(srv))
	r.GET("/v1/get/collections/visitor", _Bff_GetCollectionsByVisitor0_HTTP_Handler(srv))
	r.GET("/v1/get/collections/visitor/count", _Bff_GetCollectionsVisitorCount0_HTTP_Handler(srv))
	r.POST("/v1/create/collections", _Bff_CreateCollections0_HTTP_Handler(srv))
	r.POST("/v1/edit/collections", _Bff_EditCollections0_HTTP_Handler(srv))
	r.POST("/v1/delete/collections", _Bff_DeleteCollections0_HTTP_Handler(srv))
	r.GET("/v1/get/article/list", _Bff_GetArticleList0_HTTP_Handler(srv))
	r.GET("/v1/get/article/list/hot", _Bff_GetArticleListHot0_HTTP_Handler(srv))
	r.POST("/v1/get/article/count", _Bff_GetArticleCount0_HTTP_Handler(srv))
	r.POST("/v1/get/article/count/visitor", _Bff_GetArticleCountVisitor0_HTTP_Handler(srv))
	r.POST("/v1/get/user/article/list", _Bff_GetUserArticleList0_HTTP_Handler(srv))
	r.GET("/v1/get/user/article/list/visitor", _Bff_GetUserArticleListVisitor0_HTTP_Handler(srv))
	r.GET("/v1/get/article/statistic", _Bff_GetArticleStatistic0_HTTP_Handler(srv))
	r.GET("/v1/get/article/list/statistic", _Bff_GetArticleListStatistic0_HTTP_Handler(srv))
	r.GET("/v1/get/last/article/draft", _Bff_GetLastArticleDraft0_HTTP_Handler(srv))
	r.POST("/v1/create/article/draft", _Bff_CreateArticleDraft0_HTTP_Handler(srv))
	r.POST("/v1/article/draft/mark", _Bff_ArticleDraftMark0_HTTP_Handler(srv))
	r.GET("/v1/get/article/draft/list", _Bff_GetArticleDraftList0_HTTP_Handler(srv))
	r.POST("/v1/send/article", _Bff_SendArticle0_HTTP_Handler(srv))
	r.POST("/v1/send/article/edit", _Bff_SendArticleEdit0_HTTP_Handler(srv))
	r.POST("/v1/delete/article", _Bff_DeleteArticle0_HTTP_Handler(srv))
	r.POST("/v1/set/article/agree", _Bff_SetArticleAgree0_HTTP_Handler(srv))
	r.POST("/v1/set/article/view", _Bff_SetArticleView0_HTTP_Handler(srv))
	r.POST("/v1/set/article/collect", _Bff_SetArticleCollect0_HTTP_Handler(srv))
	r.POST("/v1/cancel/article/agree", _Bff_CancelArticleAgree0_HTTP_Handler(srv))
	r.POST("/v1/cancel/article/collect", _Bff_CancelArticleCollect0_HTTP_Handler(srv))
	r.POST("/v1/article/statistic/judge", _Bff_ArticleStatisticJudge0_HTTP_Handler(srv))
	r.GET("/v1/get/talk/list", _Bff_GetTalkList0_HTTP_Handler(srv))
	r.GET("/v1/get/talk/list/hot", _Bff_GetTalkListHot0_HTTP_Handler(srv))
	r.GET("/v1/get/talk/list/statistic", _Bff_GetTalkListStatistic0_HTTP_Handler(srv))
	r.POST("/v1/get/user/talk/list", _Bff_GetUserTalkList0_HTTP_Handler(srv))
	r.GET("/v1/get/user/talk/list/visitor", _Bff_GetUserTalkListVisitor0_HTTP_Handler(srv))
	r.POST("/v1/get/talk/count", _Bff_GetTalkCount0_HTTP_Handler(srv))
	r.POST("/v1/get/talk/count/visitor", _Bff_GetTalkCountVisitor0_HTTP_Handler(srv))
	r.GET("/v1/get/talk/statistic", _Bff_GetTalkStatistic0_HTTP_Handler(srv))
	r.GET("/v1/get/last/talk/draft", _Bff_GetLastTalkDraft0_HTTP_Handler(srv))
	r.POST("/v1/create/talk/draft", _Bff_CreateTalkDraft0_HTTP_Handler(srv))
	r.POST("/v1/send/talk", _Bff_SendTalk0_HTTP_Handler(srv))
	r.POST("/v1/send/talk/edit", _Bff_SendTalkEdit0_HTTP_Handler(srv))
	r.POST("/v1/delete/talk", _Bff_DeleteTalk0_HTTP_Handler(srv))
	r.POST("/v1/set/talk/view", _Bff_SetTalkView0_HTTP_Handler(srv))
	r.POST("/v1/talk/statistic/judge", _Bff_TalkStatisticJudge0_HTTP_Handler(srv))
	r.POST("/v1/set/talk/agree", _Bff_SetTalkAgree0_HTTP_Handler(srv))
	r.POST("/v1/set/talk/collect", _Bff_SetTalkCollect0_HTTP_Handler(srv))
	r.POST("/v1/cancel/talk/agree", _Bff_CancelTalkAgree0_HTTP_Handler(srv))
	r.POST("/v1/cancel/talk/collect", _Bff_CancelTalkCollect0_HTTP_Handler(srv))
	r.GET("/v1/get/last/column/draft", _Bff_GetLastColumnDraft0_HTTP_Handler(srv))
	r.POST("/v1/create/column/draft", _Bff_CreateColumnDraft0_HTTP_Handler(srv))
	r.POST("/v1/create/column", _Bff_CreateColumn0_HTTP_Handler(srv))
	r.GET("/v1/get/column/list", _Bff_GetColumnList0_HTTP_Handler(srv))
	r.GET("/v1/get/column/list/hot", _Bff_GetColumnListHot0_HTTP_Handler(srv))
	r.GET("/v1/get/column/list/statistic", _Bff_GetColumnListStatistic0_HTTP_Handler(srv))
}

func _Bff_UserRegister0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserRegisterReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/UserRegister")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserRegister(ctx, req.(*UserRegisterReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_LoginByPassword0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginByPasswordReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/LoginByPassword")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginByPassword(ctx, req.(*LoginByPasswordReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_LoginByCode0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginByCodeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/LoginByCode")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginByCode(ctx, req.(*LoginByCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_LoginByWeChat0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginByWeChatReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/LoginByWeChat")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginByWeChat(ctx, req.(*LoginByWeChatReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_LoginByGithub0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginByGithubReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/LoginByGithub")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginByGithub(ctx, req.(*LoginByGithubReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_LoginPasswordReset0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginPasswordResetReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/LoginPasswordReset")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginPasswordReset(ctx, req.(*LoginPasswordResetReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SendPhoneCode0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendPhoneCodeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/SendPhoneCode")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendPhoneCode(ctx, req.(*SendPhoneCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SendEmailCode0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendEmailCodeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/SendEmailCode")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendEmailCode(ctx, req.(*SendEmailCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetCosSessionKey0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetCosSessionKey")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCosSessionKey(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCosSessionKeyReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetAccount0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetAccount")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAccount(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAccountReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetProfile0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetProfile")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProfile(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetProfileReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetUserInfo0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserInfoReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetUserInfo")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserInfo(ctx, req.(*GetUserInfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetProfileUpdate0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetProfileUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProfileUpdate(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetProfileUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_SetProfileUpdate0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetProfileUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/SetProfileUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetProfileUpdate(ctx, req.(*SetProfileUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SetUserPhone0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetUserPhoneReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/SetUserPhone")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetUserPhone(ctx, req.(*SetUserPhoneReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SetUserEmail0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetUserEmailReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/SetUserEmail")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetUserEmail(ctx, req.(*SetUserEmailReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SetUserPassword0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetUserPasswordReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/SetUserPassword")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetUserPassword(ctx, req.(*SetUserPasswordReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_ChangeUserPassword0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ChangeUserPasswordReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/ChangeUserPassword")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ChangeUserPassword(ctx, req.(*ChangeUserPasswordReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_UnbindUserPhone0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UnbindUserPhoneReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/UnbindUserPhone")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UnbindUserPhone(ctx, req.(*UnbindUserPhoneReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_UnbindUserEmail0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UnbindUserEmailReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/UnbindUserEmail")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UnbindUserEmail(ctx, req.(*UnbindUserEmailReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetLeaderBoard0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetLeaderBoard")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLeaderBoard(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetLeaderBoardReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetCollectArticle0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCollectArticleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetCollectArticle")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCollectArticle(ctx, req.(*GetCollectArticleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleListReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetCollectArticleCount0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCollectArticleCountReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetCollectArticleCount")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCollectArticleCount(ctx, req.(*GetCollectArticleCountReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCollectArticleCountReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetCollectTalk0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCollectTalkReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetCollectTalk")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCollectTalk(ctx, req.(*GetCollectTalkReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTalkListReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetCollectTalkCount0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCollectTalkCountReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetCollectTalkCount")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCollectTalkCount(ctx, req.(*GetCollectTalkCountReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCollectTalkCountReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetCollection0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCollectionReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetCollection")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCollection(ctx, req.(*GetCollectionReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCollectionReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetCollections0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCollectionsReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetCollections")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCollections(ctx, req.(*GetCollectionsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCollectionsReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetCollectionsCount0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetCollectionsCount")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCollectionsCount(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCollectionsCountReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetCollectionsByVisitor0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCollectionsByVisitorReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetCollectionsByVisitor")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCollectionsByVisitor(ctx, req.(*GetCollectionsByVisitorReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCollectionsReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetCollectionsVisitorCount0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCollectionsVisitorCountReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetCollectionsVisitorCount")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCollectionsVisitorCount(ctx, req.(*GetCollectionsVisitorCountReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCollectionsCountReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_CreateCollections0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCollectionsReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/CreateCollections")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCollections(ctx, req.(*CreateCollectionsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_EditCollections0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EditCollectionsReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/EditCollections")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EditCollections(ctx, req.(*EditCollectionsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_DeleteCollections0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCollectionsReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/DeleteCollections")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCollections(ctx, req.(*DeleteCollectionsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetArticleList0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetArticleListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetArticleList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArticleList(ctx, req.(*GetArticleListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleListReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetArticleListHot0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetArticleListHotReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetArticleListHot")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArticleListHot(ctx, req.(*GetArticleListHotReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleListHotReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetArticleCount0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetArticleCount")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArticleCount(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleCountReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetArticleCountVisitor0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetArticleCountVisitorReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetArticleCountVisitor")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArticleCountVisitor(ctx, req.(*GetArticleCountVisitorReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleCountReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetUserArticleList0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserArticleListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetUserArticleList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserArticleList(ctx, req.(*GetUserArticleListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleListReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetUserArticleListVisitor0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserArticleListVisitorReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetUserArticleListVisitor")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserArticleListVisitor(ctx, req.(*GetUserArticleListVisitorReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleListReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetArticleStatistic0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetArticleStatisticReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetArticleStatistic")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArticleStatistic(ctx, req.(*GetArticleStatisticReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleStatisticReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetArticleListStatistic0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetArticleListStatisticReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetArticleListStatistic")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArticleListStatistic(ctx, req.(*GetArticleListStatisticReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleListStatisticReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetLastArticleDraft0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetLastArticleDraft")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLastArticleDraft(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetLastArticleDraftReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_CreateArticleDraft0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/CreateArticleDraft")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateArticleDraft(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateArticleDraftReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_ArticleDraftMark0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ArticleDraftMarkReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/ArticleDraftMark")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ArticleDraftMark(ctx, req.(*ArticleDraftMarkReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetArticleDraftList0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetArticleDraftList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArticleDraftList(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleDraftListReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_SendArticle0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendArticleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/SendArticle")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendArticle(ctx, req.(*SendArticleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SendArticleEdit0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendArticleEditReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/SendArticleEdit")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendArticleEdit(ctx, req.(*SendArticleEditReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_DeleteArticle0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteArticleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/DeleteArticle")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteArticle(ctx, req.(*DeleteArticleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SetArticleAgree0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetArticleAgreeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/SetArticleAgree")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetArticleAgree(ctx, req.(*SetArticleAgreeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SetArticleView0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetArticleViewReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/SetArticleView")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetArticleView(ctx, req.(*SetArticleViewReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SetArticleCollect0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetArticleCollectReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/SetArticleCollect")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetArticleCollect(ctx, req.(*SetArticleCollectReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_CancelArticleAgree0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CancelArticleAgreeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/CancelArticleAgree")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CancelArticleAgree(ctx, req.(*CancelArticleAgreeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_CancelArticleCollect0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CancelArticleCollectReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/CancelArticleCollect")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CancelArticleCollect(ctx, req.(*CancelArticleCollectReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_ArticleStatisticJudge0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ArticleStatisticJudgeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/ArticleStatisticJudge")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ArticleStatisticJudge(ctx, req.(*ArticleStatisticJudgeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ArticleStatisticJudgeReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetTalkList0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTalkListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetTalkList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTalkList(ctx, req.(*GetTalkListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTalkListReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetTalkListHot0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTalkListHotReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetTalkListHot")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTalkListHot(ctx, req.(*GetTalkListHotReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTalkListHotReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetTalkListStatistic0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTalkListStatisticReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetTalkListStatistic")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTalkListStatistic(ctx, req.(*GetTalkListStatisticReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTalkListStatisticReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetUserTalkList0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserTalkListReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetUserTalkList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserTalkList(ctx, req.(*GetUserTalkListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTalkListReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetUserTalkListVisitor0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserTalkListVisitorReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetUserTalkListVisitor")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserTalkListVisitor(ctx, req.(*GetUserTalkListVisitorReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTalkListReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetTalkCount0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetTalkCount")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTalkCount(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTalkCountReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetTalkCountVisitor0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTalkCountVisitorReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetTalkCountVisitor")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTalkCountVisitor(ctx, req.(*GetTalkCountVisitorReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTalkCountReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetTalkStatistic0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTalkStatisticReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetTalkStatistic")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTalkStatistic(ctx, req.(*GetTalkStatisticReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTalkStatisticReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetLastTalkDraft0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetLastTalkDraft")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLastTalkDraft(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetLastTalkDraftReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_CreateTalkDraft0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/CreateTalkDraft")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTalkDraft(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTalkDraftReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_SendTalk0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendTalkReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/SendTalk")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendTalk(ctx, req.(*SendTalkReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SendTalkEdit0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendTalkEditReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/SendTalkEdit")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendTalkEdit(ctx, req.(*SendTalkEditReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_DeleteTalk0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTalkReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/DeleteTalk")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTalk(ctx, req.(*DeleteTalkReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SetTalkView0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetTalkViewReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/SetTalkView")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetTalkView(ctx, req.(*SetTalkViewReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_TalkStatisticJudge0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TalkStatisticJudgeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/TalkStatisticJudge")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TalkStatisticJudge(ctx, req.(*TalkStatisticJudgeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TalkStatisticJudgeReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_SetTalkAgree0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetTalkAgreeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/SetTalkAgree")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetTalkAgree(ctx, req.(*SetTalkAgreeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SetTalkCollect0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetTalkCollectReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/SetTalkCollect")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetTalkCollect(ctx, req.(*SetTalkCollectReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_CancelTalkAgree0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CancelTalkAgreeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/CancelTalkAgree")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CancelTalkAgree(ctx, req.(*CancelTalkAgreeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_CancelTalkCollect0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CancelTalkCollectReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/CancelTalkCollect")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CancelTalkCollect(ctx, req.(*CancelTalkCollectReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetLastColumnDraft0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetLastColumnDraft")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLastColumnDraft(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetLastColumnDraftReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_CreateColumnDraft0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/CreateColumnDraft")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateColumnDraft(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateColumnDraftReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_CreateColumn0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateColumnReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/CreateColumn")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateColumn(ctx, req.(*CreateColumnReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetColumnList0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetColumnListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetColumnList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetColumnList(ctx, req.(*GetColumnListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetColumnListReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetColumnListHot0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetColumnListHotReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetColumnListHot")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetColumnListHot(ctx, req.(*GetColumnListHotReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetColumnListHotReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetColumnListStatistic0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetColumnListStatisticReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetColumnListStatistic")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetColumnListStatistic(ctx, req.(*GetColumnListStatisticReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetColumnListStatisticReply)
		return ctx.Result(200, reply)
	}
}

type BffHTTPClient interface {
	ArticleDraftMark(ctx context.Context, req *ArticleDraftMarkReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	ArticleStatisticJudge(ctx context.Context, req *ArticleStatisticJudgeReq, opts ...http.CallOption) (rsp *ArticleStatisticJudgeReply, err error)
	CancelArticleAgree(ctx context.Context, req *CancelArticleAgreeReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	CancelArticleCollect(ctx context.Context, req *CancelArticleCollectReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	CancelTalkAgree(ctx context.Context, req *CancelTalkAgreeReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	CancelTalkCollect(ctx context.Context, req *CancelTalkCollectReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	ChangeUserPassword(ctx context.Context, req *ChangeUserPasswordReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	CreateArticleDraft(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *CreateArticleDraftReply, err error)
	CreateCollections(ctx context.Context, req *CreateCollectionsReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	CreateColumn(ctx context.Context, req *CreateColumnReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	CreateColumnDraft(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *CreateColumnDraftReply, err error)
	CreateTalkDraft(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *CreateTalkDraftReply, err error)
	DeleteArticle(ctx context.Context, req *DeleteArticleReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteCollections(ctx context.Context, req *DeleteCollectionsReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteTalk(ctx context.Context, req *DeleteTalkReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	EditCollections(ctx context.Context, req *EditCollectionsReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetAccount(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetAccountReply, err error)
	GetArticleCount(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetArticleCountReply, err error)
	GetArticleCountVisitor(ctx context.Context, req *GetArticleCountVisitorReq, opts ...http.CallOption) (rsp *GetArticleCountReply, err error)
	GetArticleDraftList(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetArticleDraftListReply, err error)
	GetArticleList(ctx context.Context, req *GetArticleListReq, opts ...http.CallOption) (rsp *GetArticleListReply, err error)
	GetArticleListHot(ctx context.Context, req *GetArticleListHotReq, opts ...http.CallOption) (rsp *GetArticleListHotReply, err error)
	GetArticleListStatistic(ctx context.Context, req *GetArticleListStatisticReq, opts ...http.CallOption) (rsp *GetArticleListStatisticReply, err error)
	GetArticleStatistic(ctx context.Context, req *GetArticleStatisticReq, opts ...http.CallOption) (rsp *GetArticleStatisticReply, err error)
	GetCollectArticle(ctx context.Context, req *GetCollectArticleReq, opts ...http.CallOption) (rsp *GetArticleListReply, err error)
	GetCollectArticleCount(ctx context.Context, req *GetCollectArticleCountReq, opts ...http.CallOption) (rsp *GetCollectArticleCountReply, err error)
	GetCollectTalk(ctx context.Context, req *GetCollectTalkReq, opts ...http.CallOption) (rsp *GetTalkListReply, err error)
	GetCollectTalkCount(ctx context.Context, req *GetCollectTalkCountReq, opts ...http.CallOption) (rsp *GetCollectTalkCountReply, err error)
	GetCollection(ctx context.Context, req *GetCollectionReq, opts ...http.CallOption) (rsp *GetCollectionReply, err error)
	GetCollections(ctx context.Context, req *GetCollectionsReq, opts ...http.CallOption) (rsp *GetCollectionsReply, err error)
	GetCollectionsByVisitor(ctx context.Context, req *GetCollectionsByVisitorReq, opts ...http.CallOption) (rsp *GetCollectionsReply, err error)
	GetCollectionsCount(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetCollectionsCountReply, err error)
	GetCollectionsVisitorCount(ctx context.Context, req *GetCollectionsVisitorCountReq, opts ...http.CallOption) (rsp *GetCollectionsCountReply, err error)
	GetColumnList(ctx context.Context, req *GetColumnListReq, opts ...http.CallOption) (rsp *GetColumnListReply, err error)
	GetColumnListHot(ctx context.Context, req *GetColumnListHotReq, opts ...http.CallOption) (rsp *GetColumnListHotReply, err error)
	GetColumnListStatistic(ctx context.Context, req *GetColumnListStatisticReq, opts ...http.CallOption) (rsp *GetColumnListStatisticReply, err error)
	GetCosSessionKey(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetCosSessionKeyReply, err error)
	GetLastArticleDraft(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetLastArticleDraftReply, err error)
	GetLastColumnDraft(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetLastColumnDraftReply, err error)
	GetLastTalkDraft(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetLastTalkDraftReply, err error)
	GetLeaderBoard(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetLeaderBoardReply, err error)
	GetProfile(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetProfileReply, err error)
	GetProfileUpdate(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetProfileUpdateReply, err error)
	GetTalkCount(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetTalkCountReply, err error)
	GetTalkCountVisitor(ctx context.Context, req *GetTalkCountVisitorReq, opts ...http.CallOption) (rsp *GetTalkCountReply, err error)
	GetTalkList(ctx context.Context, req *GetTalkListReq, opts ...http.CallOption) (rsp *GetTalkListReply, err error)
	GetTalkListHot(ctx context.Context, req *GetTalkListHotReq, opts ...http.CallOption) (rsp *GetTalkListHotReply, err error)
	GetTalkListStatistic(ctx context.Context, req *GetTalkListStatisticReq, opts ...http.CallOption) (rsp *GetTalkListStatisticReply, err error)
	GetTalkStatistic(ctx context.Context, req *GetTalkStatisticReq, opts ...http.CallOption) (rsp *GetTalkStatisticReply, err error)
	GetUserArticleList(ctx context.Context, req *GetUserArticleListReq, opts ...http.CallOption) (rsp *GetArticleListReply, err error)
	GetUserArticleListVisitor(ctx context.Context, req *GetUserArticleListVisitorReq, opts ...http.CallOption) (rsp *GetArticleListReply, err error)
	GetUserInfo(ctx context.Context, req *GetUserInfoReq, opts ...http.CallOption) (rsp *GetUserInfoReply, err error)
	GetUserTalkList(ctx context.Context, req *GetUserTalkListReq, opts ...http.CallOption) (rsp *GetTalkListReply, err error)
	GetUserTalkListVisitor(ctx context.Context, req *GetUserTalkListVisitorReq, opts ...http.CallOption) (rsp *GetTalkListReply, err error)
	LoginByCode(ctx context.Context, req *LoginByCodeReq, opts ...http.CallOption) (rsp *LoginReply, err error)
	LoginByGithub(ctx context.Context, req *LoginByGithubReq, opts ...http.CallOption) (rsp *LoginReply, err error)
	LoginByPassword(ctx context.Context, req *LoginByPasswordReq, opts ...http.CallOption) (rsp *LoginReply, err error)
	LoginByWeChat(ctx context.Context, req *LoginByWeChatReq, opts ...http.CallOption) (rsp *LoginReply, err error)
	LoginPasswordReset(ctx context.Context, req *LoginPasswordResetReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SendArticle(ctx context.Context, req *SendArticleReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SendArticleEdit(ctx context.Context, req *SendArticleEditReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SendEmailCode(ctx context.Context, req *SendEmailCodeReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SendPhoneCode(ctx context.Context, req *SendPhoneCodeReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SendTalk(ctx context.Context, req *SendTalkReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SendTalkEdit(ctx context.Context, req *SendTalkEditReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetArticleAgree(ctx context.Context, req *SetArticleAgreeReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetArticleCollect(ctx context.Context, req *SetArticleCollectReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetArticleView(ctx context.Context, req *SetArticleViewReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetProfileUpdate(ctx context.Context, req *SetProfileUpdateReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetTalkAgree(ctx context.Context, req *SetTalkAgreeReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetTalkCollect(ctx context.Context, req *SetTalkCollectReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetTalkView(ctx context.Context, req *SetTalkViewReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetUserEmail(ctx context.Context, req *SetUserEmailReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetUserPassword(ctx context.Context, req *SetUserPasswordReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetUserPhone(ctx context.Context, req *SetUserPhoneReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	TalkStatisticJudge(ctx context.Context, req *TalkStatisticJudgeReq, opts ...http.CallOption) (rsp *TalkStatisticJudgeReply, err error)
	UnbindUserEmail(ctx context.Context, req *UnbindUserEmailReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UnbindUserPhone(ctx context.Context, req *UnbindUserPhoneReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UserRegister(ctx context.Context, req *UserRegisterReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type BffHTTPClientImpl struct {
	cc *http.Client
}

func NewBffHTTPClient(client *http.Client) BffHTTPClient {
	return &BffHTTPClientImpl{client}
}

func (c *BffHTTPClientImpl) ArticleDraftMark(ctx context.Context, in *ArticleDraftMarkReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/article/draft/mark"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/ArticleDraftMark"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) ArticleStatisticJudge(ctx context.Context, in *ArticleStatisticJudgeReq, opts ...http.CallOption) (*ArticleStatisticJudgeReply, error) {
	var out ArticleStatisticJudgeReply
	pattern := "/v1/article/statistic/judge"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/ArticleStatisticJudge"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) CancelArticleAgree(ctx context.Context, in *CancelArticleAgreeReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/cancel/article/agree"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/CancelArticleAgree"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) CancelArticleCollect(ctx context.Context, in *CancelArticleCollectReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/cancel/article/collect"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/CancelArticleCollect"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) CancelTalkAgree(ctx context.Context, in *CancelTalkAgreeReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/cancel/talk/agree"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/CancelTalkAgree"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) CancelTalkCollect(ctx context.Context, in *CancelTalkCollectReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/cancel/talk/collect"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/CancelTalkCollect"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) ChangeUserPassword(ctx context.Context, in *ChangeUserPasswordReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/change/user/password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/ChangeUserPassword"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) CreateArticleDraft(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*CreateArticleDraftReply, error) {
	var out CreateArticleDraftReply
	pattern := "/v1/create/article/draft"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/CreateArticleDraft"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) CreateCollections(ctx context.Context, in *CreateCollectionsReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/create/collections"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/CreateCollections"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) CreateColumn(ctx context.Context, in *CreateColumnReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/create/column"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/CreateColumn"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) CreateColumnDraft(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*CreateColumnDraftReply, error) {
	var out CreateColumnDraftReply
	pattern := "/v1/create/column/draft"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/CreateColumnDraft"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) CreateTalkDraft(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*CreateTalkDraftReply, error) {
	var out CreateTalkDraftReply
	pattern := "/v1/create/talk/draft"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/CreateTalkDraft"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) DeleteArticle(ctx context.Context, in *DeleteArticleReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/delete/article"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/DeleteArticle"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) DeleteCollections(ctx context.Context, in *DeleteCollectionsReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/delete/collections"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/DeleteCollections"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) DeleteTalk(ctx context.Context, in *DeleteTalkReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/delete/talk"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/DeleteTalk"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) EditCollections(ctx context.Context, in *EditCollectionsReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/edit/collections"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/EditCollections"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetAccount(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetAccountReply, error) {
	var out GetAccountReply
	pattern := "/v1/get/user/account"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetAccount"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetArticleCount(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetArticleCountReply, error) {
	var out GetArticleCountReply
	pattern := "/v1/get/article/count"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetArticleCount"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetArticleCountVisitor(ctx context.Context, in *GetArticleCountVisitorReq, opts ...http.CallOption) (*GetArticleCountReply, error) {
	var out GetArticleCountReply
	pattern := "/v1/get/article/count/visitor"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetArticleCountVisitor"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetArticleDraftList(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetArticleDraftListReply, error) {
	var out GetArticleDraftListReply
	pattern := "/v1/get/article/draft/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetArticleDraftList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetArticleList(ctx context.Context, in *GetArticleListReq, opts ...http.CallOption) (*GetArticleListReply, error) {
	var out GetArticleListReply
	pattern := "/v1/get/article/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetArticleList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetArticleListHot(ctx context.Context, in *GetArticleListHotReq, opts ...http.CallOption) (*GetArticleListHotReply, error) {
	var out GetArticleListHotReply
	pattern := "/v1/get/article/list/hot"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetArticleListHot"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetArticleListStatistic(ctx context.Context, in *GetArticleListStatisticReq, opts ...http.CallOption) (*GetArticleListStatisticReply, error) {
	var out GetArticleListStatisticReply
	pattern := "/v1/get/article/list/statistic"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetArticleListStatistic"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetArticleStatistic(ctx context.Context, in *GetArticleStatisticReq, opts ...http.CallOption) (*GetArticleStatisticReply, error) {
	var out GetArticleStatisticReply
	pattern := "/v1/get/article/statistic"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetArticleStatistic"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetCollectArticle(ctx context.Context, in *GetCollectArticleReq, opts ...http.CallOption) (*GetArticleListReply, error) {
	var out GetArticleListReply
	pattern := "/v1/get/collect/article"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetCollectArticle"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetCollectArticleCount(ctx context.Context, in *GetCollectArticleCountReq, opts ...http.CallOption) (*GetCollectArticleCountReply, error) {
	var out GetCollectArticleCountReply
	pattern := "/v1/get/collect/article/count"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetCollectArticleCount"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetCollectTalk(ctx context.Context, in *GetCollectTalkReq, opts ...http.CallOption) (*GetTalkListReply, error) {
	var out GetTalkListReply
	pattern := "/v1/get/collect/talk"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetCollectTalk"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetCollectTalkCount(ctx context.Context, in *GetCollectTalkCountReq, opts ...http.CallOption) (*GetCollectTalkCountReply, error) {
	var out GetCollectTalkCountReply
	pattern := "/v1/get/collect/talk/count"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetCollectTalkCount"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetCollection(ctx context.Context, in *GetCollectionReq, opts ...http.CallOption) (*GetCollectionReply, error) {
	var out GetCollectionReply
	pattern := "/v1/get/collection"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetCollection"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetCollections(ctx context.Context, in *GetCollectionsReq, opts ...http.CallOption) (*GetCollectionsReply, error) {
	var out GetCollectionsReply
	pattern := "/v1/get/collections"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetCollections"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetCollectionsByVisitor(ctx context.Context, in *GetCollectionsByVisitorReq, opts ...http.CallOption) (*GetCollectionsReply, error) {
	var out GetCollectionsReply
	pattern := "/v1/get/collections/visitor"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetCollectionsByVisitor"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetCollectionsCount(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetCollectionsCountReply, error) {
	var out GetCollectionsCountReply
	pattern := "/v1/get/collections/count"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetCollectionsCount"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetCollectionsVisitorCount(ctx context.Context, in *GetCollectionsVisitorCountReq, opts ...http.CallOption) (*GetCollectionsCountReply, error) {
	var out GetCollectionsCountReply
	pattern := "/v1/get/collections/visitor/count"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetCollectionsVisitorCount"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetColumnList(ctx context.Context, in *GetColumnListReq, opts ...http.CallOption) (*GetColumnListReply, error) {
	var out GetColumnListReply
	pattern := "/v1/get/column/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetColumnList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetColumnListHot(ctx context.Context, in *GetColumnListHotReq, opts ...http.CallOption) (*GetColumnListHotReply, error) {
	var out GetColumnListHotReply
	pattern := "/v1/get/column/list/hot"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetColumnListHot"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetColumnListStatistic(ctx context.Context, in *GetColumnListStatisticReq, opts ...http.CallOption) (*GetColumnListStatisticReply, error) {
	var out GetColumnListStatisticReply
	pattern := "/v1/get/column/list/statistic"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetColumnListStatistic"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetCosSessionKey(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetCosSessionKeyReply, error) {
	var out GetCosSessionKeyReply
	pattern := "/v1/get/cos/session/key"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetCosSessionKey"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetLastArticleDraft(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetLastArticleDraftReply, error) {
	var out GetLastArticleDraftReply
	pattern := "/v1/get/last/article/draft"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetLastArticleDraft"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetLastColumnDraft(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetLastColumnDraftReply, error) {
	var out GetLastColumnDraftReply
	pattern := "/v1/get/last/column/draft"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetLastColumnDraft"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetLastTalkDraft(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetLastTalkDraftReply, error) {
	var out GetLastTalkDraftReply
	pattern := "/v1/get/last/talk/draft"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetLastTalkDraft"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetLeaderBoard(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetLeaderBoardReply, error) {
	var out GetLeaderBoardReply
	pattern := "/v1/get/leaderboard"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetLeaderBoard"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetProfile(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetProfileReply, error) {
	var out GetProfileReply
	pattern := "/v1/get/user/profile"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetProfile"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetProfileUpdate(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetProfileUpdateReply, error) {
	var out GetProfileUpdateReply
	pattern := "/v1/get/user/profile/update"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetProfileUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetTalkCount(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetTalkCountReply, error) {
	var out GetTalkCountReply
	pattern := "/v1/get/talk/count"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetTalkCount"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetTalkCountVisitor(ctx context.Context, in *GetTalkCountVisitorReq, opts ...http.CallOption) (*GetTalkCountReply, error) {
	var out GetTalkCountReply
	pattern := "/v1/get/talk/count/visitor"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetTalkCountVisitor"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetTalkList(ctx context.Context, in *GetTalkListReq, opts ...http.CallOption) (*GetTalkListReply, error) {
	var out GetTalkListReply
	pattern := "/v1/get/talk/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetTalkList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetTalkListHot(ctx context.Context, in *GetTalkListHotReq, opts ...http.CallOption) (*GetTalkListHotReply, error) {
	var out GetTalkListHotReply
	pattern := "/v1/get/talk/list/hot"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetTalkListHot"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetTalkListStatistic(ctx context.Context, in *GetTalkListStatisticReq, opts ...http.CallOption) (*GetTalkListStatisticReply, error) {
	var out GetTalkListStatisticReply
	pattern := "/v1/get/talk/list/statistic"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetTalkListStatistic"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetTalkStatistic(ctx context.Context, in *GetTalkStatisticReq, opts ...http.CallOption) (*GetTalkStatisticReply, error) {
	var out GetTalkStatisticReply
	pattern := "/v1/get/talk/statistic"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetTalkStatistic"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetUserArticleList(ctx context.Context, in *GetUserArticleListReq, opts ...http.CallOption) (*GetArticleListReply, error) {
	var out GetArticleListReply
	pattern := "/v1/get/user/article/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetUserArticleList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetUserArticleListVisitor(ctx context.Context, in *GetUserArticleListVisitorReq, opts ...http.CallOption) (*GetArticleListReply, error) {
	var out GetArticleListReply
	pattern := "/v1/get/user/article/list/visitor"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetUserArticleListVisitor"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...http.CallOption) (*GetUserInfoReply, error) {
	var out GetUserInfoReply
	pattern := "/v1/get/user/info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetUserInfo"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetUserTalkList(ctx context.Context, in *GetUserTalkListReq, opts ...http.CallOption) (*GetTalkListReply, error) {
	var out GetTalkListReply
	pattern := "/v1/get/user/talk/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetUserTalkList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetUserTalkListVisitor(ctx context.Context, in *GetUserTalkListVisitorReq, opts ...http.CallOption) (*GetTalkListReply, error) {
	var out GetTalkListReply
	pattern := "/v1/get/user/talk/list/visitor"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetUserTalkListVisitor"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) LoginByCode(ctx context.Context, in *LoginByCodeReq, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/v1/user/login/code"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/LoginByCode"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) LoginByGithub(ctx context.Context, in *LoginByGithubReq, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/v1/user/login/github"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/LoginByGithub"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) LoginByPassword(ctx context.Context, in *LoginByPasswordReq, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/v1/user/login/password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/LoginByPassword"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) LoginByWeChat(ctx context.Context, in *LoginByWeChatReq, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/v1/user/login/wechat"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/LoginByWeChat"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) LoginPasswordReset(ctx context.Context, in *LoginPasswordResetReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/user/login/password/reset"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/LoginPasswordReset"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SendArticle(ctx context.Context, in *SendArticleReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/send/article"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/SendArticle"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SendArticleEdit(ctx context.Context, in *SendArticleEditReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/send/article/edit"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/SendArticleEdit"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SendEmailCode(ctx context.Context, in *SendEmailCodeReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/user/code/email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/SendEmailCode"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SendPhoneCode(ctx context.Context, in *SendPhoneCodeReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/user/code/phone"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/SendPhoneCode"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SendTalk(ctx context.Context, in *SendTalkReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/send/talk"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/SendTalk"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SendTalkEdit(ctx context.Context, in *SendTalkEditReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/send/talk/edit"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/SendTalkEdit"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SetArticleAgree(ctx context.Context, in *SetArticleAgreeReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/set/article/agree"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/SetArticleAgree"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SetArticleCollect(ctx context.Context, in *SetArticleCollectReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/set/article/collect"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/SetArticleCollect"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SetArticleView(ctx context.Context, in *SetArticleViewReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/set/article/view"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/SetArticleView"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SetProfileUpdate(ctx context.Context, in *SetProfileUpdateReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/set/user/profile/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/SetProfileUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SetTalkAgree(ctx context.Context, in *SetTalkAgreeReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/set/talk/agree"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/SetTalkAgree"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SetTalkCollect(ctx context.Context, in *SetTalkCollectReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/set/talk/collect"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/SetTalkCollect"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SetTalkView(ctx context.Context, in *SetTalkViewReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/set/talk/view"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/SetTalkView"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SetUserEmail(ctx context.Context, in *SetUserEmailReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/set/user/email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/SetUserEmail"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SetUserPassword(ctx context.Context, in *SetUserPasswordReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/set/user/password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/SetUserPassword"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SetUserPhone(ctx context.Context, in *SetUserPhoneReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/set/user/phone"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/SetUserPhone"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) TalkStatisticJudge(ctx context.Context, in *TalkStatisticJudgeReq, opts ...http.CallOption) (*TalkStatisticJudgeReply, error) {
	var out TalkStatisticJudgeReply
	pattern := "/v1/talk/statistic/judge"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/TalkStatisticJudge"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) UnbindUserEmail(ctx context.Context, in *UnbindUserEmailReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/unbind/user/email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/UnbindUserEmail"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) UnbindUserPhone(ctx context.Context, in *UnbindUserPhoneReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/unbind/user/phone"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/UnbindUserPhone"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) UserRegister(ctx context.Context, in *UserRegisterReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/user/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/UserRegister"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
