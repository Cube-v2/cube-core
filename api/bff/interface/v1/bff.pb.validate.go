// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: bff/interface/v1/bff.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserRegisterReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserRegisterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRegisterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRegisterReqMultiError, or nil if none found.
func (m *UserRegisterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRegisterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Password

	// no validation rules for Code

	if len(errors) > 0 {
		return UserRegisterReqMultiError(errors)
	}

	return nil
}

// UserRegisterReqMultiError is an error wrapping multiple validation errors
// returned by UserRegisterReq.ValidateAll() if the designated constraints
// aren't met.
type UserRegisterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRegisterReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRegisterReqMultiError) AllErrors() []error { return m }

// UserRegisterReqValidationError is the validation error returned by
// UserRegisterReq.Validate if the designated constraints aren't met.
type UserRegisterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRegisterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRegisterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRegisterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRegisterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRegisterReqValidationError) ErrorName() string { return "UserRegisterReqValidationError" }

// Error satisfies the builtin error interface
func (e UserRegisterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRegisterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRegisterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRegisterReqValidationError{}

// Validate checks the field values on LoginByPasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginByPasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByPasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByPasswordReqMultiError, or nil if none found.
func (m *LoginByPasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByPasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for Password

	// no validation rules for Mode

	if len(errors) > 0 {
		return LoginByPasswordReqMultiError(errors)
	}

	return nil
}

// LoginByPasswordReqMultiError is an error wrapping multiple validation errors
// returned by LoginByPasswordReq.ValidateAll() if the designated constraints
// aren't met.
type LoginByPasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByPasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByPasswordReqMultiError) AllErrors() []error { return m }

// LoginByPasswordReqValidationError is the validation error returned by
// LoginByPasswordReq.Validate if the designated constraints aren't met.
type LoginByPasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByPasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByPasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByPasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByPasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByPasswordReqValidationError) ErrorName() string {
	return "LoginByPasswordReqValidationError"
}

// Error satisfies the builtin error interface
func (e LoginByPasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByPasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByPasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByPasswordReqValidationError{}

// Validate checks the field values on LoginByCodeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginByCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByCodeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginByCodeReqMultiError,
// or nil if none found.
func (m *LoginByCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phone

	// no validation rules for Code

	if len(errors) > 0 {
		return LoginByCodeReqMultiError(errors)
	}

	return nil
}

// LoginByCodeReqMultiError is an error wrapping multiple validation errors
// returned by LoginByCodeReq.ValidateAll() if the designated constraints
// aren't met.
type LoginByCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByCodeReqMultiError) AllErrors() []error { return m }

// LoginByCodeReqValidationError is the validation error returned by
// LoginByCodeReq.Validate if the designated constraints aren't met.
type LoginByCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByCodeReqValidationError) ErrorName() string { return "LoginByCodeReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginByCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByCodeReqValidationError{}

// Validate checks the field values on LoginByWeChatReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginByWeChatReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByWeChatReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByWeChatReqMultiError, or nil if none found.
func (m *LoginByWeChatReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByWeChatReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Wechat

	if len(errors) > 0 {
		return LoginByWeChatReqMultiError(errors)
	}

	return nil
}

// LoginByWeChatReqMultiError is an error wrapping multiple validation errors
// returned by LoginByWeChatReq.ValidateAll() if the designated constraints
// aren't met.
type LoginByWeChatReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByWeChatReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByWeChatReqMultiError) AllErrors() []error { return m }

// LoginByWeChatReqValidationError is the validation error returned by
// LoginByWeChatReq.Validate if the designated constraints aren't met.
type LoginByWeChatReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByWeChatReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByWeChatReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByWeChatReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByWeChatReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByWeChatReqValidationError) ErrorName() string { return "LoginByWeChatReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginByWeChatReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByWeChatReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByWeChatReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByWeChatReqValidationError{}

// Validate checks the field values on LoginByGithubReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginByGithubReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByGithubReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByGithubReqMultiError, or nil if none found.
func (m *LoginByGithubReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByGithubReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Github

	if len(errors) > 0 {
		return LoginByGithubReqMultiError(errors)
	}

	return nil
}

// LoginByGithubReqMultiError is an error wrapping multiple validation errors
// returned by LoginByGithubReq.ValidateAll() if the designated constraints
// aren't met.
type LoginByGithubReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByGithubReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByGithubReqMultiError) AllErrors() []error { return m }

// LoginByGithubReqValidationError is the validation error returned by
// LoginByGithubReq.Validate if the designated constraints aren't met.
type LoginByGithubReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByGithubReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByGithubReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByGithubReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByGithubReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByGithubReqValidationError) ErrorName() string { return "LoginByGithubReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginByGithubReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByGithubReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByGithubReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByGithubReqValidationError{}

// Validate checks the field values on LoginReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReplyMultiError, or
// nil if none found.
func (m *LoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginReplyMultiError(errors)
	}

	return nil
}

// LoginReplyMultiError is an error wrapping multiple validation errors
// returned by LoginReply.ValidateAll() if the designated constraints aren't met.
type LoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReplyMultiError) AllErrors() []error { return m }

// LoginReplyValidationError is the validation error returned by
// LoginReply.Validate if the designated constraints aren't met.
type LoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReplyValidationError) ErrorName() string { return "LoginReplyValidationError" }

// Error satisfies the builtin error interface
func (e LoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReplyValidationError{}

// Validate checks the field values on LoginPasswordResetReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginPasswordResetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginPasswordResetReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginPasswordResetReqMultiError, or nil if none found.
func (m *LoginPasswordResetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginPasswordResetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for Code

	// no validation rules for Password

	// no validation rules for Mode

	if len(errors) > 0 {
		return LoginPasswordResetReqMultiError(errors)
	}

	return nil
}

// LoginPasswordResetReqMultiError is an error wrapping multiple validation
// errors returned by LoginPasswordResetReq.ValidateAll() if the designated
// constraints aren't met.
type LoginPasswordResetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginPasswordResetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginPasswordResetReqMultiError) AllErrors() []error { return m }

// LoginPasswordResetReqValidationError is the validation error returned by
// LoginPasswordResetReq.Validate if the designated constraints aren't met.
type LoginPasswordResetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginPasswordResetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginPasswordResetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginPasswordResetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginPasswordResetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginPasswordResetReqValidationError) ErrorName() string {
	return "LoginPasswordResetReqValidationError"
}

// Error satisfies the builtin error interface
func (e LoginPasswordResetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginPasswordResetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginPasswordResetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginPasswordResetReqValidationError{}

// Validate checks the field values on SendPhoneCodeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendPhoneCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendPhoneCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendPhoneCodeReqMultiError, or nil if none found.
func (m *SendPhoneCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendPhoneCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phone

	// no validation rules for Template

	if len(errors) > 0 {
		return SendPhoneCodeReqMultiError(errors)
	}

	return nil
}

// SendPhoneCodeReqMultiError is an error wrapping multiple validation errors
// returned by SendPhoneCodeReq.ValidateAll() if the designated constraints
// aren't met.
type SendPhoneCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendPhoneCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendPhoneCodeReqMultiError) AllErrors() []error { return m }

// SendPhoneCodeReqValidationError is the validation error returned by
// SendPhoneCodeReq.Validate if the designated constraints aren't met.
type SendPhoneCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendPhoneCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendPhoneCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendPhoneCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendPhoneCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendPhoneCodeReqValidationError) ErrorName() string { return "SendPhoneCodeReqValidationError" }

// Error satisfies the builtin error interface
func (e SendPhoneCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendPhoneCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendPhoneCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendPhoneCodeReqValidationError{}

// Validate checks the field values on SendEmailCodeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendEmailCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendEmailCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendEmailCodeReqMultiError, or nil if none found.
func (m *SendEmailCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendEmailCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Template

	if len(errors) > 0 {
		return SendEmailCodeReqMultiError(errors)
	}

	return nil
}

// SendEmailCodeReqMultiError is an error wrapping multiple validation errors
// returned by SendEmailCodeReq.ValidateAll() if the designated constraints
// aren't met.
type SendEmailCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendEmailCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendEmailCodeReqMultiError) AllErrors() []error { return m }

// SendEmailCodeReqValidationError is the validation error returned by
// SendEmailCodeReq.Validate if the designated constraints aren't met.
type SendEmailCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendEmailCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendEmailCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendEmailCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendEmailCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendEmailCodeReqValidationError) ErrorName() string { return "SendEmailCodeReqValidationError" }

// Error satisfies the builtin error interface
func (e SendEmailCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendEmailCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendEmailCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendEmailCodeReqValidationError{}

// Validate checks the field values on GetCosSessionKeyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCosSessionKeyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCosSessionKeyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCosSessionKeyReplyMultiError, or nil if none found.
func (m *GetCosSessionKeyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCosSessionKeyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TmpSecretId

	// no validation rules for TmpSecretKey

	// no validation rules for SessionToken

	// no validation rules for StartTime

	// no validation rules for ExpiredTime

	if len(errors) > 0 {
		return GetCosSessionKeyReplyMultiError(errors)
	}

	return nil
}

// GetCosSessionKeyReplyMultiError is an error wrapping multiple validation
// errors returned by GetCosSessionKeyReply.ValidateAll() if the designated
// constraints aren't met.
type GetCosSessionKeyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCosSessionKeyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCosSessionKeyReplyMultiError) AllErrors() []error { return m }

// GetCosSessionKeyReplyValidationError is the validation error returned by
// GetCosSessionKeyReply.Validate if the designated constraints aren't met.
type GetCosSessionKeyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCosSessionKeyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCosSessionKeyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCosSessionKeyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCosSessionKeyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCosSessionKeyReplyValidationError) ErrorName() string {
	return "GetCosSessionKeyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCosSessionKeyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCosSessionKeyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCosSessionKeyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCosSessionKeyReplyValidationError{}

// Validate checks the field values on GetAccountReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAccountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountReplyMultiError, or nil if none found.
func (m *GetAccountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for Qq

	// no validation rules for Wechat

	// no validation rules for Weibo

	// no validation rules for Github

	// no validation rules for Password

	if len(errors) > 0 {
		return GetAccountReplyMultiError(errors)
	}

	return nil
}

// GetAccountReplyMultiError is an error wrapping multiple validation errors
// returned by GetAccountReply.ValidateAll() if the designated constraints
// aren't met.
type GetAccountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountReplyMultiError) AllErrors() []error { return m }

// GetAccountReplyValidationError is the validation error returned by
// GetAccountReply.Validate if the designated constraints aren't met.
type GetAccountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountReplyValidationError) ErrorName() string { return "GetAccountReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetAccountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountReplyValidationError{}

// Validate checks the field values on GetProfileReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProfileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProfileReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProfileReplyMultiError, or nil if none found.
func (m *GetProfileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProfileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Username

	// no validation rules for Avatar

	// no validation rules for School

	// no validation rules for Company

	// no validation rules for Job

	// no validation rules for Homepage

	// no validation rules for Introduce

	if len(errors) > 0 {
		return GetProfileReplyMultiError(errors)
	}

	return nil
}

// GetProfileReplyMultiError is an error wrapping multiple validation errors
// returned by GetProfileReply.ValidateAll() if the designated constraints
// aren't met.
type GetProfileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProfileReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProfileReplyMultiError) AllErrors() []error { return m }

// GetProfileReplyValidationError is the validation error returned by
// GetProfileReply.Validate if the designated constraints aren't met.
type GetProfileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProfileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProfileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProfileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProfileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProfileReplyValidationError) ErrorName() string { return "GetProfileReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetProfileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProfileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProfileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProfileReplyValidationError{}

// Validate checks the field values on GetUserInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserInfoReqMultiError,
// or nil if none found.
func (m *GetUserInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetUserInfoReqMultiError(errors)
	}

	return nil
}

// GetUserInfoReqMultiError is an error wrapping multiple validation errors
// returned by GetUserInfoReq.ValidateAll() if the designated constraints
// aren't met.
type GetUserInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserInfoReqMultiError) AllErrors() []error { return m }

// GetUserInfoReqValidationError is the validation error returned by
// GetUserInfoReq.Validate if the designated constraints aren't met.
type GetUserInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInfoReqValidationError) ErrorName() string { return "GetUserInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e GetUserInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInfoReqValidationError{}

// Validate checks the field values on GetUserInfoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserInfoReplyMultiError, or nil if none found.
func (m *GetUserInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Avatar

	// no validation rules for School

	// no validation rules for Company

	// no validation rules for Job

	// no validation rules for Homepage

	// no validation rules for Introduce

	// no validation rules for Created

	if len(errors) > 0 {
		return GetUserInfoReplyMultiError(errors)
	}

	return nil
}

// GetUserInfoReplyMultiError is an error wrapping multiple validation errors
// returned by GetUserInfoReply.ValidateAll() if the designated constraints
// aren't met.
type GetUserInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserInfoReplyMultiError) AllErrors() []error { return m }

// GetUserInfoReplyValidationError is the validation error returned by
// GetUserInfoReply.Validate if the designated constraints aren't met.
type GetUserInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInfoReplyValidationError) ErrorName() string { return "GetUserInfoReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetUserInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInfoReplyValidationError{}

// Validate checks the field values on GetProfileUpdateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProfileUpdateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProfileUpdateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProfileUpdateReplyMultiError, or nil if none found.
func (m *GetProfileUpdateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProfileUpdateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Avatar

	// no validation rules for School

	// no validation rules for Company

	// no validation rules for Job

	// no validation rules for Homepage

	// no validation rules for Introduce

	// no validation rules for Status

	if len(errors) > 0 {
		return GetProfileUpdateReplyMultiError(errors)
	}

	return nil
}

// GetProfileUpdateReplyMultiError is an error wrapping multiple validation
// errors returned by GetProfileUpdateReply.ValidateAll() if the designated
// constraints aren't met.
type GetProfileUpdateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProfileUpdateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProfileUpdateReplyMultiError) AllErrors() []error { return m }

// GetProfileUpdateReplyValidationError is the validation error returned by
// GetProfileUpdateReply.Validate if the designated constraints aren't met.
type GetProfileUpdateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProfileUpdateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProfileUpdateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProfileUpdateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProfileUpdateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProfileUpdateReplyValidationError) ErrorName() string {
	return "GetProfileUpdateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetProfileUpdateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProfileUpdateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProfileUpdateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProfileUpdateReplyValidationError{}

// Validate checks the field values on SetProfileUpdateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetProfileUpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetProfileUpdateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetProfileUpdateReqMultiError, or nil if none found.
func (m *SetProfileUpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetProfileUpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for School

	// no validation rules for Company

	// no validation rules for Job

	// no validation rules for Homepage

	// no validation rules for Introduce

	if len(errors) > 0 {
		return SetProfileUpdateReqMultiError(errors)
	}

	return nil
}

// SetProfileUpdateReqMultiError is an error wrapping multiple validation
// errors returned by SetProfileUpdateReq.ValidateAll() if the designated
// constraints aren't met.
type SetProfileUpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetProfileUpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetProfileUpdateReqMultiError) AllErrors() []error { return m }

// SetProfileUpdateReqValidationError is the validation error returned by
// SetProfileUpdateReq.Validate if the designated constraints aren't met.
type SetProfileUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetProfileUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetProfileUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetProfileUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetProfileUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetProfileUpdateReqValidationError) ErrorName() string {
	return "SetProfileUpdateReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetProfileUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetProfileUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetProfileUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetProfileUpdateReqValidationError{}

// Validate checks the field values on SetUserPhoneReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetUserPhoneReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserPhoneReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserPhoneReqMultiError, or nil if none found.
func (m *SetUserPhoneReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserPhoneReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phone

	// no validation rules for Code

	if len(errors) > 0 {
		return SetUserPhoneReqMultiError(errors)
	}

	return nil
}

// SetUserPhoneReqMultiError is an error wrapping multiple validation errors
// returned by SetUserPhoneReq.ValidateAll() if the designated constraints
// aren't met.
type SetUserPhoneReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserPhoneReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserPhoneReqMultiError) AllErrors() []error { return m }

// SetUserPhoneReqValidationError is the validation error returned by
// SetUserPhoneReq.Validate if the designated constraints aren't met.
type SetUserPhoneReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserPhoneReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserPhoneReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserPhoneReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserPhoneReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserPhoneReqValidationError) ErrorName() string { return "SetUserPhoneReqValidationError" }

// Error satisfies the builtin error interface
func (e SetUserPhoneReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserPhoneReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserPhoneReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserPhoneReqValidationError{}

// Validate checks the field values on SetUserEmailReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetUserEmailReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserEmailReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserEmailReqMultiError, or nil if none found.
func (m *SetUserEmailReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserEmailReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Code

	if len(errors) > 0 {
		return SetUserEmailReqMultiError(errors)
	}

	return nil
}

// SetUserEmailReqMultiError is an error wrapping multiple validation errors
// returned by SetUserEmailReq.ValidateAll() if the designated constraints
// aren't met.
type SetUserEmailReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserEmailReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserEmailReqMultiError) AllErrors() []error { return m }

// SetUserEmailReqValidationError is the validation error returned by
// SetUserEmailReq.Validate if the designated constraints aren't met.
type SetUserEmailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserEmailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserEmailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserEmailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserEmailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserEmailReqValidationError) ErrorName() string { return "SetUserEmailReqValidationError" }

// Error satisfies the builtin error interface
func (e SetUserEmailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserEmailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserEmailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserEmailReqValidationError{}

// Validate checks the field values on SetUserPasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetUserPasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserPasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserPasswordReqMultiError, or nil if none found.
func (m *SetUserPasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserPasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Password

	if len(errors) > 0 {
		return SetUserPasswordReqMultiError(errors)
	}

	return nil
}

// SetUserPasswordReqMultiError is an error wrapping multiple validation errors
// returned by SetUserPasswordReq.ValidateAll() if the designated constraints
// aren't met.
type SetUserPasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserPasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserPasswordReqMultiError) AllErrors() []error { return m }

// SetUserPasswordReqValidationError is the validation error returned by
// SetUserPasswordReq.Validate if the designated constraints aren't met.
type SetUserPasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserPasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserPasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserPasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserPasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserPasswordReqValidationError) ErrorName() string {
	return "SetUserPasswordReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetUserPasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserPasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserPasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserPasswordReqValidationError{}

// Validate checks the field values on ChangeUserPasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeUserPasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeUserPasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeUserPasswordReqMultiError, or nil if none found.
func (m *ChangeUserPasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeUserPasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Oldpassword

	// no validation rules for Password

	if len(errors) > 0 {
		return ChangeUserPasswordReqMultiError(errors)
	}

	return nil
}

// ChangeUserPasswordReqMultiError is an error wrapping multiple validation
// errors returned by ChangeUserPasswordReq.ValidateAll() if the designated
// constraints aren't met.
type ChangeUserPasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeUserPasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeUserPasswordReqMultiError) AllErrors() []error { return m }

// ChangeUserPasswordReqValidationError is the validation error returned by
// ChangeUserPasswordReq.Validate if the designated constraints aren't met.
type ChangeUserPasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeUserPasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeUserPasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeUserPasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeUserPasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeUserPasswordReqValidationError) ErrorName() string {
	return "ChangeUserPasswordReqValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeUserPasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeUserPasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeUserPasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeUserPasswordReqValidationError{}

// Validate checks the field values on UnbindUserPhoneReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnbindUserPhoneReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnbindUserPhoneReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnbindUserPhoneReqMultiError, or nil if none found.
func (m *UnbindUserPhoneReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UnbindUserPhoneReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phone

	// no validation rules for Code

	if len(errors) > 0 {
		return UnbindUserPhoneReqMultiError(errors)
	}

	return nil
}

// UnbindUserPhoneReqMultiError is an error wrapping multiple validation errors
// returned by UnbindUserPhoneReq.ValidateAll() if the designated constraints
// aren't met.
type UnbindUserPhoneReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnbindUserPhoneReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnbindUserPhoneReqMultiError) AllErrors() []error { return m }

// UnbindUserPhoneReqValidationError is the validation error returned by
// UnbindUserPhoneReq.Validate if the designated constraints aren't met.
type UnbindUserPhoneReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnbindUserPhoneReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnbindUserPhoneReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnbindUserPhoneReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnbindUserPhoneReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnbindUserPhoneReqValidationError) ErrorName() string {
	return "UnbindUserPhoneReqValidationError"
}

// Error satisfies the builtin error interface
func (e UnbindUserPhoneReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnbindUserPhoneReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnbindUserPhoneReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnbindUserPhoneReqValidationError{}

// Validate checks the field values on UnbindUserEmailReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnbindUserEmailReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnbindUserEmailReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnbindUserEmailReqMultiError, or nil if none found.
func (m *UnbindUserEmailReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UnbindUserEmailReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Code

	if len(errors) > 0 {
		return UnbindUserEmailReqMultiError(errors)
	}

	return nil
}

// UnbindUserEmailReqMultiError is an error wrapping multiple validation errors
// returned by UnbindUserEmailReq.ValidateAll() if the designated constraints
// aren't met.
type UnbindUserEmailReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnbindUserEmailReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnbindUserEmailReqMultiError) AllErrors() []error { return m }

// UnbindUserEmailReqValidationError is the validation error returned by
// UnbindUserEmailReq.Validate if the designated constraints aren't met.
type UnbindUserEmailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnbindUserEmailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnbindUserEmailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnbindUserEmailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnbindUserEmailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnbindUserEmailReqValidationError) ErrorName() string {
	return "UnbindUserEmailReqValidationError"
}

// Error satisfies the builtin error interface
func (e UnbindUserEmailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnbindUserEmailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnbindUserEmailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnbindUserEmailReqValidationError{}

// Validate checks the field values on GetLeaderBoardReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLeaderBoardReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLeaderBoardReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLeaderBoardReplyMultiError, or nil if none found.
func (m *GetLeaderBoardReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLeaderBoardReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBoard() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetLeaderBoardReplyValidationError{
						field:  fmt.Sprintf("Board[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetLeaderBoardReplyValidationError{
						field:  fmt.Sprintf("Board[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetLeaderBoardReplyValidationError{
					field:  fmt.Sprintf("Board[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetLeaderBoardReplyMultiError(errors)
	}

	return nil
}

// GetLeaderBoardReplyMultiError is an error wrapping multiple validation
// errors returned by GetLeaderBoardReply.ValidateAll() if the designated
// constraints aren't met.
type GetLeaderBoardReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLeaderBoardReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLeaderBoardReplyMultiError) AllErrors() []error { return m }

// GetLeaderBoardReplyValidationError is the validation error returned by
// GetLeaderBoardReply.Validate if the designated constraints aren't met.
type GetLeaderBoardReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLeaderBoardReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLeaderBoardReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLeaderBoardReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLeaderBoardReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLeaderBoardReplyValidationError) ErrorName() string {
	return "GetLeaderBoardReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetLeaderBoardReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLeaderBoardReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLeaderBoardReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLeaderBoardReplyValidationError{}

// Validate checks the field values on GetCollectArticleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectArticleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectArticleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectArticleReqMultiError, or nil if none found.
func (m *GetCollectArticleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectArticleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Page

	if len(errors) > 0 {
		return GetCollectArticleReqMultiError(errors)
	}

	return nil
}

// GetCollectArticleReqMultiError is an error wrapping multiple validation
// errors returned by GetCollectArticleReq.ValidateAll() if the designated
// constraints aren't met.
type GetCollectArticleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectArticleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectArticleReqMultiError) AllErrors() []error { return m }

// GetCollectArticleReqValidationError is the validation error returned by
// GetCollectArticleReq.Validate if the designated constraints aren't met.
type GetCollectArticleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectArticleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectArticleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectArticleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectArticleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectArticleReqValidationError) ErrorName() string {
	return "GetCollectArticleReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectArticleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectArticleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectArticleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectArticleReqValidationError{}

// Validate checks the field values on GetCollectArticleCountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectArticleCountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectArticleCountReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectArticleCountReqMultiError, or nil if none found.
func (m *GetCollectArticleCountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectArticleCountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCollectArticleCountReqMultiError(errors)
	}

	return nil
}

// GetCollectArticleCountReqMultiError is an error wrapping multiple validation
// errors returned by GetCollectArticleCountReq.ValidateAll() if the
// designated constraints aren't met.
type GetCollectArticleCountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectArticleCountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectArticleCountReqMultiError) AllErrors() []error { return m }

// GetCollectArticleCountReqValidationError is the validation error returned by
// GetCollectArticleCountReq.Validate if the designated constraints aren't met.
type GetCollectArticleCountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectArticleCountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectArticleCountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectArticleCountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectArticleCountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectArticleCountReqValidationError) ErrorName() string {
	return "GetCollectArticleCountReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectArticleCountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectArticleCountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectArticleCountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectArticleCountReqValidationError{}

// Validate checks the field values on GetCollectArticleCountReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectArticleCountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectArticleCountReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectArticleCountReplyMultiError, or nil if none found.
func (m *GetCollectArticleCountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectArticleCountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return GetCollectArticleCountReplyMultiError(errors)
	}

	return nil
}

// GetCollectArticleCountReplyMultiError is an error wrapping multiple
// validation errors returned by GetCollectArticleCountReply.ValidateAll() if
// the designated constraints aren't met.
type GetCollectArticleCountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectArticleCountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectArticleCountReplyMultiError) AllErrors() []error { return m }

// GetCollectArticleCountReplyValidationError is the validation error returned
// by GetCollectArticleCountReply.Validate if the designated constraints
// aren't met.
type GetCollectArticleCountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectArticleCountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectArticleCountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectArticleCountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectArticleCountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectArticleCountReplyValidationError) ErrorName() string {
	return "GetCollectArticleCountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectArticleCountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectArticleCountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectArticleCountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectArticleCountReplyValidationError{}

// Validate checks the field values on GetCollectTalkReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCollectTalkReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectTalkReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectTalkReqMultiError, or nil if none found.
func (m *GetCollectTalkReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectTalkReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Page

	if len(errors) > 0 {
		return GetCollectTalkReqMultiError(errors)
	}

	return nil
}

// GetCollectTalkReqMultiError is an error wrapping multiple validation errors
// returned by GetCollectTalkReq.ValidateAll() if the designated constraints
// aren't met.
type GetCollectTalkReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectTalkReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectTalkReqMultiError) AllErrors() []error { return m }

// GetCollectTalkReqValidationError is the validation error returned by
// GetCollectTalkReq.Validate if the designated constraints aren't met.
type GetCollectTalkReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectTalkReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectTalkReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectTalkReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectTalkReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectTalkReqValidationError) ErrorName() string {
	return "GetCollectTalkReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectTalkReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectTalkReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectTalkReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectTalkReqValidationError{}

// Validate checks the field values on GetCollectTalkCountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectTalkCountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectTalkCountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectTalkCountReqMultiError, or nil if none found.
func (m *GetCollectTalkCountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectTalkCountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCollectTalkCountReqMultiError(errors)
	}

	return nil
}

// GetCollectTalkCountReqMultiError is an error wrapping multiple validation
// errors returned by GetCollectTalkCountReq.ValidateAll() if the designated
// constraints aren't met.
type GetCollectTalkCountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectTalkCountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectTalkCountReqMultiError) AllErrors() []error { return m }

// GetCollectTalkCountReqValidationError is the validation error returned by
// GetCollectTalkCountReq.Validate if the designated constraints aren't met.
type GetCollectTalkCountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectTalkCountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectTalkCountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectTalkCountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectTalkCountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectTalkCountReqValidationError) ErrorName() string {
	return "GetCollectTalkCountReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectTalkCountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectTalkCountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectTalkCountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectTalkCountReqValidationError{}

// Validate checks the field values on GetCollectTalkCountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectTalkCountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectTalkCountReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectTalkCountReplyMultiError, or nil if none found.
func (m *GetCollectTalkCountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectTalkCountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return GetCollectTalkCountReplyMultiError(errors)
	}

	return nil
}

// GetCollectTalkCountReplyMultiError is an error wrapping multiple validation
// errors returned by GetCollectTalkCountReply.ValidateAll() if the designated
// constraints aren't met.
type GetCollectTalkCountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectTalkCountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectTalkCountReplyMultiError) AllErrors() []error { return m }

// GetCollectTalkCountReplyValidationError is the validation error returned by
// GetCollectTalkCountReply.Validate if the designated constraints aren't met.
type GetCollectTalkCountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectTalkCountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectTalkCountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectTalkCountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectTalkCountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectTalkCountReplyValidationError) ErrorName() string {
	return "GetCollectTalkCountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectTalkCountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectTalkCountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectTalkCountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectTalkCountReplyValidationError{}

// Validate checks the field values on GetCollectColumnReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectColumnReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectColumnReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectColumnReqMultiError, or nil if none found.
func (m *GetCollectColumnReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectColumnReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Page

	if len(errors) > 0 {
		return GetCollectColumnReqMultiError(errors)
	}

	return nil
}

// GetCollectColumnReqMultiError is an error wrapping multiple validation
// errors returned by GetCollectColumnReq.ValidateAll() if the designated
// constraints aren't met.
type GetCollectColumnReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectColumnReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectColumnReqMultiError) AllErrors() []error { return m }

// GetCollectColumnReqValidationError is the validation error returned by
// GetCollectColumnReq.Validate if the designated constraints aren't met.
type GetCollectColumnReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectColumnReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectColumnReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectColumnReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectColumnReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectColumnReqValidationError) ErrorName() string {
	return "GetCollectColumnReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectColumnReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectColumnReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectColumnReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectColumnReqValidationError{}

// Validate checks the field values on GetCollectColumnCountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectColumnCountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectColumnCountReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectColumnCountReqMultiError, or nil if none found.
func (m *GetCollectColumnCountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectColumnCountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCollectColumnCountReqMultiError(errors)
	}

	return nil
}

// GetCollectColumnCountReqMultiError is an error wrapping multiple validation
// errors returned by GetCollectColumnCountReq.ValidateAll() if the designated
// constraints aren't met.
type GetCollectColumnCountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectColumnCountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectColumnCountReqMultiError) AllErrors() []error { return m }

// GetCollectColumnCountReqValidationError is the validation error returned by
// GetCollectColumnCountReq.Validate if the designated constraints aren't met.
type GetCollectColumnCountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectColumnCountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectColumnCountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectColumnCountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectColumnCountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectColumnCountReqValidationError) ErrorName() string {
	return "GetCollectColumnCountReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectColumnCountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectColumnCountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectColumnCountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectColumnCountReqValidationError{}

// Validate checks the field values on GetCollectColumnCountReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectColumnCountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectColumnCountReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectColumnCountReplyMultiError, or nil if none found.
func (m *GetCollectColumnCountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectColumnCountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return GetCollectColumnCountReplyMultiError(errors)
	}

	return nil
}

// GetCollectColumnCountReplyMultiError is an error wrapping multiple
// validation errors returned by GetCollectColumnCountReply.ValidateAll() if
// the designated constraints aren't met.
type GetCollectColumnCountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectColumnCountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectColumnCountReplyMultiError) AllErrors() []error { return m }

// GetCollectColumnCountReplyValidationError is the validation error returned
// by GetCollectColumnCountReply.Validate if the designated constraints aren't met.
type GetCollectColumnCountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectColumnCountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectColumnCountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectColumnCountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectColumnCountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectColumnCountReplyValidationError) ErrorName() string {
	return "GetCollectColumnCountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectColumnCountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectColumnCountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectColumnCountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectColumnCountReplyValidationError{}

// Validate checks the field values on GetCollectionReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectionReqMultiError, or nil if none found.
func (m *GetCollectionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetCollectionReqMultiError(errors)
	}

	return nil
}

// GetCollectionReqMultiError is an error wrapping multiple validation errors
// returned by GetCollectionReq.ValidateAll() if the designated constraints
// aren't met.
type GetCollectionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionReqMultiError) AllErrors() []error { return m }

// GetCollectionReqValidationError is the validation error returned by
// GetCollectionReq.Validate if the designated constraints aren't met.
type GetCollectionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionReqValidationError) ErrorName() string { return "GetCollectionReqValidationError" }

// Error satisfies the builtin error interface
func (e GetCollectionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionReqValidationError{}

// Validate checks the field values on GetCollectionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectionReplyMultiError, or nil if none found.
func (m *GetCollectionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Name

	// no validation rules for Introduce

	// no validation rules for Auth

	if len(errors) > 0 {
		return GetCollectionReplyMultiError(errors)
	}

	return nil
}

// GetCollectionReplyMultiError is an error wrapping multiple validation errors
// returned by GetCollectionReply.ValidateAll() if the designated constraints
// aren't met.
type GetCollectionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionReplyMultiError) AllErrors() []error { return m }

// GetCollectionReplyValidationError is the validation error returned by
// GetCollectionReply.Validate if the designated constraints aren't met.
type GetCollectionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionReplyValidationError) ErrorName() string {
	return "GetCollectionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionReplyValidationError{}

// Validate checks the field values on GetArticleListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleListReqMultiError, or nil if none found.
func (m *GetArticleListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if len(errors) > 0 {
		return GetArticleListReqMultiError(errors)
	}

	return nil
}

// GetArticleListReqMultiError is an error wrapping multiple validation errors
// returned by GetArticleListReq.ValidateAll() if the designated constraints
// aren't met.
type GetArticleListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListReqMultiError) AllErrors() []error { return m }

// GetArticleListReqValidationError is the validation error returned by
// GetArticleListReq.Validate if the designated constraints aren't met.
type GetArticleListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListReqValidationError) ErrorName() string {
	return "GetArticleListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListReqValidationError{}

// Validate checks the field values on GetArticleListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleListReplyMultiError, or nil if none found.
func (m *GetArticleListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetArticle() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetArticleListReplyValidationError{
						field:  fmt.Sprintf("Article[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetArticleListReplyValidationError{
						field:  fmt.Sprintf("Article[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetArticleListReplyValidationError{
					field:  fmt.Sprintf("Article[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetArticleListReplyMultiError(errors)
	}

	return nil
}

// GetArticleListReplyMultiError is an error wrapping multiple validation
// errors returned by GetArticleListReply.ValidateAll() if the designated
// constraints aren't met.
type GetArticleListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListReplyMultiError) AllErrors() []error { return m }

// GetArticleListReplyValidationError is the validation error returned by
// GetArticleListReply.Validate if the designated constraints aren't met.
type GetArticleListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListReplyValidationError) ErrorName() string {
	return "GetArticleListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListReplyValidationError{}

// Validate checks the field values on GetArticleCountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleCountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleCountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleCountReplyMultiError, or nil if none found.
func (m *GetArticleCountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleCountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return GetArticleCountReplyMultiError(errors)
	}

	return nil
}

// GetArticleCountReplyMultiError is an error wrapping multiple validation
// errors returned by GetArticleCountReply.ValidateAll() if the designated
// constraints aren't met.
type GetArticleCountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleCountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleCountReplyMultiError) AllErrors() []error { return m }

// GetArticleCountReplyValidationError is the validation error returned by
// GetArticleCountReply.Validate if the designated constraints aren't met.
type GetArticleCountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleCountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleCountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleCountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleCountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleCountReplyValidationError) ErrorName() string {
	return "GetArticleCountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleCountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleCountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleCountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleCountReplyValidationError{}

// Validate checks the field values on GetArticleCountVisitorReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleCountVisitorReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleCountVisitorReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleCountVisitorReqMultiError, or nil if none found.
func (m *GetArticleCountVisitorReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleCountVisitorReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetArticleCountVisitorReqMultiError(errors)
	}

	return nil
}

// GetArticleCountVisitorReqMultiError is an error wrapping multiple validation
// errors returned by GetArticleCountVisitorReq.ValidateAll() if the
// designated constraints aren't met.
type GetArticleCountVisitorReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleCountVisitorReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleCountVisitorReqMultiError) AllErrors() []error { return m }

// GetArticleCountVisitorReqValidationError is the validation error returned by
// GetArticleCountVisitorReq.Validate if the designated constraints aren't met.
type GetArticleCountVisitorReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleCountVisitorReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleCountVisitorReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleCountVisitorReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleCountVisitorReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleCountVisitorReqValidationError) ErrorName() string {
	return "GetArticleCountVisitorReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleCountVisitorReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleCountVisitorReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleCountVisitorReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleCountVisitorReqValidationError{}

// Validate checks the field values on GetArticleListHotReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListHotReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListHotReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleListHotReqMultiError, or nil if none found.
func (m *GetArticleListHotReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListHotReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if len(errors) > 0 {
		return GetArticleListHotReqMultiError(errors)
	}

	return nil
}

// GetArticleListHotReqMultiError is an error wrapping multiple validation
// errors returned by GetArticleListHotReq.ValidateAll() if the designated
// constraints aren't met.
type GetArticleListHotReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListHotReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListHotReqMultiError) AllErrors() []error { return m }

// GetArticleListHotReqValidationError is the validation error returned by
// GetArticleListHotReq.Validate if the designated constraints aren't met.
type GetArticleListHotReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListHotReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListHotReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListHotReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListHotReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListHotReqValidationError) ErrorName() string {
	return "GetArticleListHotReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListHotReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListHotReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListHotReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListHotReqValidationError{}

// Validate checks the field values on GetArticleListHotReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListHotReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListHotReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleListHotReplyMultiError, or nil if none found.
func (m *GetArticleListHotReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListHotReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetArticle() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetArticleListHotReplyValidationError{
						field:  fmt.Sprintf("Article[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetArticleListHotReplyValidationError{
						field:  fmt.Sprintf("Article[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetArticleListHotReplyValidationError{
					field:  fmt.Sprintf("Article[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetArticleListHotReplyMultiError(errors)
	}

	return nil
}

// GetArticleListHotReplyMultiError is an error wrapping multiple validation
// errors returned by GetArticleListHotReply.ValidateAll() if the designated
// constraints aren't met.
type GetArticleListHotReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListHotReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListHotReplyMultiError) AllErrors() []error { return m }

// GetArticleListHotReplyValidationError is the validation error returned by
// GetArticleListHotReply.Validate if the designated constraints aren't met.
type GetArticleListHotReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListHotReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListHotReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListHotReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListHotReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListHotReplyValidationError) ErrorName() string {
	return "GetArticleListHotReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListHotReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListHotReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListHotReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListHotReplyValidationError{}

// Validate checks the field values on GetUserArticleListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserArticleListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserArticleListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserArticleListReqMultiError, or nil if none found.
func (m *GetUserArticleListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserArticleListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if len(errors) > 0 {
		return GetUserArticleListReqMultiError(errors)
	}

	return nil
}

// GetUserArticleListReqMultiError is an error wrapping multiple validation
// errors returned by GetUserArticleListReq.ValidateAll() if the designated
// constraints aren't met.
type GetUserArticleListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserArticleListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserArticleListReqMultiError) AllErrors() []error { return m }

// GetUserArticleListReqValidationError is the validation error returned by
// GetUserArticleListReq.Validate if the designated constraints aren't met.
type GetUserArticleListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserArticleListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserArticleListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserArticleListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserArticleListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserArticleListReqValidationError) ErrorName() string {
	return "GetUserArticleListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserArticleListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserArticleListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserArticleListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserArticleListReqValidationError{}

// Validate checks the field values on GetUserArticleListVisitorReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserArticleListVisitorReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserArticleListVisitorReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserArticleListVisitorReqMultiError, or nil if none found.
func (m *GetUserArticleListVisitorReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserArticleListVisitorReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetUserArticleListVisitorReqMultiError(errors)
	}

	return nil
}

// GetUserArticleListVisitorReqMultiError is an error wrapping multiple
// validation errors returned by GetUserArticleListVisitorReq.ValidateAll() if
// the designated constraints aren't met.
type GetUserArticleListVisitorReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserArticleListVisitorReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserArticleListVisitorReqMultiError) AllErrors() []error { return m }

// GetUserArticleListVisitorReqValidationError is the validation error returned
// by GetUserArticleListVisitorReq.Validate if the designated constraints
// aren't met.
type GetUserArticleListVisitorReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserArticleListVisitorReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserArticleListVisitorReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserArticleListVisitorReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserArticleListVisitorReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserArticleListVisitorReqValidationError) ErrorName() string {
	return "GetUserArticleListVisitorReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserArticleListVisitorReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserArticleListVisitorReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserArticleListVisitorReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserArticleListVisitorReqValidationError{}

// Validate checks the field values on GetArticleStatisticReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleStatisticReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleStatisticReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleStatisticReqMultiError, or nil if none found.
func (m *GetArticleStatisticReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleStatisticReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetArticleStatisticReqMultiError(errors)
	}

	return nil
}

// GetArticleStatisticReqMultiError is an error wrapping multiple validation
// errors returned by GetArticleStatisticReq.ValidateAll() if the designated
// constraints aren't met.
type GetArticleStatisticReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleStatisticReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleStatisticReqMultiError) AllErrors() []error { return m }

// GetArticleStatisticReqValidationError is the validation error returned by
// GetArticleStatisticReq.Validate if the designated constraints aren't met.
type GetArticleStatisticReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleStatisticReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleStatisticReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleStatisticReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleStatisticReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleStatisticReqValidationError) ErrorName() string {
	return "GetArticleStatisticReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleStatisticReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleStatisticReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleStatisticReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleStatisticReqValidationError{}

// Validate checks the field values on GetArticleStatisticReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleStatisticReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleStatisticReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleStatisticReplyMultiError, or nil if none found.
func (m *GetArticleStatisticReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleStatisticReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Agree

	// no validation rules for Collect

	// no validation rules for View

	// no validation rules for Comment

	if len(errors) > 0 {
		return GetArticleStatisticReplyMultiError(errors)
	}

	return nil
}

// GetArticleStatisticReplyMultiError is an error wrapping multiple validation
// errors returned by GetArticleStatisticReply.ValidateAll() if the designated
// constraints aren't met.
type GetArticleStatisticReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleStatisticReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleStatisticReplyMultiError) AllErrors() []error { return m }

// GetArticleStatisticReplyValidationError is the validation error returned by
// GetArticleStatisticReply.Validate if the designated constraints aren't met.
type GetArticleStatisticReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleStatisticReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleStatisticReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleStatisticReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleStatisticReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleStatisticReplyValidationError) ErrorName() string {
	return "GetArticleStatisticReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleStatisticReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleStatisticReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleStatisticReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleStatisticReplyValidationError{}

// Validate checks the field values on GetArticleListStatisticReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListStatisticReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListStatisticReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleListStatisticReqMultiError, or nil if none found.
func (m *GetArticleListStatisticReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListStatisticReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetArticleListStatisticReqMultiError(errors)
	}

	return nil
}

// GetArticleListStatisticReqMultiError is an error wrapping multiple
// validation errors returned by GetArticleListStatisticReq.ValidateAll() if
// the designated constraints aren't met.
type GetArticleListStatisticReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListStatisticReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListStatisticReqMultiError) AllErrors() []error { return m }

// GetArticleListStatisticReqValidationError is the validation error returned
// by GetArticleListStatisticReq.Validate if the designated constraints aren't met.
type GetArticleListStatisticReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListStatisticReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListStatisticReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListStatisticReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListStatisticReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListStatisticReqValidationError) ErrorName() string {
	return "GetArticleListStatisticReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListStatisticReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListStatisticReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListStatisticReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListStatisticReqValidationError{}

// Validate checks the field values on GetArticleListStatisticReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListStatisticReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListStatisticReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleListStatisticReplyMultiError, or nil if none found.
func (m *GetArticleListStatisticReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListStatisticReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCount() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetArticleListStatisticReplyValidationError{
						field:  fmt.Sprintf("Count[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetArticleListStatisticReplyValidationError{
						field:  fmt.Sprintf("Count[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetArticleListStatisticReplyValidationError{
					field:  fmt.Sprintf("Count[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetArticleListStatisticReplyMultiError(errors)
	}

	return nil
}

// GetArticleListStatisticReplyMultiError is an error wrapping multiple
// validation errors returned by GetArticleListStatisticReply.ValidateAll() if
// the designated constraints aren't met.
type GetArticleListStatisticReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListStatisticReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListStatisticReplyMultiError) AllErrors() []error { return m }

// GetArticleListStatisticReplyValidationError is the validation error returned
// by GetArticleListStatisticReply.Validate if the designated constraints
// aren't met.
type GetArticleListStatisticReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListStatisticReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListStatisticReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListStatisticReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListStatisticReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListStatisticReplyValidationError) ErrorName() string {
	return "GetArticleListStatisticReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListStatisticReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListStatisticReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListStatisticReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListStatisticReplyValidationError{}

// Validate checks the field values on GetLastArticleDraftReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLastArticleDraftReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLastArticleDraftReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLastArticleDraftReplyMultiError, or nil if none found.
func (m *GetLastArticleDraftReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLastArticleDraftReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	if len(errors) > 0 {
		return GetLastArticleDraftReplyMultiError(errors)
	}

	return nil
}

// GetLastArticleDraftReplyMultiError is an error wrapping multiple validation
// errors returned by GetLastArticleDraftReply.ValidateAll() if the designated
// constraints aren't met.
type GetLastArticleDraftReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLastArticleDraftReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLastArticleDraftReplyMultiError) AllErrors() []error { return m }

// GetLastArticleDraftReplyValidationError is the validation error returned by
// GetLastArticleDraftReply.Validate if the designated constraints aren't met.
type GetLastArticleDraftReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLastArticleDraftReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLastArticleDraftReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLastArticleDraftReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLastArticleDraftReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLastArticleDraftReplyValidationError) ErrorName() string {
	return "GetLastArticleDraftReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetLastArticleDraftReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLastArticleDraftReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLastArticleDraftReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLastArticleDraftReplyValidationError{}

// Validate checks the field values on CreateArticleDraftReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateArticleDraftReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateArticleDraftReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateArticleDraftReplyMultiError, or nil if none found.
func (m *CreateArticleDraftReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateArticleDraftReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateArticleDraftReplyMultiError(errors)
	}

	return nil
}

// CreateArticleDraftReplyMultiError is an error wrapping multiple validation
// errors returned by CreateArticleDraftReply.ValidateAll() if the designated
// constraints aren't met.
type CreateArticleDraftReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateArticleDraftReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateArticleDraftReplyMultiError) AllErrors() []error { return m }

// CreateArticleDraftReplyValidationError is the validation error returned by
// CreateArticleDraftReply.Validate if the designated constraints aren't met.
type CreateArticleDraftReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateArticleDraftReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateArticleDraftReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateArticleDraftReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateArticleDraftReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateArticleDraftReplyValidationError) ErrorName() string {
	return "CreateArticleDraftReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateArticleDraftReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateArticleDraftReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateArticleDraftReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateArticleDraftReplyValidationError{}

// Validate checks the field values on GetCollectionsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectionsReqMultiError, or nil if none found.
func (m *GetCollectionsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if len(errors) > 0 {
		return GetCollectionsReqMultiError(errors)
	}

	return nil
}

// GetCollectionsReqMultiError is an error wrapping multiple validation errors
// returned by GetCollectionsReq.ValidateAll() if the designated constraints
// aren't met.
type GetCollectionsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionsReqMultiError) AllErrors() []error { return m }

// GetCollectionsReqValidationError is the validation error returned by
// GetCollectionsReq.Validate if the designated constraints aren't met.
type GetCollectionsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionsReqValidationError) ErrorName() string {
	return "GetCollectionsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionsReqValidationError{}

// Validate checks the field values on GetCollectionsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectionsReplyMultiError, or nil if none found.
func (m *GetCollectionsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCollections() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCollectionsReplyValidationError{
						field:  fmt.Sprintf("Collections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCollectionsReplyValidationError{
						field:  fmt.Sprintf("Collections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCollectionsReplyValidationError{
					field:  fmt.Sprintf("Collections[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCollectionsReplyMultiError(errors)
	}

	return nil
}

// GetCollectionsReplyMultiError is an error wrapping multiple validation
// errors returned by GetCollectionsReply.ValidateAll() if the designated
// constraints aren't met.
type GetCollectionsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionsReplyMultiError) AllErrors() []error { return m }

// GetCollectionsReplyValidationError is the validation error returned by
// GetCollectionsReply.Validate if the designated constraints aren't met.
type GetCollectionsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionsReplyValidationError) ErrorName() string {
	return "GetCollectionsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionsReplyValidationError{}

// Validate checks the field values on GetCollectionsVisitorCountReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionsVisitorCountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionsVisitorCountReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCollectionsVisitorCountReqMultiError, or nil if none found.
func (m *GetCollectionsVisitorCountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionsVisitorCountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetCollectionsVisitorCountReqMultiError(errors)
	}

	return nil
}

// GetCollectionsVisitorCountReqMultiError is an error wrapping multiple
// validation errors returned by GetCollectionsVisitorCountReq.ValidateAll()
// if the designated constraints aren't met.
type GetCollectionsVisitorCountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionsVisitorCountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionsVisitorCountReqMultiError) AllErrors() []error { return m }

// GetCollectionsVisitorCountReqValidationError is the validation error
// returned by GetCollectionsVisitorCountReq.Validate if the designated
// constraints aren't met.
type GetCollectionsVisitorCountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionsVisitorCountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionsVisitorCountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionsVisitorCountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionsVisitorCountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionsVisitorCountReqValidationError) ErrorName() string {
	return "GetCollectionsVisitorCountReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionsVisitorCountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionsVisitorCountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionsVisitorCountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionsVisitorCountReqValidationError{}

// Validate checks the field values on GetCollectionsCountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionsCountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionsCountReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectionsCountReplyMultiError, or nil if none found.
func (m *GetCollectionsCountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionsCountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return GetCollectionsCountReplyMultiError(errors)
	}

	return nil
}

// GetCollectionsCountReplyMultiError is an error wrapping multiple validation
// errors returned by GetCollectionsCountReply.ValidateAll() if the designated
// constraints aren't met.
type GetCollectionsCountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionsCountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionsCountReplyMultiError) AllErrors() []error { return m }

// GetCollectionsCountReplyValidationError is the validation error returned by
// GetCollectionsCountReply.Validate if the designated constraints aren't met.
type GetCollectionsCountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionsCountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionsCountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionsCountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionsCountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionsCountReplyValidationError) ErrorName() string {
	return "GetCollectionsCountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionsCountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionsCountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionsCountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionsCountReplyValidationError{}

// Validate checks the field values on GetCollectionsByVisitorReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionsByVisitorReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionsByVisitorReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectionsByVisitorReqMultiError, or nil if none found.
func (m *GetCollectionsByVisitorReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionsByVisitorReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Page

	if len(errors) > 0 {
		return GetCollectionsByVisitorReqMultiError(errors)
	}

	return nil
}

// GetCollectionsByVisitorReqMultiError is an error wrapping multiple
// validation errors returned by GetCollectionsByVisitorReq.ValidateAll() if
// the designated constraints aren't met.
type GetCollectionsByVisitorReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionsByVisitorReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionsByVisitorReqMultiError) AllErrors() []error { return m }

// GetCollectionsByVisitorReqValidationError is the validation error returned
// by GetCollectionsByVisitorReq.Validate if the designated constraints aren't met.
type GetCollectionsByVisitorReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionsByVisitorReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionsByVisitorReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionsByVisitorReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionsByVisitorReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionsByVisitorReqValidationError) ErrorName() string {
	return "GetCollectionsByVisitorReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionsByVisitorReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionsByVisitorReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionsByVisitorReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionsByVisitorReqValidationError{}

// Validate checks the field values on CreateCollectionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCollectionsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCollectionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCollectionsReqMultiError, or nil if none found.
func (m *CreateCollectionsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCollectionsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Introduce

	// no validation rules for Auth

	if len(errors) > 0 {
		return CreateCollectionsReqMultiError(errors)
	}

	return nil
}

// CreateCollectionsReqMultiError is an error wrapping multiple validation
// errors returned by CreateCollectionsReq.ValidateAll() if the designated
// constraints aren't met.
type CreateCollectionsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCollectionsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCollectionsReqMultiError) AllErrors() []error { return m }

// CreateCollectionsReqValidationError is the validation error returned by
// CreateCollectionsReq.Validate if the designated constraints aren't met.
type CreateCollectionsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCollectionsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCollectionsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCollectionsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCollectionsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCollectionsReqValidationError) ErrorName() string {
	return "CreateCollectionsReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCollectionsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCollectionsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCollectionsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCollectionsReqValidationError{}

// Validate checks the field values on EditCollectionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditCollectionsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditCollectionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditCollectionsReqMultiError, or nil if none found.
func (m *EditCollectionsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EditCollectionsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Introduce

	// no validation rules for Auth

	if len(errors) > 0 {
		return EditCollectionsReqMultiError(errors)
	}

	return nil
}

// EditCollectionsReqMultiError is an error wrapping multiple validation errors
// returned by EditCollectionsReq.ValidateAll() if the designated constraints
// aren't met.
type EditCollectionsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditCollectionsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditCollectionsReqMultiError) AllErrors() []error { return m }

// EditCollectionsReqValidationError is the validation error returned by
// EditCollectionsReq.Validate if the designated constraints aren't met.
type EditCollectionsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditCollectionsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditCollectionsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditCollectionsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditCollectionsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditCollectionsReqValidationError) ErrorName() string {
	return "EditCollectionsReqValidationError"
}

// Error satisfies the builtin error interface
func (e EditCollectionsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditCollectionsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditCollectionsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditCollectionsReqValidationError{}

// Validate checks the field values on DeleteCollectionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCollectionsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCollectionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCollectionsReqMultiError, or nil if none found.
func (m *DeleteCollectionsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCollectionsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCollectionsReqMultiError(errors)
	}

	return nil
}

// DeleteCollectionsReqMultiError is an error wrapping multiple validation
// errors returned by DeleteCollectionsReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteCollectionsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCollectionsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCollectionsReqMultiError) AllErrors() []error { return m }

// DeleteCollectionsReqValidationError is the validation error returned by
// DeleteCollectionsReq.Validate if the designated constraints aren't met.
type DeleteCollectionsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCollectionsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCollectionsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCollectionsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCollectionsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCollectionsReqValidationError) ErrorName() string {
	return "DeleteCollectionsReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCollectionsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCollectionsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCollectionsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCollectionsReqValidationError{}

// Validate checks the field values on ArticleDraftMarkReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleDraftMarkReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleDraftMarkReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleDraftMarkReqMultiError, or nil if none found.
func (m *ArticleDraftMarkReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleDraftMarkReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ArticleDraftMarkReqMultiError(errors)
	}

	return nil
}

// ArticleDraftMarkReqMultiError is an error wrapping multiple validation
// errors returned by ArticleDraftMarkReq.ValidateAll() if the designated
// constraints aren't met.
type ArticleDraftMarkReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleDraftMarkReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleDraftMarkReqMultiError) AllErrors() []error { return m }

// ArticleDraftMarkReqValidationError is the validation error returned by
// ArticleDraftMarkReq.Validate if the designated constraints aren't met.
type ArticleDraftMarkReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleDraftMarkReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleDraftMarkReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleDraftMarkReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleDraftMarkReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleDraftMarkReqValidationError) ErrorName() string {
	return "ArticleDraftMarkReqValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleDraftMarkReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleDraftMarkReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleDraftMarkReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleDraftMarkReqValidationError{}

// Validate checks the field values on GetArticleDraftListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleDraftListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleDraftListReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleDraftListReplyMultiError, or nil if none found.
func (m *GetArticleDraftListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleDraftListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDraft() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetArticleDraftListReplyValidationError{
						field:  fmt.Sprintf("Draft[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetArticleDraftListReplyValidationError{
						field:  fmt.Sprintf("Draft[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetArticleDraftListReplyValidationError{
					field:  fmt.Sprintf("Draft[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetArticleDraftListReplyMultiError(errors)
	}

	return nil
}

// GetArticleDraftListReplyMultiError is an error wrapping multiple validation
// errors returned by GetArticleDraftListReply.ValidateAll() if the designated
// constraints aren't met.
type GetArticleDraftListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleDraftListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleDraftListReplyMultiError) AllErrors() []error { return m }

// GetArticleDraftListReplyValidationError is the validation error returned by
// GetArticleDraftListReply.Validate if the designated constraints aren't met.
type GetArticleDraftListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleDraftListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleDraftListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleDraftListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleDraftListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleDraftListReplyValidationError) ErrorName() string {
	return "GetArticleDraftListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleDraftListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleDraftListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleDraftListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleDraftListReplyValidationError{}

// Validate checks the field values on SendArticleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendArticleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendArticleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendArticleReqMultiError,
// or nil if none found.
func (m *SendArticleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendArticleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SendArticleReqMultiError(errors)
	}

	return nil
}

// SendArticleReqMultiError is an error wrapping multiple validation errors
// returned by SendArticleReq.ValidateAll() if the designated constraints
// aren't met.
type SendArticleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendArticleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendArticleReqMultiError) AllErrors() []error { return m }

// SendArticleReqValidationError is the validation error returned by
// SendArticleReq.Validate if the designated constraints aren't met.
type SendArticleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendArticleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendArticleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendArticleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendArticleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendArticleReqValidationError) ErrorName() string { return "SendArticleReqValidationError" }

// Error satisfies the builtin error interface
func (e SendArticleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendArticleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendArticleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendArticleReqValidationError{}

// Validate checks the field values on SendArticleEditReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendArticleEditReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendArticleEditReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendArticleEditReqMultiError, or nil if none found.
func (m *SendArticleEditReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendArticleEditReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SendArticleEditReqMultiError(errors)
	}

	return nil
}

// SendArticleEditReqMultiError is an error wrapping multiple validation errors
// returned by SendArticleEditReq.ValidateAll() if the designated constraints
// aren't met.
type SendArticleEditReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendArticleEditReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendArticleEditReqMultiError) AllErrors() []error { return m }

// SendArticleEditReqValidationError is the validation error returned by
// SendArticleEditReq.Validate if the designated constraints aren't met.
type SendArticleEditReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendArticleEditReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendArticleEditReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendArticleEditReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendArticleEditReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendArticleEditReqValidationError) ErrorName() string {
	return "SendArticleEditReqValidationError"
}

// Error satisfies the builtin error interface
func (e SendArticleEditReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendArticleEditReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendArticleEditReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendArticleEditReqValidationError{}

// Validate checks the field values on DeleteArticleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteArticleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteArticleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteArticleReqMultiError, or nil if none found.
func (m *DeleteArticleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteArticleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteArticleReqMultiError(errors)
	}

	return nil
}

// DeleteArticleReqMultiError is an error wrapping multiple validation errors
// returned by DeleteArticleReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteArticleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteArticleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteArticleReqMultiError) AllErrors() []error { return m }

// DeleteArticleReqValidationError is the validation error returned by
// DeleteArticleReq.Validate if the designated constraints aren't met.
type DeleteArticleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteArticleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteArticleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteArticleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteArticleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteArticleReqValidationError) ErrorName() string { return "DeleteArticleReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteArticleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteArticleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteArticleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteArticleReqValidationError{}

// Validate checks the field values on SetArticleAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetArticleAgreeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetArticleAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetArticleAgreeReqMultiError, or nil if none found.
func (m *SetArticleAgreeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetArticleAgreeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return SetArticleAgreeReqMultiError(errors)
	}

	return nil
}

// SetArticleAgreeReqMultiError is an error wrapping multiple validation errors
// returned by SetArticleAgreeReq.ValidateAll() if the designated constraints
// aren't met.
type SetArticleAgreeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetArticleAgreeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetArticleAgreeReqMultiError) AllErrors() []error { return m }

// SetArticleAgreeReqValidationError is the validation error returned by
// SetArticleAgreeReq.Validate if the designated constraints aren't met.
type SetArticleAgreeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetArticleAgreeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetArticleAgreeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetArticleAgreeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetArticleAgreeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetArticleAgreeReqValidationError) ErrorName() string {
	return "SetArticleAgreeReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetArticleAgreeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetArticleAgreeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetArticleAgreeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetArticleAgreeReqValidationError{}

// Validate checks the field values on SetArticleViewReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetArticleViewReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetArticleViewReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetArticleViewReqMultiError, or nil if none found.
func (m *SetArticleViewReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetArticleViewReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return SetArticleViewReqMultiError(errors)
	}

	return nil
}

// SetArticleViewReqMultiError is an error wrapping multiple validation errors
// returned by SetArticleViewReq.ValidateAll() if the designated constraints
// aren't met.
type SetArticleViewReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetArticleViewReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetArticleViewReqMultiError) AllErrors() []error { return m }

// SetArticleViewReqValidationError is the validation error returned by
// SetArticleViewReq.Validate if the designated constraints aren't met.
type SetArticleViewReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetArticleViewReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetArticleViewReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetArticleViewReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetArticleViewReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetArticleViewReqValidationError) ErrorName() string {
	return "SetArticleViewReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetArticleViewReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetArticleViewReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetArticleViewReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetArticleViewReqValidationError{}

// Validate checks the field values on SetArticleCollectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetArticleCollectReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetArticleCollectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetArticleCollectReqMultiError, or nil if none found.
func (m *SetArticleCollectReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetArticleCollectReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CollectionsId

	// no validation rules for Uuid

	if len(errors) > 0 {
		return SetArticleCollectReqMultiError(errors)
	}

	return nil
}

// SetArticleCollectReqMultiError is an error wrapping multiple validation
// errors returned by SetArticleCollectReq.ValidateAll() if the designated
// constraints aren't met.
type SetArticleCollectReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetArticleCollectReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetArticleCollectReqMultiError) AllErrors() []error { return m }

// SetArticleCollectReqValidationError is the validation error returned by
// SetArticleCollectReq.Validate if the designated constraints aren't met.
type SetArticleCollectReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetArticleCollectReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetArticleCollectReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetArticleCollectReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetArticleCollectReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetArticleCollectReqValidationError) ErrorName() string {
	return "SetArticleCollectReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetArticleCollectReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetArticleCollectReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetArticleCollectReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetArticleCollectReqValidationError{}

// Validate checks the field values on CancelArticleAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelArticleAgreeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelArticleAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelArticleAgreeReqMultiError, or nil if none found.
func (m *CancelArticleAgreeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelArticleAgreeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return CancelArticleAgreeReqMultiError(errors)
	}

	return nil
}

// CancelArticleAgreeReqMultiError is an error wrapping multiple validation
// errors returned by CancelArticleAgreeReq.ValidateAll() if the designated
// constraints aren't met.
type CancelArticleAgreeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelArticleAgreeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelArticleAgreeReqMultiError) AllErrors() []error { return m }

// CancelArticleAgreeReqValidationError is the validation error returned by
// CancelArticleAgreeReq.Validate if the designated constraints aren't met.
type CancelArticleAgreeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelArticleAgreeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelArticleAgreeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelArticleAgreeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelArticleAgreeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelArticleAgreeReqValidationError) ErrorName() string {
	return "CancelArticleAgreeReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelArticleAgreeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelArticleAgreeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelArticleAgreeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelArticleAgreeReqValidationError{}

// Validate checks the field values on CancelArticleCollectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelArticleCollectReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelArticleCollectReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelArticleCollectReqMultiError, or nil if none found.
func (m *CancelArticleCollectReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelArticleCollectReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return CancelArticleCollectReqMultiError(errors)
	}

	return nil
}

// CancelArticleCollectReqMultiError is an error wrapping multiple validation
// errors returned by CancelArticleCollectReq.ValidateAll() if the designated
// constraints aren't met.
type CancelArticleCollectReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelArticleCollectReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelArticleCollectReqMultiError) AllErrors() []error { return m }

// CancelArticleCollectReqValidationError is the validation error returned by
// CancelArticleCollectReq.Validate if the designated constraints aren't met.
type CancelArticleCollectReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelArticleCollectReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelArticleCollectReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelArticleCollectReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelArticleCollectReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelArticleCollectReqValidationError) ErrorName() string {
	return "CancelArticleCollectReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelArticleCollectReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelArticleCollectReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelArticleCollectReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelArticleCollectReqValidationError{}

// Validate checks the field values on ArticleStatisticJudgeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleStatisticJudgeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleStatisticJudgeReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleStatisticJudgeReqMultiError, or nil if none found.
func (m *ArticleStatisticJudgeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleStatisticJudgeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ArticleStatisticJudgeReqMultiError(errors)
	}

	return nil
}

// ArticleStatisticJudgeReqMultiError is an error wrapping multiple validation
// errors returned by ArticleStatisticJudgeReq.ValidateAll() if the designated
// constraints aren't met.
type ArticleStatisticJudgeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleStatisticJudgeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleStatisticJudgeReqMultiError) AllErrors() []error { return m }

// ArticleStatisticJudgeReqValidationError is the validation error returned by
// ArticleStatisticJudgeReq.Validate if the designated constraints aren't met.
type ArticleStatisticJudgeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleStatisticJudgeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleStatisticJudgeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleStatisticJudgeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleStatisticJudgeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleStatisticJudgeReqValidationError) ErrorName() string {
	return "ArticleStatisticJudgeReqValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleStatisticJudgeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleStatisticJudgeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleStatisticJudgeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleStatisticJudgeReqValidationError{}

// Validate checks the field values on ArticleStatisticJudgeReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleStatisticJudgeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleStatisticJudgeReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleStatisticJudgeReplyMultiError, or nil if none found.
func (m *ArticleStatisticJudgeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleStatisticJudgeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Agree

	// no validation rules for Collect

	if len(errors) > 0 {
		return ArticleStatisticJudgeReplyMultiError(errors)
	}

	return nil
}

// ArticleStatisticJudgeReplyMultiError is an error wrapping multiple
// validation errors returned by ArticleStatisticJudgeReply.ValidateAll() if
// the designated constraints aren't met.
type ArticleStatisticJudgeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleStatisticJudgeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleStatisticJudgeReplyMultiError) AllErrors() []error { return m }

// ArticleStatisticJudgeReplyValidationError is the validation error returned
// by ArticleStatisticJudgeReply.Validate if the designated constraints aren't met.
type ArticleStatisticJudgeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleStatisticJudgeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleStatisticJudgeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleStatisticJudgeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleStatisticJudgeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleStatisticJudgeReplyValidationError) ErrorName() string {
	return "ArticleStatisticJudgeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleStatisticJudgeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleStatisticJudgeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleStatisticJudgeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleStatisticJudgeReplyValidationError{}

// Validate checks the field values on GetTalkListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTalkListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTalkListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetTalkListReqMultiError,
// or nil if none found.
func (m *GetTalkListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTalkListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if len(errors) > 0 {
		return GetTalkListReqMultiError(errors)
	}

	return nil
}

// GetTalkListReqMultiError is an error wrapping multiple validation errors
// returned by GetTalkListReq.ValidateAll() if the designated constraints
// aren't met.
type GetTalkListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTalkListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTalkListReqMultiError) AllErrors() []error { return m }

// GetTalkListReqValidationError is the validation error returned by
// GetTalkListReq.Validate if the designated constraints aren't met.
type GetTalkListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTalkListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTalkListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTalkListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTalkListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTalkListReqValidationError) ErrorName() string { return "GetTalkListReqValidationError" }

// Error satisfies the builtin error interface
func (e GetTalkListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTalkListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTalkListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTalkListReqValidationError{}

// Validate checks the field values on GetTalkListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTalkListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTalkListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTalkListReplyMultiError, or nil if none found.
func (m *GetTalkListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTalkListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTalk() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTalkListReplyValidationError{
						field:  fmt.Sprintf("Talk[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTalkListReplyValidationError{
						field:  fmt.Sprintf("Talk[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTalkListReplyValidationError{
					field:  fmt.Sprintf("Talk[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTalkListReplyMultiError(errors)
	}

	return nil
}

// GetTalkListReplyMultiError is an error wrapping multiple validation errors
// returned by GetTalkListReply.ValidateAll() if the designated constraints
// aren't met.
type GetTalkListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTalkListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTalkListReplyMultiError) AllErrors() []error { return m }

// GetTalkListReplyValidationError is the validation error returned by
// GetTalkListReply.Validate if the designated constraints aren't met.
type GetTalkListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTalkListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTalkListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTalkListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTalkListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTalkListReplyValidationError) ErrorName() string { return "GetTalkListReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetTalkListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTalkListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTalkListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTalkListReplyValidationError{}

// Validate checks the field values on GetTalkCountReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTalkCountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTalkCountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTalkCountReplyMultiError, or nil if none found.
func (m *GetTalkCountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTalkCountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return GetTalkCountReplyMultiError(errors)
	}

	return nil
}

// GetTalkCountReplyMultiError is an error wrapping multiple validation errors
// returned by GetTalkCountReply.ValidateAll() if the designated constraints
// aren't met.
type GetTalkCountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTalkCountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTalkCountReplyMultiError) AllErrors() []error { return m }

// GetTalkCountReplyValidationError is the validation error returned by
// GetTalkCountReply.Validate if the designated constraints aren't met.
type GetTalkCountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTalkCountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTalkCountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTalkCountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTalkCountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTalkCountReplyValidationError) ErrorName() string {
	return "GetTalkCountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetTalkCountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTalkCountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTalkCountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTalkCountReplyValidationError{}

// Validate checks the field values on GetTalkCountVisitorReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTalkCountVisitorReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTalkCountVisitorReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTalkCountVisitorReqMultiError, or nil if none found.
func (m *GetTalkCountVisitorReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTalkCountVisitorReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetTalkCountVisitorReqMultiError(errors)
	}

	return nil
}

// GetTalkCountVisitorReqMultiError is an error wrapping multiple validation
// errors returned by GetTalkCountVisitorReq.ValidateAll() if the designated
// constraints aren't met.
type GetTalkCountVisitorReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTalkCountVisitorReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTalkCountVisitorReqMultiError) AllErrors() []error { return m }

// GetTalkCountVisitorReqValidationError is the validation error returned by
// GetTalkCountVisitorReq.Validate if the designated constraints aren't met.
type GetTalkCountVisitorReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTalkCountVisitorReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTalkCountVisitorReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTalkCountVisitorReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTalkCountVisitorReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTalkCountVisitorReqValidationError) ErrorName() string {
	return "GetTalkCountVisitorReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetTalkCountVisitorReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTalkCountVisitorReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTalkCountVisitorReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTalkCountVisitorReqValidationError{}

// Validate checks the field values on GetTalkListHotReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTalkListHotReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTalkListHotReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTalkListHotReqMultiError, or nil if none found.
func (m *GetTalkListHotReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTalkListHotReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if len(errors) > 0 {
		return GetTalkListHotReqMultiError(errors)
	}

	return nil
}

// GetTalkListHotReqMultiError is an error wrapping multiple validation errors
// returned by GetTalkListHotReq.ValidateAll() if the designated constraints
// aren't met.
type GetTalkListHotReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTalkListHotReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTalkListHotReqMultiError) AllErrors() []error { return m }

// GetTalkListHotReqValidationError is the validation error returned by
// GetTalkListHotReq.Validate if the designated constraints aren't met.
type GetTalkListHotReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTalkListHotReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTalkListHotReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTalkListHotReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTalkListHotReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTalkListHotReqValidationError) ErrorName() string {
	return "GetTalkListHotReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetTalkListHotReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTalkListHotReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTalkListHotReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTalkListHotReqValidationError{}

// Validate checks the field values on GetTalkListHotReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTalkListHotReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTalkListHotReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTalkListHotReplyMultiError, or nil if none found.
func (m *GetTalkListHotReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTalkListHotReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTalk() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTalkListHotReplyValidationError{
						field:  fmt.Sprintf("Talk[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTalkListHotReplyValidationError{
						field:  fmt.Sprintf("Talk[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTalkListHotReplyValidationError{
					field:  fmt.Sprintf("Talk[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTalkListHotReplyMultiError(errors)
	}

	return nil
}

// GetTalkListHotReplyMultiError is an error wrapping multiple validation
// errors returned by GetTalkListHotReply.ValidateAll() if the designated
// constraints aren't met.
type GetTalkListHotReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTalkListHotReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTalkListHotReplyMultiError) AllErrors() []error { return m }

// GetTalkListHotReplyValidationError is the validation error returned by
// GetTalkListHotReply.Validate if the designated constraints aren't met.
type GetTalkListHotReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTalkListHotReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTalkListHotReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTalkListHotReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTalkListHotReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTalkListHotReplyValidationError) ErrorName() string {
	return "GetTalkListHotReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetTalkListHotReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTalkListHotReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTalkListHotReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTalkListHotReplyValidationError{}

// Validate checks the field values on GetTalkListStatisticReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTalkListStatisticReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTalkListStatisticReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTalkListStatisticReqMultiError, or nil if none found.
func (m *GetTalkListStatisticReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTalkListStatisticReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetTalkListStatisticReqMultiError(errors)
	}

	return nil
}

// GetTalkListStatisticReqMultiError is an error wrapping multiple validation
// errors returned by GetTalkListStatisticReq.ValidateAll() if the designated
// constraints aren't met.
type GetTalkListStatisticReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTalkListStatisticReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTalkListStatisticReqMultiError) AllErrors() []error { return m }

// GetTalkListStatisticReqValidationError is the validation error returned by
// GetTalkListStatisticReq.Validate if the designated constraints aren't met.
type GetTalkListStatisticReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTalkListStatisticReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTalkListStatisticReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTalkListStatisticReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTalkListStatisticReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTalkListStatisticReqValidationError) ErrorName() string {
	return "GetTalkListStatisticReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetTalkListStatisticReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTalkListStatisticReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTalkListStatisticReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTalkListStatisticReqValidationError{}

// Validate checks the field values on GetTalkListStatisticReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTalkListStatisticReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTalkListStatisticReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTalkListStatisticReplyMultiError, or nil if none found.
func (m *GetTalkListStatisticReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTalkListStatisticReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCount() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTalkListStatisticReplyValidationError{
						field:  fmt.Sprintf("Count[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTalkListStatisticReplyValidationError{
						field:  fmt.Sprintf("Count[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTalkListStatisticReplyValidationError{
					field:  fmt.Sprintf("Count[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTalkListStatisticReplyMultiError(errors)
	}

	return nil
}

// GetTalkListStatisticReplyMultiError is an error wrapping multiple validation
// errors returned by GetTalkListStatisticReply.ValidateAll() if the
// designated constraints aren't met.
type GetTalkListStatisticReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTalkListStatisticReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTalkListStatisticReplyMultiError) AllErrors() []error { return m }

// GetTalkListStatisticReplyValidationError is the validation error returned by
// GetTalkListStatisticReply.Validate if the designated constraints aren't met.
type GetTalkListStatisticReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTalkListStatisticReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTalkListStatisticReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTalkListStatisticReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTalkListStatisticReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTalkListStatisticReplyValidationError) ErrorName() string {
	return "GetTalkListStatisticReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetTalkListStatisticReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTalkListStatisticReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTalkListStatisticReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTalkListStatisticReplyValidationError{}

// Validate checks the field values on GetUserTalkListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserTalkListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserTalkListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserTalkListReqMultiError, or nil if none found.
func (m *GetUserTalkListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserTalkListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if len(errors) > 0 {
		return GetUserTalkListReqMultiError(errors)
	}

	return nil
}

// GetUserTalkListReqMultiError is an error wrapping multiple validation errors
// returned by GetUserTalkListReq.ValidateAll() if the designated constraints
// aren't met.
type GetUserTalkListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserTalkListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserTalkListReqMultiError) AllErrors() []error { return m }

// GetUserTalkListReqValidationError is the validation error returned by
// GetUserTalkListReq.Validate if the designated constraints aren't met.
type GetUserTalkListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserTalkListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserTalkListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserTalkListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserTalkListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserTalkListReqValidationError) ErrorName() string {
	return "GetUserTalkListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserTalkListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserTalkListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserTalkListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserTalkListReqValidationError{}

// Validate checks the field values on GetUserTalkListVisitorReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserTalkListVisitorReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserTalkListVisitorReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserTalkListVisitorReqMultiError, or nil if none found.
func (m *GetUserTalkListVisitorReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserTalkListVisitorReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetUserTalkListVisitorReqMultiError(errors)
	}

	return nil
}

// GetUserTalkListVisitorReqMultiError is an error wrapping multiple validation
// errors returned by GetUserTalkListVisitorReq.ValidateAll() if the
// designated constraints aren't met.
type GetUserTalkListVisitorReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserTalkListVisitorReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserTalkListVisitorReqMultiError) AllErrors() []error { return m }

// GetUserTalkListVisitorReqValidationError is the validation error returned by
// GetUserTalkListVisitorReq.Validate if the designated constraints aren't met.
type GetUserTalkListVisitorReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserTalkListVisitorReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserTalkListVisitorReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserTalkListVisitorReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserTalkListVisitorReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserTalkListVisitorReqValidationError) ErrorName() string {
	return "GetUserTalkListVisitorReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserTalkListVisitorReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserTalkListVisitorReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserTalkListVisitorReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserTalkListVisitorReqValidationError{}

// Validate checks the field values on GetTalkStatisticReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTalkStatisticReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTalkStatisticReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTalkStatisticReqMultiError, or nil if none found.
func (m *GetTalkStatisticReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTalkStatisticReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetTalkStatisticReqMultiError(errors)
	}

	return nil
}

// GetTalkStatisticReqMultiError is an error wrapping multiple validation
// errors returned by GetTalkStatisticReq.ValidateAll() if the designated
// constraints aren't met.
type GetTalkStatisticReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTalkStatisticReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTalkStatisticReqMultiError) AllErrors() []error { return m }

// GetTalkStatisticReqValidationError is the validation error returned by
// GetTalkStatisticReq.Validate if the designated constraints aren't met.
type GetTalkStatisticReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTalkStatisticReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTalkStatisticReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTalkStatisticReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTalkStatisticReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTalkStatisticReqValidationError) ErrorName() string {
	return "GetTalkStatisticReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetTalkStatisticReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTalkStatisticReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTalkStatisticReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTalkStatisticReqValidationError{}

// Validate checks the field values on GetTalkStatisticReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTalkStatisticReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTalkStatisticReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTalkStatisticReplyMultiError, or nil if none found.
func (m *GetTalkStatisticReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTalkStatisticReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Agree

	// no validation rules for Collect

	// no validation rules for View

	// no validation rules for Comment

	if len(errors) > 0 {
		return GetTalkStatisticReplyMultiError(errors)
	}

	return nil
}

// GetTalkStatisticReplyMultiError is an error wrapping multiple validation
// errors returned by GetTalkStatisticReply.ValidateAll() if the designated
// constraints aren't met.
type GetTalkStatisticReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTalkStatisticReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTalkStatisticReplyMultiError) AllErrors() []error { return m }

// GetTalkStatisticReplyValidationError is the validation error returned by
// GetTalkStatisticReply.Validate if the designated constraints aren't met.
type GetTalkStatisticReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTalkStatisticReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTalkStatisticReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTalkStatisticReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTalkStatisticReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTalkStatisticReplyValidationError) ErrorName() string {
	return "GetTalkStatisticReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetTalkStatisticReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTalkStatisticReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTalkStatisticReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTalkStatisticReplyValidationError{}

// Validate checks the field values on GetLastTalkDraftReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLastTalkDraftReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLastTalkDraftReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLastTalkDraftReplyMultiError, or nil if none found.
func (m *GetLastTalkDraftReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLastTalkDraftReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	if len(errors) > 0 {
		return GetLastTalkDraftReplyMultiError(errors)
	}

	return nil
}

// GetLastTalkDraftReplyMultiError is an error wrapping multiple validation
// errors returned by GetLastTalkDraftReply.ValidateAll() if the designated
// constraints aren't met.
type GetLastTalkDraftReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLastTalkDraftReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLastTalkDraftReplyMultiError) AllErrors() []error { return m }

// GetLastTalkDraftReplyValidationError is the validation error returned by
// GetLastTalkDraftReply.Validate if the designated constraints aren't met.
type GetLastTalkDraftReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLastTalkDraftReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLastTalkDraftReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLastTalkDraftReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLastTalkDraftReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLastTalkDraftReplyValidationError) ErrorName() string {
	return "GetLastTalkDraftReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetLastTalkDraftReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLastTalkDraftReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLastTalkDraftReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLastTalkDraftReplyValidationError{}

// Validate checks the field values on CreateTalkDraftReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTalkDraftReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTalkDraftReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTalkDraftReplyMultiError, or nil if none found.
func (m *CreateTalkDraftReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTalkDraftReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateTalkDraftReplyMultiError(errors)
	}

	return nil
}

// CreateTalkDraftReplyMultiError is an error wrapping multiple validation
// errors returned by CreateTalkDraftReply.ValidateAll() if the designated
// constraints aren't met.
type CreateTalkDraftReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTalkDraftReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTalkDraftReplyMultiError) AllErrors() []error { return m }

// CreateTalkDraftReplyValidationError is the validation error returned by
// CreateTalkDraftReply.Validate if the designated constraints aren't met.
type CreateTalkDraftReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTalkDraftReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTalkDraftReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTalkDraftReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTalkDraftReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTalkDraftReplyValidationError) ErrorName() string {
	return "CreateTalkDraftReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTalkDraftReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTalkDraftReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTalkDraftReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTalkDraftReplyValidationError{}

// Validate checks the field values on SendTalkReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendTalkReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendTalkReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendTalkReqMultiError, or
// nil if none found.
func (m *SendTalkReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendTalkReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SendTalkReqMultiError(errors)
	}

	return nil
}

// SendTalkReqMultiError is an error wrapping multiple validation errors
// returned by SendTalkReq.ValidateAll() if the designated constraints aren't met.
type SendTalkReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendTalkReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendTalkReqMultiError) AllErrors() []error { return m }

// SendTalkReqValidationError is the validation error returned by
// SendTalkReq.Validate if the designated constraints aren't met.
type SendTalkReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendTalkReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendTalkReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendTalkReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendTalkReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendTalkReqValidationError) ErrorName() string { return "SendTalkReqValidationError" }

// Error satisfies the builtin error interface
func (e SendTalkReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendTalkReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendTalkReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendTalkReqValidationError{}

// Validate checks the field values on SendTalkEditReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendTalkEditReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendTalkEditReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendTalkEditReqMultiError, or nil if none found.
func (m *SendTalkEditReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendTalkEditReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SendTalkEditReqMultiError(errors)
	}

	return nil
}

// SendTalkEditReqMultiError is an error wrapping multiple validation errors
// returned by SendTalkEditReq.ValidateAll() if the designated constraints
// aren't met.
type SendTalkEditReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendTalkEditReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendTalkEditReqMultiError) AllErrors() []error { return m }

// SendTalkEditReqValidationError is the validation error returned by
// SendTalkEditReq.Validate if the designated constraints aren't met.
type SendTalkEditReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendTalkEditReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendTalkEditReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendTalkEditReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendTalkEditReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendTalkEditReqValidationError) ErrorName() string { return "SendTalkEditReqValidationError" }

// Error satisfies the builtin error interface
func (e SendTalkEditReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendTalkEditReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendTalkEditReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendTalkEditReqValidationError{}

// Validate checks the field values on DeleteTalkReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteTalkReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTalkReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteTalkReqMultiError, or
// nil if none found.
func (m *DeleteTalkReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTalkReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteTalkReqMultiError(errors)
	}

	return nil
}

// DeleteTalkReqMultiError is an error wrapping multiple validation errors
// returned by DeleteTalkReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteTalkReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTalkReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTalkReqMultiError) AllErrors() []error { return m }

// DeleteTalkReqValidationError is the validation error returned by
// DeleteTalkReq.Validate if the designated constraints aren't met.
type DeleteTalkReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTalkReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTalkReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTalkReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTalkReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTalkReqValidationError) ErrorName() string { return "DeleteTalkReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteTalkReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTalkReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTalkReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTalkReqValidationError{}

// Validate checks the field values on SetTalkViewReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetTalkViewReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetTalkViewReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetTalkViewReqMultiError,
// or nil if none found.
func (m *SetTalkViewReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetTalkViewReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return SetTalkViewReqMultiError(errors)
	}

	return nil
}

// SetTalkViewReqMultiError is an error wrapping multiple validation errors
// returned by SetTalkViewReq.ValidateAll() if the designated constraints
// aren't met.
type SetTalkViewReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetTalkViewReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetTalkViewReqMultiError) AllErrors() []error { return m }

// SetTalkViewReqValidationError is the validation error returned by
// SetTalkViewReq.Validate if the designated constraints aren't met.
type SetTalkViewReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetTalkViewReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetTalkViewReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetTalkViewReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetTalkViewReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetTalkViewReqValidationError) ErrorName() string { return "SetTalkViewReqValidationError" }

// Error satisfies the builtin error interface
func (e SetTalkViewReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetTalkViewReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetTalkViewReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetTalkViewReqValidationError{}

// Validate checks the field values on TalkStatisticJudgeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TalkStatisticJudgeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TalkStatisticJudgeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TalkStatisticJudgeReqMultiError, or nil if none found.
func (m *TalkStatisticJudgeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *TalkStatisticJudgeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return TalkStatisticJudgeReqMultiError(errors)
	}

	return nil
}

// TalkStatisticJudgeReqMultiError is an error wrapping multiple validation
// errors returned by TalkStatisticJudgeReq.ValidateAll() if the designated
// constraints aren't met.
type TalkStatisticJudgeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TalkStatisticJudgeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TalkStatisticJudgeReqMultiError) AllErrors() []error { return m }

// TalkStatisticJudgeReqValidationError is the validation error returned by
// TalkStatisticJudgeReq.Validate if the designated constraints aren't met.
type TalkStatisticJudgeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TalkStatisticJudgeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TalkStatisticJudgeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TalkStatisticJudgeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TalkStatisticJudgeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TalkStatisticJudgeReqValidationError) ErrorName() string {
	return "TalkStatisticJudgeReqValidationError"
}

// Error satisfies the builtin error interface
func (e TalkStatisticJudgeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTalkStatisticJudgeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TalkStatisticJudgeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TalkStatisticJudgeReqValidationError{}

// Validate checks the field values on TalkStatisticJudgeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TalkStatisticJudgeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TalkStatisticJudgeReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TalkStatisticJudgeReplyMultiError, or nil if none found.
func (m *TalkStatisticJudgeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *TalkStatisticJudgeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Agree

	// no validation rules for Collect

	if len(errors) > 0 {
		return TalkStatisticJudgeReplyMultiError(errors)
	}

	return nil
}

// TalkStatisticJudgeReplyMultiError is an error wrapping multiple validation
// errors returned by TalkStatisticJudgeReply.ValidateAll() if the designated
// constraints aren't met.
type TalkStatisticJudgeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TalkStatisticJudgeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TalkStatisticJudgeReplyMultiError) AllErrors() []error { return m }

// TalkStatisticJudgeReplyValidationError is the validation error returned by
// TalkStatisticJudgeReply.Validate if the designated constraints aren't met.
type TalkStatisticJudgeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TalkStatisticJudgeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TalkStatisticJudgeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TalkStatisticJudgeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TalkStatisticJudgeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TalkStatisticJudgeReplyValidationError) ErrorName() string {
	return "TalkStatisticJudgeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e TalkStatisticJudgeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTalkStatisticJudgeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TalkStatisticJudgeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TalkStatisticJudgeReplyValidationError{}

// Validate checks the field values on SetTalkAgreeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetTalkAgreeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetTalkAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetTalkAgreeReqMultiError, or nil if none found.
func (m *SetTalkAgreeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetTalkAgreeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return SetTalkAgreeReqMultiError(errors)
	}

	return nil
}

// SetTalkAgreeReqMultiError is an error wrapping multiple validation errors
// returned by SetTalkAgreeReq.ValidateAll() if the designated constraints
// aren't met.
type SetTalkAgreeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetTalkAgreeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetTalkAgreeReqMultiError) AllErrors() []error { return m }

// SetTalkAgreeReqValidationError is the validation error returned by
// SetTalkAgreeReq.Validate if the designated constraints aren't met.
type SetTalkAgreeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetTalkAgreeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetTalkAgreeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetTalkAgreeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetTalkAgreeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetTalkAgreeReqValidationError) ErrorName() string { return "SetTalkAgreeReqValidationError" }

// Error satisfies the builtin error interface
func (e SetTalkAgreeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetTalkAgreeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetTalkAgreeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetTalkAgreeReqValidationError{}

// Validate checks the field values on SetTalkCollectReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetTalkCollectReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetTalkCollectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetTalkCollectReqMultiError, or nil if none found.
func (m *SetTalkCollectReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetTalkCollectReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CollectionsId

	// no validation rules for Uuid

	if len(errors) > 0 {
		return SetTalkCollectReqMultiError(errors)
	}

	return nil
}

// SetTalkCollectReqMultiError is an error wrapping multiple validation errors
// returned by SetTalkCollectReq.ValidateAll() if the designated constraints
// aren't met.
type SetTalkCollectReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetTalkCollectReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetTalkCollectReqMultiError) AllErrors() []error { return m }

// SetTalkCollectReqValidationError is the validation error returned by
// SetTalkCollectReq.Validate if the designated constraints aren't met.
type SetTalkCollectReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetTalkCollectReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetTalkCollectReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetTalkCollectReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetTalkCollectReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetTalkCollectReqValidationError) ErrorName() string {
	return "SetTalkCollectReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetTalkCollectReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetTalkCollectReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetTalkCollectReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetTalkCollectReqValidationError{}

// Validate checks the field values on CancelTalkAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelTalkAgreeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelTalkAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelTalkAgreeReqMultiError, or nil if none found.
func (m *CancelTalkAgreeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelTalkAgreeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return CancelTalkAgreeReqMultiError(errors)
	}

	return nil
}

// CancelTalkAgreeReqMultiError is an error wrapping multiple validation errors
// returned by CancelTalkAgreeReq.ValidateAll() if the designated constraints
// aren't met.
type CancelTalkAgreeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelTalkAgreeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelTalkAgreeReqMultiError) AllErrors() []error { return m }

// CancelTalkAgreeReqValidationError is the validation error returned by
// CancelTalkAgreeReq.Validate if the designated constraints aren't met.
type CancelTalkAgreeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelTalkAgreeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelTalkAgreeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelTalkAgreeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelTalkAgreeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelTalkAgreeReqValidationError) ErrorName() string {
	return "CancelTalkAgreeReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelTalkAgreeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelTalkAgreeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelTalkAgreeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelTalkAgreeReqValidationError{}

// Validate checks the field values on CancelTalkCollectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelTalkCollectReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelTalkCollectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelTalkCollectReqMultiError, or nil if none found.
func (m *CancelTalkCollectReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelTalkCollectReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return CancelTalkCollectReqMultiError(errors)
	}

	return nil
}

// CancelTalkCollectReqMultiError is an error wrapping multiple validation
// errors returned by CancelTalkCollectReq.ValidateAll() if the designated
// constraints aren't met.
type CancelTalkCollectReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelTalkCollectReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelTalkCollectReqMultiError) AllErrors() []error { return m }

// CancelTalkCollectReqValidationError is the validation error returned by
// CancelTalkCollectReq.Validate if the designated constraints aren't met.
type CancelTalkCollectReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelTalkCollectReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelTalkCollectReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelTalkCollectReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelTalkCollectReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelTalkCollectReqValidationError) ErrorName() string {
	return "CancelTalkCollectReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelTalkCollectReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelTalkCollectReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelTalkCollectReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelTalkCollectReqValidationError{}

// Validate checks the field values on GetLastColumnDraftReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLastColumnDraftReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLastColumnDraftReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLastColumnDraftReplyMultiError, or nil if none found.
func (m *GetLastColumnDraftReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLastColumnDraftReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	if len(errors) > 0 {
		return GetLastColumnDraftReplyMultiError(errors)
	}

	return nil
}

// GetLastColumnDraftReplyMultiError is an error wrapping multiple validation
// errors returned by GetLastColumnDraftReply.ValidateAll() if the designated
// constraints aren't met.
type GetLastColumnDraftReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLastColumnDraftReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLastColumnDraftReplyMultiError) AllErrors() []error { return m }

// GetLastColumnDraftReplyValidationError is the validation error returned by
// GetLastColumnDraftReply.Validate if the designated constraints aren't met.
type GetLastColumnDraftReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLastColumnDraftReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLastColumnDraftReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLastColumnDraftReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLastColumnDraftReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLastColumnDraftReplyValidationError) ErrorName() string {
	return "GetLastColumnDraftReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetLastColumnDraftReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLastColumnDraftReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLastColumnDraftReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLastColumnDraftReplyValidationError{}

// Validate checks the field values on CreateColumnDraftReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateColumnDraftReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateColumnDraftReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateColumnDraftReplyMultiError, or nil if none found.
func (m *CreateColumnDraftReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateColumnDraftReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateColumnDraftReplyMultiError(errors)
	}

	return nil
}

// CreateColumnDraftReplyMultiError is an error wrapping multiple validation
// errors returned by CreateColumnDraftReply.ValidateAll() if the designated
// constraints aren't met.
type CreateColumnDraftReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateColumnDraftReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateColumnDraftReplyMultiError) AllErrors() []error { return m }

// CreateColumnDraftReplyValidationError is the validation error returned by
// CreateColumnDraftReply.Validate if the designated constraints aren't met.
type CreateColumnDraftReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateColumnDraftReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateColumnDraftReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateColumnDraftReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateColumnDraftReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateColumnDraftReplyValidationError) ErrorName() string {
	return "CreateColumnDraftReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateColumnDraftReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateColumnDraftReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateColumnDraftReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateColumnDraftReplyValidationError{}

// Validate checks the field values on SendColumnReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendColumnReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendColumnReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendColumnReqMultiError, or
// nil if none found.
func (m *SendColumnReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendColumnReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SendColumnReqMultiError(errors)
	}

	return nil
}

// SendColumnReqMultiError is an error wrapping multiple validation errors
// returned by SendColumnReq.ValidateAll() if the designated constraints
// aren't met.
type SendColumnReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendColumnReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendColumnReqMultiError) AllErrors() []error { return m }

// SendColumnReqValidationError is the validation error returned by
// SendColumnReq.Validate if the designated constraints aren't met.
type SendColumnReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendColumnReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendColumnReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendColumnReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendColumnReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendColumnReqValidationError) ErrorName() string { return "SendColumnReqValidationError" }

// Error satisfies the builtin error interface
func (e SendColumnReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendColumnReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendColumnReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendColumnReqValidationError{}

// Validate checks the field values on GetColumnListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetColumnListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnListReqMultiError, or nil if none found.
func (m *GetColumnListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if len(errors) > 0 {
		return GetColumnListReqMultiError(errors)
	}

	return nil
}

// GetColumnListReqMultiError is an error wrapping multiple validation errors
// returned by GetColumnListReq.ValidateAll() if the designated constraints
// aren't met.
type GetColumnListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnListReqMultiError) AllErrors() []error { return m }

// GetColumnListReqValidationError is the validation error returned by
// GetColumnListReq.Validate if the designated constraints aren't met.
type GetColumnListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnListReqValidationError) ErrorName() string { return "GetColumnListReqValidationError" }

// Error satisfies the builtin error interface
func (e GetColumnListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnListReqValidationError{}

// Validate checks the field values on GetColumnListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColumnListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnListReplyMultiError, or nil if none found.
func (m *GetColumnListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetColumn() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetColumnListReplyValidationError{
						field:  fmt.Sprintf("Column[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetColumnListReplyValidationError{
						field:  fmt.Sprintf("Column[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetColumnListReplyValidationError{
					field:  fmt.Sprintf("Column[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetColumnListReplyMultiError(errors)
	}

	return nil
}

// GetColumnListReplyMultiError is an error wrapping multiple validation errors
// returned by GetColumnListReply.ValidateAll() if the designated constraints
// aren't met.
type GetColumnListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnListReplyMultiError) AllErrors() []error { return m }

// GetColumnListReplyValidationError is the validation error returned by
// GetColumnListReply.Validate if the designated constraints aren't met.
type GetColumnListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnListReplyValidationError) ErrorName() string {
	return "GetColumnListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnListReplyValidationError{}

// Validate checks the field values on GetColumnListHotReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColumnListHotReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnListHotReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnListHotReqMultiError, or nil if none found.
func (m *GetColumnListHotReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnListHotReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if len(errors) > 0 {
		return GetColumnListHotReqMultiError(errors)
	}

	return nil
}

// GetColumnListHotReqMultiError is an error wrapping multiple validation
// errors returned by GetColumnListHotReq.ValidateAll() if the designated
// constraints aren't met.
type GetColumnListHotReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnListHotReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnListHotReqMultiError) AllErrors() []error { return m }

// GetColumnListHotReqValidationError is the validation error returned by
// GetColumnListHotReq.Validate if the designated constraints aren't met.
type GetColumnListHotReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnListHotReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnListHotReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnListHotReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnListHotReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnListHotReqValidationError) ErrorName() string {
	return "GetColumnListHotReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnListHotReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnListHotReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnListHotReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnListHotReqValidationError{}

// Validate checks the field values on GetColumnListHotReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColumnListHotReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnListHotReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnListHotReplyMultiError, or nil if none found.
func (m *GetColumnListHotReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnListHotReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetColumn() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetColumnListHotReplyValidationError{
						field:  fmt.Sprintf("Column[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetColumnListHotReplyValidationError{
						field:  fmt.Sprintf("Column[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetColumnListHotReplyValidationError{
					field:  fmt.Sprintf("Column[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetColumnListHotReplyMultiError(errors)
	}

	return nil
}

// GetColumnListHotReplyMultiError is an error wrapping multiple validation
// errors returned by GetColumnListHotReply.ValidateAll() if the designated
// constraints aren't met.
type GetColumnListHotReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnListHotReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnListHotReplyMultiError) AllErrors() []error { return m }

// GetColumnListHotReplyValidationError is the validation error returned by
// GetColumnListHotReply.Validate if the designated constraints aren't met.
type GetColumnListHotReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnListHotReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnListHotReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnListHotReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnListHotReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnListHotReplyValidationError) ErrorName() string {
	return "GetColumnListHotReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnListHotReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnListHotReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnListHotReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnListHotReplyValidationError{}

// Validate checks the field values on GetColumnListStatisticReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColumnListStatisticReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnListStatisticReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnListStatisticReqMultiError, or nil if none found.
func (m *GetColumnListStatisticReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnListStatisticReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetColumnListStatisticReqMultiError(errors)
	}

	return nil
}

// GetColumnListStatisticReqMultiError is an error wrapping multiple validation
// errors returned by GetColumnListStatisticReq.ValidateAll() if the
// designated constraints aren't met.
type GetColumnListStatisticReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnListStatisticReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnListStatisticReqMultiError) AllErrors() []error { return m }

// GetColumnListStatisticReqValidationError is the validation error returned by
// GetColumnListStatisticReq.Validate if the designated constraints aren't met.
type GetColumnListStatisticReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnListStatisticReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnListStatisticReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnListStatisticReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnListStatisticReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnListStatisticReqValidationError) ErrorName() string {
	return "GetColumnListStatisticReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnListStatisticReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnListStatisticReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnListStatisticReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnListStatisticReqValidationError{}

// Validate checks the field values on GetColumnListStatisticReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColumnListStatisticReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnListStatisticReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnListStatisticReplyMultiError, or nil if none found.
func (m *GetColumnListStatisticReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnListStatisticReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCount() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetColumnListStatisticReplyValidationError{
						field:  fmt.Sprintf("Count[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetColumnListStatisticReplyValidationError{
						field:  fmt.Sprintf("Count[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetColumnListStatisticReplyValidationError{
					field:  fmt.Sprintf("Count[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetColumnListStatisticReplyMultiError(errors)
	}

	return nil
}

// GetColumnListStatisticReplyMultiError is an error wrapping multiple
// validation errors returned by GetColumnListStatisticReply.ValidateAll() if
// the designated constraints aren't met.
type GetColumnListStatisticReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnListStatisticReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnListStatisticReplyMultiError) AllErrors() []error { return m }

// GetColumnListStatisticReplyValidationError is the validation error returned
// by GetColumnListStatisticReply.Validate if the designated constraints
// aren't met.
type GetColumnListStatisticReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnListStatisticReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnListStatisticReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnListStatisticReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnListStatisticReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnListStatisticReplyValidationError) ErrorName() string {
	return "GetColumnListStatisticReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnListStatisticReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnListStatisticReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnListStatisticReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnListStatisticReplyValidationError{}

// Validate checks the field values on GetUserColumnListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserColumnListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserColumnListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserColumnListReqMultiError, or nil if none found.
func (m *GetUserColumnListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserColumnListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if len(errors) > 0 {
		return GetUserColumnListReqMultiError(errors)
	}

	return nil
}

// GetUserColumnListReqMultiError is an error wrapping multiple validation
// errors returned by GetUserColumnListReq.ValidateAll() if the designated
// constraints aren't met.
type GetUserColumnListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserColumnListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserColumnListReqMultiError) AllErrors() []error { return m }

// GetUserColumnListReqValidationError is the validation error returned by
// GetUserColumnListReq.Validate if the designated constraints aren't met.
type GetUserColumnListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserColumnListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserColumnListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserColumnListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserColumnListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserColumnListReqValidationError) ErrorName() string {
	return "GetUserColumnListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserColumnListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserColumnListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserColumnListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserColumnListReqValidationError{}

// Validate checks the field values on GetUserColumnListVisitorReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserColumnListVisitorReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserColumnListVisitorReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserColumnListVisitorReqMultiError, or nil if none found.
func (m *GetUserColumnListVisitorReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserColumnListVisitorReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetUserColumnListVisitorReqMultiError(errors)
	}

	return nil
}

// GetUserColumnListVisitorReqMultiError is an error wrapping multiple
// validation errors returned by GetUserColumnListVisitorReq.ValidateAll() if
// the designated constraints aren't met.
type GetUserColumnListVisitorReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserColumnListVisitorReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserColumnListVisitorReqMultiError) AllErrors() []error { return m }

// GetUserColumnListVisitorReqValidationError is the validation error returned
// by GetUserColumnListVisitorReq.Validate if the designated constraints
// aren't met.
type GetUserColumnListVisitorReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserColumnListVisitorReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserColumnListVisitorReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserColumnListVisitorReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserColumnListVisitorReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserColumnListVisitorReqValidationError) ErrorName() string {
	return "GetUserColumnListVisitorReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserColumnListVisitorReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserColumnListVisitorReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserColumnListVisitorReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserColumnListVisitorReqValidationError{}

// Validate checks the field values on GetColumnArticleListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColumnArticleListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnArticleListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnArticleListReqMultiError, or nil if none found.
func (m *GetColumnArticleListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnArticleListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetColumnArticleListReqMultiError(errors)
	}

	return nil
}

// GetColumnArticleListReqMultiError is an error wrapping multiple validation
// errors returned by GetColumnArticleListReq.ValidateAll() if the designated
// constraints aren't met.
type GetColumnArticleListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnArticleListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnArticleListReqMultiError) AllErrors() []error { return m }

// GetColumnArticleListReqValidationError is the validation error returned by
// GetColumnArticleListReq.Validate if the designated constraints aren't met.
type GetColumnArticleListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnArticleListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnArticleListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnArticleListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnArticleListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnArticleListReqValidationError) ErrorName() string {
	return "GetColumnArticleListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnArticleListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnArticleListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnArticleListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnArticleListReqValidationError{}

// Validate checks the field values on GetColumnCountVisitorReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColumnCountVisitorReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnCountVisitorReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnCountVisitorReqMultiError, or nil if none found.
func (m *GetColumnCountVisitorReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnCountVisitorReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetColumnCountVisitorReqMultiError(errors)
	}

	return nil
}

// GetColumnCountVisitorReqMultiError is an error wrapping multiple validation
// errors returned by GetColumnCountVisitorReq.ValidateAll() if the designated
// constraints aren't met.
type GetColumnCountVisitorReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnCountVisitorReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnCountVisitorReqMultiError) AllErrors() []error { return m }

// GetColumnCountVisitorReqValidationError is the validation error returned by
// GetColumnCountVisitorReq.Validate if the designated constraints aren't met.
type GetColumnCountVisitorReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnCountVisitorReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnCountVisitorReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnCountVisitorReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnCountVisitorReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnCountVisitorReqValidationError) ErrorName() string {
	return "GetColumnCountVisitorReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnCountVisitorReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnCountVisitorReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnCountVisitorReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnCountVisitorReqValidationError{}

// Validate checks the field values on GetColumnCountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColumnCountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnCountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnCountReplyMultiError, or nil if none found.
func (m *GetColumnCountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnCountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return GetColumnCountReplyMultiError(errors)
	}

	return nil
}

// GetColumnCountReplyMultiError is an error wrapping multiple validation
// errors returned by GetColumnCountReply.ValidateAll() if the designated
// constraints aren't met.
type GetColumnCountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnCountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnCountReplyMultiError) AllErrors() []error { return m }

// GetColumnCountReplyValidationError is the validation error returned by
// GetColumnCountReply.Validate if the designated constraints aren't met.
type GetColumnCountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnCountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnCountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnCountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnCountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnCountReplyValidationError) ErrorName() string {
	return "GetColumnCountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnCountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnCountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnCountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnCountReplyValidationError{}

// Validate checks the field values on SendColumnEditReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendColumnEditReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendColumnEditReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendColumnEditReqMultiError, or nil if none found.
func (m *SendColumnEditReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendColumnEditReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SendColumnEditReqMultiError(errors)
	}

	return nil
}

// SendColumnEditReqMultiError is an error wrapping multiple validation errors
// returned by SendColumnEditReq.ValidateAll() if the designated constraints
// aren't met.
type SendColumnEditReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendColumnEditReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendColumnEditReqMultiError) AllErrors() []error { return m }

// SendColumnEditReqValidationError is the validation error returned by
// SendColumnEditReq.Validate if the designated constraints aren't met.
type SendColumnEditReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendColumnEditReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendColumnEditReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendColumnEditReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendColumnEditReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendColumnEditReqValidationError) ErrorName() string {
	return "SendColumnEditReqValidationError"
}

// Error satisfies the builtin error interface
func (e SendColumnEditReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendColumnEditReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendColumnEditReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendColumnEditReqValidationError{}

// Validate checks the field values on DeleteColumnReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteColumnReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteColumnReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteColumnReqMultiError, or nil if none found.
func (m *DeleteColumnReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteColumnReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteColumnReqMultiError(errors)
	}

	return nil
}

// DeleteColumnReqMultiError is an error wrapping multiple validation errors
// returned by DeleteColumnReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteColumnReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteColumnReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteColumnReqMultiError) AllErrors() []error { return m }

// DeleteColumnReqValidationError is the validation error returned by
// DeleteColumnReq.Validate if the designated constraints aren't met.
type DeleteColumnReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteColumnReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteColumnReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteColumnReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteColumnReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteColumnReqValidationError) ErrorName() string { return "DeleteColumnReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteColumnReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteColumnReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteColumnReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteColumnReqValidationError{}

// Validate checks the field values on GetColumnStatisticReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColumnStatisticReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnStatisticReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnStatisticReqMultiError, or nil if none found.
func (m *GetColumnStatisticReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnStatisticReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetColumnStatisticReqMultiError(errors)
	}

	return nil
}

// GetColumnStatisticReqMultiError is an error wrapping multiple validation
// errors returned by GetColumnStatisticReq.ValidateAll() if the designated
// constraints aren't met.
type GetColumnStatisticReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnStatisticReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnStatisticReqMultiError) AllErrors() []error { return m }

// GetColumnStatisticReqValidationError is the validation error returned by
// GetColumnStatisticReq.Validate if the designated constraints aren't met.
type GetColumnStatisticReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnStatisticReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnStatisticReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnStatisticReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnStatisticReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnStatisticReqValidationError) ErrorName() string {
	return "GetColumnStatisticReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnStatisticReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnStatisticReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnStatisticReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnStatisticReqValidationError{}

// Validate checks the field values on GetColumnStatisticReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColumnStatisticReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnStatisticReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnStatisticReplyMultiError, or nil if none found.
func (m *GetColumnStatisticReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnStatisticReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Agree

	// no validation rules for Collect

	// no validation rules for View

	if len(errors) > 0 {
		return GetColumnStatisticReplyMultiError(errors)
	}

	return nil
}

// GetColumnStatisticReplyMultiError is an error wrapping multiple validation
// errors returned by GetColumnStatisticReply.ValidateAll() if the designated
// constraints aren't met.
type GetColumnStatisticReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnStatisticReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnStatisticReplyMultiError) AllErrors() []error { return m }

// GetColumnStatisticReplyValidationError is the validation error returned by
// GetColumnStatisticReply.Validate if the designated constraints aren't met.
type GetColumnStatisticReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnStatisticReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnStatisticReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnStatisticReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnStatisticReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnStatisticReplyValidationError) ErrorName() string {
	return "GetColumnStatisticReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnStatisticReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnStatisticReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnStatisticReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnStatisticReplyValidationError{}

// Validate checks the field values on ColumnStatisticJudgeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ColumnStatisticJudgeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ColumnStatisticJudgeReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ColumnStatisticJudgeReqMultiError, or nil if none found.
func (m *ColumnStatisticJudgeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ColumnStatisticJudgeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ColumnStatisticJudgeReqMultiError(errors)
	}

	return nil
}

// ColumnStatisticJudgeReqMultiError is an error wrapping multiple validation
// errors returned by ColumnStatisticJudgeReq.ValidateAll() if the designated
// constraints aren't met.
type ColumnStatisticJudgeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ColumnStatisticJudgeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ColumnStatisticJudgeReqMultiError) AllErrors() []error { return m }

// ColumnStatisticJudgeReqValidationError is the validation error returned by
// ColumnStatisticJudgeReq.Validate if the designated constraints aren't met.
type ColumnStatisticJudgeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ColumnStatisticJudgeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ColumnStatisticJudgeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ColumnStatisticJudgeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ColumnStatisticJudgeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ColumnStatisticJudgeReqValidationError) ErrorName() string {
	return "ColumnStatisticJudgeReqValidationError"
}

// Error satisfies the builtin error interface
func (e ColumnStatisticJudgeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sColumnStatisticJudgeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ColumnStatisticJudgeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ColumnStatisticJudgeReqValidationError{}

// Validate checks the field values on ColumnStatisticJudgeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ColumnStatisticJudgeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ColumnStatisticJudgeReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ColumnStatisticJudgeReplyMultiError, or nil if none found.
func (m *ColumnStatisticJudgeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ColumnStatisticJudgeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Agree

	// no validation rules for Collect

	if len(errors) > 0 {
		return ColumnStatisticJudgeReplyMultiError(errors)
	}

	return nil
}

// ColumnStatisticJudgeReplyMultiError is an error wrapping multiple validation
// errors returned by ColumnStatisticJudgeReply.ValidateAll() if the
// designated constraints aren't met.
type ColumnStatisticJudgeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ColumnStatisticJudgeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ColumnStatisticJudgeReplyMultiError) AllErrors() []error { return m }

// ColumnStatisticJudgeReplyValidationError is the validation error returned by
// ColumnStatisticJudgeReply.Validate if the designated constraints aren't met.
type ColumnStatisticJudgeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ColumnStatisticJudgeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ColumnStatisticJudgeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ColumnStatisticJudgeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ColumnStatisticJudgeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ColumnStatisticJudgeReplyValidationError) ErrorName() string {
	return "ColumnStatisticJudgeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ColumnStatisticJudgeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sColumnStatisticJudgeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ColumnStatisticJudgeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ColumnStatisticJudgeReplyValidationError{}

// Validate checks the field values on SetColumnAgreeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetColumnAgreeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetColumnAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetColumnAgreeReqMultiError, or nil if none found.
func (m *SetColumnAgreeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetColumnAgreeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return SetColumnAgreeReqMultiError(errors)
	}

	return nil
}

// SetColumnAgreeReqMultiError is an error wrapping multiple validation errors
// returned by SetColumnAgreeReq.ValidateAll() if the designated constraints
// aren't met.
type SetColumnAgreeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetColumnAgreeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetColumnAgreeReqMultiError) AllErrors() []error { return m }

// SetColumnAgreeReqValidationError is the validation error returned by
// SetColumnAgreeReq.Validate if the designated constraints aren't met.
type SetColumnAgreeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetColumnAgreeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetColumnAgreeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetColumnAgreeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetColumnAgreeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetColumnAgreeReqValidationError) ErrorName() string {
	return "SetColumnAgreeReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetColumnAgreeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetColumnAgreeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetColumnAgreeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetColumnAgreeReqValidationError{}

// Validate checks the field values on CancelColumnAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelColumnAgreeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelColumnAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelColumnAgreeReqMultiError, or nil if none found.
func (m *CancelColumnAgreeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelColumnAgreeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return CancelColumnAgreeReqMultiError(errors)
	}

	return nil
}

// CancelColumnAgreeReqMultiError is an error wrapping multiple validation
// errors returned by CancelColumnAgreeReq.ValidateAll() if the designated
// constraints aren't met.
type CancelColumnAgreeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelColumnAgreeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelColumnAgreeReqMultiError) AllErrors() []error { return m }

// CancelColumnAgreeReqValidationError is the validation error returned by
// CancelColumnAgreeReq.Validate if the designated constraints aren't met.
type CancelColumnAgreeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelColumnAgreeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelColumnAgreeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelColumnAgreeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelColumnAgreeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelColumnAgreeReqValidationError) ErrorName() string {
	return "CancelColumnAgreeReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelColumnAgreeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelColumnAgreeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelColumnAgreeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelColumnAgreeReqValidationError{}

// Validate checks the field values on SetColumnCollectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetColumnCollectReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetColumnCollectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetColumnCollectReqMultiError, or nil if none found.
func (m *SetColumnCollectReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetColumnCollectReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CollectionsId

	// no validation rules for Uuid

	if len(errors) > 0 {
		return SetColumnCollectReqMultiError(errors)
	}

	return nil
}

// SetColumnCollectReqMultiError is an error wrapping multiple validation
// errors returned by SetColumnCollectReq.ValidateAll() if the designated
// constraints aren't met.
type SetColumnCollectReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetColumnCollectReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetColumnCollectReqMultiError) AllErrors() []error { return m }

// SetColumnCollectReqValidationError is the validation error returned by
// SetColumnCollectReq.Validate if the designated constraints aren't met.
type SetColumnCollectReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetColumnCollectReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetColumnCollectReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetColumnCollectReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetColumnCollectReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetColumnCollectReqValidationError) ErrorName() string {
	return "SetColumnCollectReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetColumnCollectReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetColumnCollectReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetColumnCollectReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetColumnCollectReqValidationError{}

// Validate checks the field values on CancelColumnCollectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelColumnCollectReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelColumnCollectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelColumnCollectReqMultiError, or nil if none found.
func (m *CancelColumnCollectReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelColumnCollectReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return CancelColumnCollectReqMultiError(errors)
	}

	return nil
}

// CancelColumnCollectReqMultiError is an error wrapping multiple validation
// errors returned by CancelColumnCollectReq.ValidateAll() if the designated
// constraints aren't met.
type CancelColumnCollectReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelColumnCollectReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelColumnCollectReqMultiError) AllErrors() []error { return m }

// CancelColumnCollectReqValidationError is the validation error returned by
// CancelColumnCollectReq.Validate if the designated constraints aren't met.
type CancelColumnCollectReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelColumnCollectReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelColumnCollectReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelColumnCollectReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelColumnCollectReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelColumnCollectReqValidationError) ErrorName() string {
	return "CancelColumnCollectReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelColumnCollectReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelColumnCollectReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelColumnCollectReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelColumnCollectReqValidationError{}

// Validate checks the field values on SetColumnViewReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetColumnViewReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetColumnViewReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetColumnViewReqMultiError, or nil if none found.
func (m *SetColumnViewReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetColumnViewReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return SetColumnViewReqMultiError(errors)
	}

	return nil
}

// SetColumnViewReqMultiError is an error wrapping multiple validation errors
// returned by SetColumnViewReq.ValidateAll() if the designated constraints
// aren't met.
type SetColumnViewReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetColumnViewReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetColumnViewReqMultiError) AllErrors() []error { return m }

// SetColumnViewReqValidationError is the validation error returned by
// SetColumnViewReq.Validate if the designated constraints aren't met.
type SetColumnViewReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetColumnViewReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetColumnViewReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetColumnViewReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetColumnViewReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetColumnViewReqValidationError) ErrorName() string { return "SetColumnViewReqValidationError" }

// Error satisfies the builtin error interface
func (e SetColumnViewReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetColumnViewReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetColumnViewReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetColumnViewReqValidationError{}

// Validate checks the field values on AddColumnIncludesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddColumnIncludesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddColumnIncludesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddColumnIncludesReqMultiError, or nil if none found.
func (m *AddColumnIncludesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddColumnIncludesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ArticleId

	if len(errors) > 0 {
		return AddColumnIncludesReqMultiError(errors)
	}

	return nil
}

// AddColumnIncludesReqMultiError is an error wrapping multiple validation
// errors returned by AddColumnIncludesReq.ValidateAll() if the designated
// constraints aren't met.
type AddColumnIncludesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddColumnIncludesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddColumnIncludesReqMultiError) AllErrors() []error { return m }

// AddColumnIncludesReqValidationError is the validation error returned by
// AddColumnIncludesReq.Validate if the designated constraints aren't met.
type AddColumnIncludesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddColumnIncludesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddColumnIncludesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddColumnIncludesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddColumnIncludesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddColumnIncludesReqValidationError) ErrorName() string {
	return "AddColumnIncludesReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddColumnIncludesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddColumnIncludesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddColumnIncludesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddColumnIncludesReqValidationError{}

// Validate checks the field values on DeleteColumnIncludesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteColumnIncludesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteColumnIncludesReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteColumnIncludesReqMultiError, or nil if none found.
func (m *DeleteColumnIncludesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteColumnIncludesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ArticleId

	if len(errors) > 0 {
		return DeleteColumnIncludesReqMultiError(errors)
	}

	return nil
}

// DeleteColumnIncludesReqMultiError is an error wrapping multiple validation
// errors returned by DeleteColumnIncludesReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteColumnIncludesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteColumnIncludesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteColumnIncludesReqMultiError) AllErrors() []error { return m }

// DeleteColumnIncludesReqValidationError is the validation error returned by
// DeleteColumnIncludesReq.Validate if the designated constraints aren't met.
type DeleteColumnIncludesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteColumnIncludesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteColumnIncludesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteColumnIncludesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteColumnIncludesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteColumnIncludesReqValidationError) ErrorName() string {
	return "DeleteColumnIncludesReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteColumnIncludesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteColumnIncludesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteColumnIncludesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteColumnIncludesReqValidationError{}

// Validate checks the field values on GetLeaderBoardReply_Board with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLeaderBoardReply_Board) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLeaderBoardReply_Board with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLeaderBoardReply_BoardMultiError, or nil if none found.
func (m *GetLeaderBoardReply_Board) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLeaderBoardReply_Board) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	// no validation rules for Mode

	if len(errors) > 0 {
		return GetLeaderBoardReply_BoardMultiError(errors)
	}

	return nil
}

// GetLeaderBoardReply_BoardMultiError is an error wrapping multiple validation
// errors returned by GetLeaderBoardReply_Board.ValidateAll() if the
// designated constraints aren't met.
type GetLeaderBoardReply_BoardMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLeaderBoardReply_BoardMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLeaderBoardReply_BoardMultiError) AllErrors() []error { return m }

// GetLeaderBoardReply_BoardValidationError is the validation error returned by
// GetLeaderBoardReply_Board.Validate if the designated constraints aren't met.
type GetLeaderBoardReply_BoardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLeaderBoardReply_BoardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLeaderBoardReply_BoardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLeaderBoardReply_BoardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLeaderBoardReply_BoardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLeaderBoardReply_BoardValidationError) ErrorName() string {
	return "GetLeaderBoardReply_BoardValidationError"
}

// Error satisfies the builtin error interface
func (e GetLeaderBoardReply_BoardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLeaderBoardReply_Board.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLeaderBoardReply_BoardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLeaderBoardReply_BoardValidationError{}

// Validate checks the field values on GetArticleListReply_Article with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListReply_Article) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListReply_Article with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleListReply_ArticleMultiError, or nil if none found.
func (m *GetArticleListReply_Article) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListReply_Article) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetArticleListReply_ArticleMultiError(errors)
	}

	return nil
}

// GetArticleListReply_ArticleMultiError is an error wrapping multiple
// validation errors returned by GetArticleListReply_Article.ValidateAll() if
// the designated constraints aren't met.
type GetArticleListReply_ArticleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListReply_ArticleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListReply_ArticleMultiError) AllErrors() []error { return m }

// GetArticleListReply_ArticleValidationError is the validation error returned
// by GetArticleListReply_Article.Validate if the designated constraints
// aren't met.
type GetArticleListReply_ArticleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListReply_ArticleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListReply_ArticleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListReply_ArticleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListReply_ArticleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListReply_ArticleValidationError) ErrorName() string {
	return "GetArticleListReply_ArticleValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListReply_ArticleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListReply_Article.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListReply_ArticleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListReply_ArticleValidationError{}

// Validate checks the field values on GetArticleListHotReply_Article with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListHotReply_Article) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListHotReply_Article with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetArticleListHotReply_ArticleMultiError, or nil if none found.
func (m *GetArticleListHotReply_Article) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListHotReply_Article) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetArticleListHotReply_ArticleMultiError(errors)
	}

	return nil
}

// GetArticleListHotReply_ArticleMultiError is an error wrapping multiple
// validation errors returned by GetArticleListHotReply_Article.ValidateAll()
// if the designated constraints aren't met.
type GetArticleListHotReply_ArticleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListHotReply_ArticleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListHotReply_ArticleMultiError) AllErrors() []error { return m }

// GetArticleListHotReply_ArticleValidationError is the validation error
// returned by GetArticleListHotReply_Article.Validate if the designated
// constraints aren't met.
type GetArticleListHotReply_ArticleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListHotReply_ArticleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListHotReply_ArticleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListHotReply_ArticleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListHotReply_ArticleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListHotReply_ArticleValidationError) ErrorName() string {
	return "GetArticleListHotReply_ArticleValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListHotReply_ArticleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListHotReply_Article.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListHotReply_ArticleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListHotReply_ArticleValidationError{}

// Validate checks the field values on GetArticleListStatisticReply_Count with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetArticleListStatisticReply_Count) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListStatisticReply_Count
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetArticleListStatisticReply_CountMultiError, or nil if none found.
func (m *GetArticleListStatisticReply_Count) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListStatisticReply_Count) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Agree

	// no validation rules for Collect

	// no validation rules for View

	// no validation rules for Comment

	if len(errors) > 0 {
		return GetArticleListStatisticReply_CountMultiError(errors)
	}

	return nil
}

// GetArticleListStatisticReply_CountMultiError is an error wrapping multiple
// validation errors returned by
// GetArticleListStatisticReply_Count.ValidateAll() if the designated
// constraints aren't met.
type GetArticleListStatisticReply_CountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListStatisticReply_CountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListStatisticReply_CountMultiError) AllErrors() []error { return m }

// GetArticleListStatisticReply_CountValidationError is the validation error
// returned by GetArticleListStatisticReply_Count.Validate if the designated
// constraints aren't met.
type GetArticleListStatisticReply_CountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListStatisticReply_CountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListStatisticReply_CountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListStatisticReply_CountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListStatisticReply_CountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListStatisticReply_CountValidationError) ErrorName() string {
	return "GetArticleListStatisticReply_CountValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListStatisticReply_CountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListStatisticReply_Count.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListStatisticReply_CountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListStatisticReply_CountValidationError{}

// Validate checks the field values on GetCollectionsReply_Collections with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionsReply_Collections) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionsReply_Collections with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCollectionsReply_CollectionsMultiError, or nil if none found.
func (m *GetCollectionsReply_Collections) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionsReply_Collections) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Introduce

	if len(errors) > 0 {
		return GetCollectionsReply_CollectionsMultiError(errors)
	}

	return nil
}

// GetCollectionsReply_CollectionsMultiError is an error wrapping multiple
// validation errors returned by GetCollectionsReply_Collections.ValidateAll()
// if the designated constraints aren't met.
type GetCollectionsReply_CollectionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionsReply_CollectionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionsReply_CollectionsMultiError) AllErrors() []error { return m }

// GetCollectionsReply_CollectionsValidationError is the validation error
// returned by GetCollectionsReply_Collections.Validate if the designated
// constraints aren't met.
type GetCollectionsReply_CollectionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionsReply_CollectionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionsReply_CollectionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionsReply_CollectionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionsReply_CollectionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionsReply_CollectionsValidationError) ErrorName() string {
	return "GetCollectionsReply_CollectionsValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionsReply_CollectionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionsReply_Collections.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionsReply_CollectionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionsReply_CollectionsValidationError{}

// Validate checks the field values on GetArticleDraftListReply_Draft with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleDraftListReply_Draft) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleDraftListReply_Draft with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetArticleDraftListReply_DraftMultiError, or nil if none found.
func (m *GetArticleDraftListReply_Draft) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleDraftListReply_Draft) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetArticleDraftListReply_DraftMultiError(errors)
	}

	return nil
}

// GetArticleDraftListReply_DraftMultiError is an error wrapping multiple
// validation errors returned by GetArticleDraftListReply_Draft.ValidateAll()
// if the designated constraints aren't met.
type GetArticleDraftListReply_DraftMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleDraftListReply_DraftMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleDraftListReply_DraftMultiError) AllErrors() []error { return m }

// GetArticleDraftListReply_DraftValidationError is the validation error
// returned by GetArticleDraftListReply_Draft.Validate if the designated
// constraints aren't met.
type GetArticleDraftListReply_DraftValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleDraftListReply_DraftValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleDraftListReply_DraftValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleDraftListReply_DraftValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleDraftListReply_DraftValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleDraftListReply_DraftValidationError) ErrorName() string {
	return "GetArticleDraftListReply_DraftValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleDraftListReply_DraftValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleDraftListReply_Draft.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleDraftListReply_DraftValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleDraftListReply_DraftValidationError{}

// Validate checks the field values on GetTalkListReply_Talk with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTalkListReply_Talk) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTalkListReply_Talk with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTalkListReply_TalkMultiError, or nil if none found.
func (m *GetTalkListReply_Talk) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTalkListReply_Talk) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetTalkListReply_TalkMultiError(errors)
	}

	return nil
}

// GetTalkListReply_TalkMultiError is an error wrapping multiple validation
// errors returned by GetTalkListReply_Talk.ValidateAll() if the designated
// constraints aren't met.
type GetTalkListReply_TalkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTalkListReply_TalkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTalkListReply_TalkMultiError) AllErrors() []error { return m }

// GetTalkListReply_TalkValidationError is the validation error returned by
// GetTalkListReply_Talk.Validate if the designated constraints aren't met.
type GetTalkListReply_TalkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTalkListReply_TalkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTalkListReply_TalkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTalkListReply_TalkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTalkListReply_TalkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTalkListReply_TalkValidationError) ErrorName() string {
	return "GetTalkListReply_TalkValidationError"
}

// Error satisfies the builtin error interface
func (e GetTalkListReply_TalkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTalkListReply_Talk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTalkListReply_TalkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTalkListReply_TalkValidationError{}

// Validate checks the field values on GetTalkListHotReply_Talk with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTalkListHotReply_Talk) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTalkListHotReply_Talk with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTalkListHotReply_TalkMultiError, or nil if none found.
func (m *GetTalkListHotReply_Talk) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTalkListHotReply_Talk) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetTalkListHotReply_TalkMultiError(errors)
	}

	return nil
}

// GetTalkListHotReply_TalkMultiError is an error wrapping multiple validation
// errors returned by GetTalkListHotReply_Talk.ValidateAll() if the designated
// constraints aren't met.
type GetTalkListHotReply_TalkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTalkListHotReply_TalkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTalkListHotReply_TalkMultiError) AllErrors() []error { return m }

// GetTalkListHotReply_TalkValidationError is the validation error returned by
// GetTalkListHotReply_Talk.Validate if the designated constraints aren't met.
type GetTalkListHotReply_TalkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTalkListHotReply_TalkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTalkListHotReply_TalkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTalkListHotReply_TalkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTalkListHotReply_TalkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTalkListHotReply_TalkValidationError) ErrorName() string {
	return "GetTalkListHotReply_TalkValidationError"
}

// Error satisfies the builtin error interface
func (e GetTalkListHotReply_TalkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTalkListHotReply_Talk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTalkListHotReply_TalkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTalkListHotReply_TalkValidationError{}

// Validate checks the field values on GetTalkListStatisticReply_Count with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTalkListStatisticReply_Count) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTalkListStatisticReply_Count with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTalkListStatisticReply_CountMultiError, or nil if none found.
func (m *GetTalkListStatisticReply_Count) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTalkListStatisticReply_Count) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Agree

	// no validation rules for Collect

	// no validation rules for View

	// no validation rules for Comment

	if len(errors) > 0 {
		return GetTalkListStatisticReply_CountMultiError(errors)
	}

	return nil
}

// GetTalkListStatisticReply_CountMultiError is an error wrapping multiple
// validation errors returned by GetTalkListStatisticReply_Count.ValidateAll()
// if the designated constraints aren't met.
type GetTalkListStatisticReply_CountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTalkListStatisticReply_CountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTalkListStatisticReply_CountMultiError) AllErrors() []error { return m }

// GetTalkListStatisticReply_CountValidationError is the validation error
// returned by GetTalkListStatisticReply_Count.Validate if the designated
// constraints aren't met.
type GetTalkListStatisticReply_CountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTalkListStatisticReply_CountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTalkListStatisticReply_CountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTalkListStatisticReply_CountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTalkListStatisticReply_CountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTalkListStatisticReply_CountValidationError) ErrorName() string {
	return "GetTalkListStatisticReply_CountValidationError"
}

// Error satisfies the builtin error interface
func (e GetTalkListStatisticReply_CountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTalkListStatisticReply_Count.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTalkListStatisticReply_CountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTalkListStatisticReply_CountValidationError{}

// Validate checks the field values on GetColumnListReply_Column with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColumnListReply_Column) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnListReply_Column with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnListReply_ColumnMultiError, or nil if none found.
func (m *GetColumnListReply_Column) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnListReply_Column) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetColumnListReply_ColumnMultiError(errors)
	}

	return nil
}

// GetColumnListReply_ColumnMultiError is an error wrapping multiple validation
// errors returned by GetColumnListReply_Column.ValidateAll() if the
// designated constraints aren't met.
type GetColumnListReply_ColumnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnListReply_ColumnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnListReply_ColumnMultiError) AllErrors() []error { return m }

// GetColumnListReply_ColumnValidationError is the validation error returned by
// GetColumnListReply_Column.Validate if the designated constraints aren't met.
type GetColumnListReply_ColumnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnListReply_ColumnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnListReply_ColumnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnListReply_ColumnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnListReply_ColumnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnListReply_ColumnValidationError) ErrorName() string {
	return "GetColumnListReply_ColumnValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnListReply_ColumnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnListReply_Column.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnListReply_ColumnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnListReply_ColumnValidationError{}

// Validate checks the field values on GetColumnListHotReply_Column with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColumnListHotReply_Column) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnListHotReply_Column with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColumnListHotReply_ColumnMultiError, or nil if none found.
func (m *GetColumnListHotReply_Column) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnListHotReply_Column) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetColumnListHotReply_ColumnMultiError(errors)
	}

	return nil
}

// GetColumnListHotReply_ColumnMultiError is an error wrapping multiple
// validation errors returned by GetColumnListHotReply_Column.ValidateAll() if
// the designated constraints aren't met.
type GetColumnListHotReply_ColumnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnListHotReply_ColumnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnListHotReply_ColumnMultiError) AllErrors() []error { return m }

// GetColumnListHotReply_ColumnValidationError is the validation error returned
// by GetColumnListHotReply_Column.Validate if the designated constraints
// aren't met.
type GetColumnListHotReply_ColumnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnListHotReply_ColumnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnListHotReply_ColumnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnListHotReply_ColumnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnListHotReply_ColumnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnListHotReply_ColumnValidationError) ErrorName() string {
	return "GetColumnListHotReply_ColumnValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnListHotReply_ColumnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnListHotReply_Column.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnListHotReply_ColumnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnListHotReply_ColumnValidationError{}

// Validate checks the field values on GetColumnListStatisticReply_Count with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetColumnListStatisticReply_Count) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColumnListStatisticReply_Count
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetColumnListStatisticReply_CountMultiError, or nil if none found.
func (m *GetColumnListStatisticReply_Count) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColumnListStatisticReply_Count) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Agree

	// no validation rules for Collect

	// no validation rules for View

	if len(errors) > 0 {
		return GetColumnListStatisticReply_CountMultiError(errors)
	}

	return nil
}

// GetColumnListStatisticReply_CountMultiError is an error wrapping multiple
// validation errors returned by
// GetColumnListStatisticReply_Count.ValidateAll() if the designated
// constraints aren't met.
type GetColumnListStatisticReply_CountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColumnListStatisticReply_CountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColumnListStatisticReply_CountMultiError) AllErrors() []error { return m }

// GetColumnListStatisticReply_CountValidationError is the validation error
// returned by GetColumnListStatisticReply_Count.Validate if the designated
// constraints aren't met.
type GetColumnListStatisticReply_CountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColumnListStatisticReply_CountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColumnListStatisticReply_CountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColumnListStatisticReply_CountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColumnListStatisticReply_CountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColumnListStatisticReply_CountValidationError) ErrorName() string {
	return "GetColumnListStatisticReply_CountValidationError"
}

// Error satisfies the builtin error interface
func (e GetColumnListStatisticReply_CountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColumnListStatisticReply_Count.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColumnListStatisticReply_CountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColumnListStatisticReply_CountValidationError{}
