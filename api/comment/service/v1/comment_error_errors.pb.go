// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsUnknownError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == CommentErrorReason_UNKNOWN_ERROR.String() && e.Code == 500
}

func ErrorUnknownError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, CommentErrorReason_UNKNOWN_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsGetCommentDraftFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == CommentErrorReason_GET_COMMENT_DRAFT_FAILED.String() && e.Code == 500
}

func ErrorGetCommentDraftFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, CommentErrorReason_GET_COMMENT_DRAFT_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetCommentListFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == CommentErrorReason_GET_COMMENT_LIST_FAILED.String() && e.Code == 500
}

func ErrorGetCommentListFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, CommentErrorReason_GET_COMMENT_LIST_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetCommentUserFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == CommentErrorReason_GET_COMMENT_USER_FAILED.String() && e.Code == 500
}

func ErrorGetCommentUserFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, CommentErrorReason_GET_COMMENT_USER_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetCommentStatisticFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == CommentErrorReason_GET_COMMENT_STATISTIC_FAILED.String() && e.Code == 500
}

func ErrorGetCommentStatisticFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, CommentErrorReason_GET_COMMENT_STATISTIC_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetUserCommentAgreeFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == CommentErrorReason_GET_USER_COMMENT_AGREE_FAILED.String() && e.Code == 500
}

func ErrorGetUserCommentAgreeFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, CommentErrorReason_GET_USER_COMMENT_AGREE_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsCreateDraftFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == CommentErrorReason_CREATE_DRAFT_FAILED.String() && e.Code == 500
}

func ErrorCreateDraftFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, CommentErrorReason_CREATE_DRAFT_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsCreateCommentFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == CommentErrorReason_CREATE_COMMENT_FAILED.String() && e.Code == 500
}

func ErrorCreateCommentFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, CommentErrorReason_CREATE_COMMENT_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsSetRecordFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == CommentErrorReason_SET_RECORD_FAILED.String() && e.Code == 500
}

func ErrorSetRecordFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, CommentErrorReason_SET_RECORD_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsSetAgreeFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == CommentErrorReason_SET_AGREE_FAILED.String() && e.Code == 500
}

func ErrorSetAgreeFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, CommentErrorReason_SET_AGREE_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsCancelAgreeFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == CommentErrorReason_CANCEL_AGREE_FAILED.String() && e.Code == 500
}

func ErrorCancelAgreeFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, CommentErrorReason_CANCEL_AGREE_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsRemoveCommentFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == CommentErrorReason_REMOVE_COMMENT_FAILED.String() && e.Code == 500
}

func ErrorRemoveCommentFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, CommentErrorReason_REMOVE_COMMENT_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsRecordNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == CommentErrorReason_RECORD_NOT_FOUND.String() && e.Code == 500
}

func ErrorRecordNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, CommentErrorReason_RECORD_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}
