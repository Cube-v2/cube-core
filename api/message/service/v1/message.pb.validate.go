// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: message/service/v1/message.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ProfileReviewReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProfileReviewReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileReviewReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProfileReviewReqMultiError, or nil if none found.
func (m *ProfileReviewReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileReviewReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProfileReviewReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProfileReviewReqValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProfileReviewReqValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProfileReviewReqMultiError(errors)
	}

	return nil
}

// ProfileReviewReqMultiError is an error wrapping multiple validation errors
// returned by ProfileReviewReq.ValidateAll() if the designated constraints
// aren't met.
type ProfileReviewReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileReviewReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileReviewReqMultiError) AllErrors() []error { return m }

// ProfileReviewReqValidationError is the validation error returned by
// ProfileReviewReq.Validate if the designated constraints aren't met.
type ProfileReviewReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileReviewReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileReviewReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileReviewReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileReviewReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileReviewReqValidationError) ErrorName() string { return "ProfileReviewReqValidationError" }

// Error satisfies the builtin error interface
func (e ProfileReviewReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileReviewReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileReviewReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileReviewReqValidationError{}

// Validate checks the field values on ProfileReviewReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProfileReviewReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileReviewReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProfileReviewReplyMultiError, or nil if none found.
func (m *ProfileReviewReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileReviewReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ProfileReviewReplyMultiError(errors)
	}

	return nil
}

// ProfileReviewReplyMultiError is an error wrapping multiple validation errors
// returned by ProfileReviewReply.ValidateAll() if the designated constraints
// aren't met.
type ProfileReviewReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileReviewReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileReviewReplyMultiError) AllErrors() []error { return m }

// ProfileReviewReplyValidationError is the validation error returned by
// ProfileReviewReply.Validate if the designated constraints aren't met.
type ProfileReviewReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileReviewReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileReviewReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileReviewReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileReviewReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileReviewReplyValidationError) ErrorName() string {
	return "ProfileReviewReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ProfileReviewReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileReviewReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileReviewReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileReviewReplyValidationError{}

// Validate checks the field values on ProfileReviewReq_PornInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProfileReviewReq_PornInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileReviewReq_PornInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProfileReviewReq_PornInfoMultiError, or nil if none found.
func (m *ProfileReviewReq_PornInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileReviewReq_PornInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HitFlag

	// no validation rules for Label

	// no validation rules for Count

	if len(errors) > 0 {
		return ProfileReviewReq_PornInfoMultiError(errors)
	}

	return nil
}

// ProfileReviewReq_PornInfoMultiError is an error wrapping multiple validation
// errors returned by ProfileReviewReq_PornInfo.ValidateAll() if the
// designated constraints aren't met.
type ProfileReviewReq_PornInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileReviewReq_PornInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileReviewReq_PornInfoMultiError) AllErrors() []error { return m }

// ProfileReviewReq_PornInfoValidationError is the validation error returned by
// ProfileReviewReq_PornInfo.Validate if the designated constraints aren't met.
type ProfileReviewReq_PornInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileReviewReq_PornInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileReviewReq_PornInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileReviewReq_PornInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileReviewReq_PornInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileReviewReq_PornInfoValidationError) ErrorName() string {
	return "ProfileReviewReq_PornInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ProfileReviewReq_PornInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileReviewReq_PornInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileReviewReq_PornInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileReviewReq_PornInfoValidationError{}

// Validate checks the field values on ProfileReviewReq_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProfileReviewReq_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileReviewReq_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProfileReviewReq_DataMultiError, or nil if none found.
func (m *ProfileReviewReq_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileReviewReq_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ForbiddenStatus

	if all {
		switch v := interface{}(m.GetPornInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProfileReviewReq_DataValidationError{
					field:  "PornInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProfileReviewReq_DataValidationError{
					field:  "PornInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPornInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProfileReviewReq_DataValidationError{
				field:  "PornInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Result

	// no validation rules for TraceId

	// no validation rules for Url

	if len(errors) > 0 {
		return ProfileReviewReq_DataMultiError(errors)
	}

	return nil
}

// ProfileReviewReq_DataMultiError is an error wrapping multiple validation
// errors returned by ProfileReviewReq_Data.ValidateAll() if the designated
// constraints aren't met.
type ProfileReviewReq_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileReviewReq_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileReviewReq_DataMultiError) AllErrors() []error { return m }

// ProfileReviewReq_DataValidationError is the validation error returned by
// ProfileReviewReq_Data.Validate if the designated constraints aren't met.
type ProfileReviewReq_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileReviewReq_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileReviewReq_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileReviewReq_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileReviewReq_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileReviewReq_DataValidationError) ErrorName() string {
	return "ProfileReviewReq_DataValidationError"
}

// Error satisfies the builtin error interface
func (e ProfileReviewReq_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileReviewReq_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileReviewReq_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileReviewReq_DataValidationError{}
