// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.3.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type MessageHTTPServer interface {
	ArticleCreateReview(context.Context, *TextReviewReq) (*emptypb.Empty, error)
	ArticleEditReview(context.Context, *TextReviewReq) (*emptypb.Empty, error)
	AvatarReview(context.Context, *AvatarReviewReq) (*emptypb.Empty, error)
	ColumnCreateReview(context.Context, *TextReviewReq) (*emptypb.Empty, error)
	ColumnEditReview(context.Context, *TextReviewReq) (*emptypb.Empty, error)
	ProfileReview(context.Context, *TextReviewReq) (*emptypb.Empty, error)
	TalkCreateReview(context.Context, *TextReviewReq) (*emptypb.Empty, error)
	TalkEditReview(context.Context, *TextReviewReq) (*emptypb.Empty, error)
}

func RegisterMessageHTTPServer(s *http.Server, srv MessageHTTPServer) {
	r := s.Route("/")
	r.POST("/tx/message/avatar/review", _Message_AvatarReview0_HTTP_Handler(srv))
	r.POST("/tx/message/profile/review", _Message_ProfileReview0_HTTP_Handler(srv))
	r.POST("/tx/message/article/create/review", _Message_ArticleCreateReview0_HTTP_Handler(srv))
	r.POST("/tx/message/article/edit/review", _Message_ArticleEditReview0_HTTP_Handler(srv))
	r.POST("/tx/message/talk/create/review", _Message_TalkCreateReview0_HTTP_Handler(srv))
	r.POST("/tx/message/talk/edit/review", _Message_TalkEditReview0_HTTP_Handler(srv))
	r.POST("/tx/message/column/create/review", _Message_ColumnCreateReview0_HTTP_Handler(srv))
	r.POST("/tx/message/column/edit/review", _Message_ColumnEditReview0_HTTP_Handler(srv))
}

func _Message_AvatarReview0_HTTP_Handler(srv MessageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AvatarReviewReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/message.v1.Message/AvatarReview")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AvatarReview(ctx, req.(*AvatarReviewReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Message_ProfileReview0_HTTP_Handler(srv MessageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TextReviewReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/message.v1.Message/ProfileReview")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ProfileReview(ctx, req.(*TextReviewReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Message_ArticleCreateReview0_HTTP_Handler(srv MessageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TextReviewReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/message.v1.Message/ArticleCreateReview")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ArticleCreateReview(ctx, req.(*TextReviewReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Message_ArticleEditReview0_HTTP_Handler(srv MessageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TextReviewReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/message.v1.Message/ArticleEditReview")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ArticleEditReview(ctx, req.(*TextReviewReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Message_TalkCreateReview0_HTTP_Handler(srv MessageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TextReviewReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/message.v1.Message/TalkCreateReview")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TalkCreateReview(ctx, req.(*TextReviewReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Message_TalkEditReview0_HTTP_Handler(srv MessageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TextReviewReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/message.v1.Message/TalkEditReview")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TalkEditReview(ctx, req.(*TextReviewReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Message_ColumnCreateReview0_HTTP_Handler(srv MessageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TextReviewReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/message.v1.Message/ColumnCreateReview")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ColumnCreateReview(ctx, req.(*TextReviewReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Message_ColumnEditReview0_HTTP_Handler(srv MessageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TextReviewReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/message.v1.Message/ColumnEditReview")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ColumnEditReview(ctx, req.(*TextReviewReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type MessageHTTPClient interface {
	ArticleCreateReview(ctx context.Context, req *TextReviewReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	ArticleEditReview(ctx context.Context, req *TextReviewReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	AvatarReview(ctx context.Context, req *AvatarReviewReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	ColumnCreateReview(ctx context.Context, req *TextReviewReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	ColumnEditReview(ctx context.Context, req *TextReviewReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	ProfileReview(ctx context.Context, req *TextReviewReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	TalkCreateReview(ctx context.Context, req *TextReviewReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	TalkEditReview(ctx context.Context, req *TextReviewReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type MessageHTTPClientImpl struct {
	cc *http.Client
}

func NewMessageHTTPClient(client *http.Client) MessageHTTPClient {
	return &MessageHTTPClientImpl{client}
}

func (c *MessageHTTPClientImpl) ArticleCreateReview(ctx context.Context, in *TextReviewReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/tx/message/article/create/review"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/message.v1.Message/ArticleCreateReview"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MessageHTTPClientImpl) ArticleEditReview(ctx context.Context, in *TextReviewReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/tx/message/article/edit/review"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/message.v1.Message/ArticleEditReview"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MessageHTTPClientImpl) AvatarReview(ctx context.Context, in *AvatarReviewReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/tx/message/avatar/review"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/message.v1.Message/AvatarReview"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MessageHTTPClientImpl) ColumnCreateReview(ctx context.Context, in *TextReviewReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/tx/message/column/create/review"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/message.v1.Message/ColumnCreateReview"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MessageHTTPClientImpl) ColumnEditReview(ctx context.Context, in *TextReviewReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/tx/message/column/edit/review"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/message.v1.Message/ColumnEditReview"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MessageHTTPClientImpl) ProfileReview(ctx context.Context, in *TextReviewReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/tx/message/profile/review"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/message.v1.Message/ProfileReview"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MessageHTTPClientImpl) TalkCreateReview(ctx context.Context, in *TextReviewReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/tx/message/talk/create/review"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/message.v1.Message/TalkCreateReview"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MessageHTTPClientImpl) TalkEditReview(ctx context.Context, in *TextReviewReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/tx/message/talk/edit/review"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/message.v1.Message/TalkEditReview"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
