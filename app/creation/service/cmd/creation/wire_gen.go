// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/contrib/registry/nacos/v2"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/the-zion/matrix-core/app/creation/service/internal/biz"
	"github.com/the-zion/matrix-core/app/creation/service/internal/conf"
	"github.com/the-zion/matrix-core/app/creation/service/internal/data"
	"github.com/the-zion/matrix-core/app/creation/service/internal/server"
	"github.com/the-zion/matrix-core/app/creation/service/internal/service"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logLogger log.Logger, registry *nacos.Registry) (*kratos.App, func(), error) {
	db := data.NewDB(confData)
	cmdable := data.NewRedis(confData)
	client := data.NewCosServiceClient(confData)
	elasticSearch := data.NewElasticsearch(confData)
	articleMqPro := data.NewRocketmqArticleProducer(confData)
	articleReviewMqPro := data.NewRocketmqArticleReviewProducer(confData)
	talkMqPro := data.NewRocketmqTalkProducer(confData)
	talkReviewMqPro := data.NewRocketmqTalkReviewProducer(confData)
	columnMqPro := data.NewRocketmqColumnProducer(confData)
	columnReviewMqPro := data.NewRocketmqColumnReviewProducer(confData)
	collectionsReviewMqPro := data.NewRocketmqCollectionsReviewProducer(confData)
	collectionsMqPro := data.NewRocketmqCollectionsProducer(confData)
	achievementMqPro := data.NewRocketmqAchievementProducer(confData)
	news := data.NewNewsClient(confData)
	dataData, cleanup2, err := data.NewData(db, cmdable, client, elasticSearch, articleMqPro, articleReviewMqPro, talkMqPro, talkReviewMqPro, columnMqPro, columnReviewMqPro, collectionsReviewMqPro, collectionsMqPro, achievementMqPro, news)
	if err != nil {
		return nil, nil, err
	}
	articleRepo := data.NewArticleRepo(dataData, logLogger)
	recovery := data.NewRecovery(dataData)
	creationRepo := data.NewCreationRepo(dataData, logLogger)
	transaction := data.NewTransaction(dataData)
	articleUseCase := biz.NewArticleUseCase(articleRepo, recovery, creationRepo, transaction, logLogger)
	talkRepo := data.NewTalkRepo(dataData, logLogger)
	talkUseCase := biz.NewTalkUseCase(talkRepo, recovery, creationRepo, transaction, logLogger)
	columnRepo := data.NewColumnRepo(dataData, logLogger)
	creationUseCase := biz.NewCreationUseCase(creationRepo, articleRepo, talkRepo, columnRepo, transaction, recovery, logLogger)
	columnUseCase := biz.NewColumnUseCase(columnRepo, recovery, creationRepo, transaction, logLogger)
	newsRepo := data.NewNewsRepo(dataData, logLogger)
	newsUseCase := biz.NewNewsUseCase(newsRepo, transaction, logLogger)
	creationService := service.NewCreationService(articleUseCase, talkUseCase, creationUseCase, columnUseCase, newsUseCase, logLogger)
	httpServer := server.NewHTTPServer(confServer, creationService, logLogger)
	grpcServer := server.NewGRPCServer(confServer, creationService, logLogger)
	kratosApp := newApp(registry, httpServer, grpcServer)
	return kratosApp, func() {
		cleanup2()
	}, nil
}
