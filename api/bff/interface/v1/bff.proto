syntax = "proto3";

package bff.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

option go_package = "api/bff/interface/v1;v1";

service Bff{

  rpc GetHealth(google.protobuf.Empty) returns (google.protobuf.Empty){
    option (google.api.http) = {
      get: "/v1/get/health"
    };
  }
  // --------------------user service------------------------

  rpc UserRegister(UserRegisterReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/user/register"
      body: "*"
    };
  }

  rpc LoginByPassword (LoginByPasswordReq) returns (LoginReply) {
    option (google.api.http) = {
      post: "/v1/user/login/password"
      body: "*"
    };
  }

  rpc LoginByCode (LoginByCodeReq) returns (LoginReply) {
    option (google.api.http) = {
      post: "/v1/user/login/code"
      body: "*"
    };
  }

  rpc LoginByWeChat (LoginByWeChatReq) returns (LoginReply) {
    option (google.api.http) = {
      post: "/v1/user/login/wechat"
      body: "*"
    };
  }

  rpc LoginByQQ (LoginByQQReq) returns (LoginReply) {
    option (google.api.http) = {
      post: "/v1/user/login/qq"
      body: "*"
    };
  }

  rpc LoginByGithub (LoginByGithubReq) returns (LoginReply) {
    option (google.api.http) = {
      post: "/v1/user/login/github"
      body: "*"
    };
  }

  rpc LoginByGitee (LoginByGiteeReq) returns (LoginReply) {
    option (google.api.http) = {
      post: "/v1/user/login/gitee"
      body: "*"
    };
  }

  rpc LoginPasswordReset(LoginPasswordResetReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/user/login/password/reset"
      body: "*"
    };
  }

  rpc SendPhoneCode (SendPhoneCodeReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/user/code/phone"
      body: "*"
    };
  }

  rpc SendEmailCode (SendEmailCodeReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/user/code/email"
      body: "*"
    };
  }

  rpc GetCosSessionKey (google.protobuf.Empty) returns (GetCosSessionKeyReply) {
    option (google.api.http) = {
      get: "/v1/get/cos/session/key",
    };
  }

  rpc GetAvatarReview (GetAvatarReviewReq) returns (GetAvatarReviewReply) {
    option (google.api.http) = {
      post: "/v1/get/avatar/review",
      body: "*"
    };
  }

  rpc GetCoverReview (GetCoverReviewReq) returns (GetCoverReviewReply) {
    option (google.api.http) = {
      post: "/v1/get/cover/review",
      body: "*"
    };
  }

  rpc GetAccount (google.protobuf.Empty) returns (GetAccountReply) {
    option (google.api.http) = {
      get: "/v1/get/user/account",
    };
  }

  rpc GetProfile (google.protobuf.Empty) returns (GetProfileReply) {
    option (google.api.http) = {
      get: "/v1/get/user/profile",
    };
  }

  rpc GetProfileList (GetProfileListReq) returns (GetProfileListReply) {
    option (google.api.http) = {
      get: "/v1/get/profile/list",
    };
  }

  rpc GetUserInfo (google.protobuf.Empty) returns (GetUserInfoReply) {
    option (google.api.http) = {
      get: "/v1/get/user/info",
    };
  }

  rpc GetUserInfoVisitor (GetUserInfoVisitorReq) returns (GetUserInfoReply) {
    option (google.api.http) = {
      get: "/v1/get/user/info/visitor",
    };
  }

  rpc GetUserFollow (GetUserFollowReq) returns (GetUserFollowReply) {
    option (google.api.http) = {
      post: "/v1/get/user/follow",
      body: "*"
    };
  }

  rpc GetUserFollows (google.protobuf.Empty) returns (GetUserFollowsReply) {
    option (google.api.http) = {
      get: "/v1/get/user/follows",
    };
  }

  rpc GetTimeLineUsers (google.protobuf.Empty) returns (GetTimeLineUsersReply) {
    option (google.api.http) = {
      get: "/v1/get/timeline/user",
    };
  }

  rpc GetFollowList (GetFollowListReq) returns (GetFollowListReply) {
    option (google.api.http) = {
      get: "/v1/get/follow/list",
    };
  }

  rpc GetFollowListCount (GetFollowListCountReq) returns (GetFollowListCountReply) {
    option (google.api.http) = {
      get: "/v1/get/follow/list/count",
    };
  }

  rpc GetFollowedList (GetFollowedListReq) returns (GetFollowedListReply) {
    option (google.api.http) = {
      get: "/v1/get/followed/list",
    };
  }

  rpc GetFollowedListCount (GetFollowedListCountReq) returns (GetFollowedListCountReply) {
    option (google.api.http) = {
      get: "/v1/get/followed/list/count",
    };
  }

  rpc GetProfileUpdate (google.protobuf.Empty) returns (GetProfileUpdateReply) {
    option (google.api.http) = {
      get: "/v1/get/user/profile/update",
    };
  }

  rpc GetUserSearch(GetUserSearchReq)returns (GetUserSearchReply){
    option (google.api.http) = {
      get: "/v1/get/user/search"
    };
  }

  rpc SetProfileUpdate (SetProfileUpdateReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/set/user/profile/update"
      body: "*"
    };
  }

  rpc SetUserPhone (SetUserPhoneReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/set/user/phone"
      body: "*"
    };
  }

  rpc SetUserEmail (SetUserEmailReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/set/user/email"
      body: "*"
    };
  }

  rpc SetUserPassword (SetUserPasswordReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/set/user/password"
      body: "*"
    };
  }

  rpc SetUserWechat (SetUserWechatReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/set/user/wechat"
      body: "*"
    };
  }

  rpc SetUserQQ (SetUserQQReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/set/user/qq"
      body: "*"
    };
  }

  rpc SetUserGitee (SetUserGiteeReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/set/user/gitee"
      body: "*"
    };
  }

  rpc SetUserGithub (SetUserGithubReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/set/user/github"
      body: "*"
    };
  }

  rpc SetUserFollow (SetUserFollowReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/set/user/follow"
      body: "*"
    };
  }

  rpc CancelUserFollow (CancelUserFollowReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/cancel/user/follow"
      body: "*"
    };
  }

  rpc ChangeUserPassword (ChangeUserPasswordReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/change/user/password"
      body: "*"
    };
  }

  rpc UnbindUserPhone(UnbindUserAccountReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/unbind/user/phone"
      body: "*"
    };
  }

  rpc UnbindUserEmail(UnbindUserAccountReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/unbind/user/email"
      body: "*"
    };
  }

  rpc UnbindUserWechat(UnbindUserAccountReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/unbind/user/wechat"
      body: "*"
    };
  }

  rpc UnbindUserQQ(UnbindUserAccountReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/unbind/user/qq"
      body: "*"
    };
  }

  rpc UnbindUserGitee(UnbindUserAccountReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/unbind/user/gitee"
      body: "*"
    };
  }

  rpc UnbindUserGithub(UnbindUserAccountReq) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/unbind/user/github"
      body: "*"
    };
  }

  // -------------------------creation----------------------------
  rpc GetLeaderBoard(google.protobuf.Empty) returns (GetLeaderBoardReply){
    option (google.api.http) = {
      get: "/v1/get/leaderboard"
    };
  }

  rpc GetCollectArticleList(GetCollectArticleListReq) returns (GetArticleListReply){
    option (google.api.http) = {
      get: "/v1/get/collect/article/list"
    };
  }

  rpc GetCollectArticleCount(GetCollectArticleCountReq) returns (GetCollectArticleCountReply){
    option (google.api.http) = {
      get: "/v1/get/collect/article/count"
    };
  }

  rpc GetCollectTalkList(GetCollectTalkListReq) returns (GetTalkListReply){
    option (google.api.http) = {
      get: "/v1/get/collect/talk/list"
    };
  }

  rpc GetCollectTalkCount(GetCollectTalkCountReq) returns (GetCollectTalkCountReply){
    option (google.api.http) = {
      get: "/v1/get/collect/talk/count"
    };
  }

  rpc GetCollectColumnList(GetCollectColumnListReq) returns (GetColumnListReply){
    option (google.api.http) = {
      get: "/v1/get/collect/column/list"
    };
  }

  rpc GetCollectColumnCount(GetCollectColumnCountReq) returns (GetCollectColumnCountReply){
    option (google.api.http) = {
      get: "/v1/get/collect/column/count"
    };
  }

  rpc GetCollections(GetCollectionsReq) returns (GetCollectionsReply){
    option (google.api.http) = {
      get: "/v1/get/collections"
    };
  }

  rpc GetCollectionsList(GetCollectionsListReq) returns (GetCollectionsListReply){
    option (google.api.http) = {
      post: "/v1/get/collections/list"
      body: "*"
    };
  }

  rpc GetCollectionsListAll(google.protobuf.Empty) returns (GetCollectionsListReply){
    option (google.api.http) = {
      get: "/v1/get/collections/list/all"
    };
  }

  rpc GetCollectionsCount(google.protobuf.Empty) returns (GetCollectionsCountReply){
    option (google.api.http) = {
      post: "/v1/get/collections/count"
      body: "*"
    };
  }

  rpc GetCollectionsListByVisitor(GetCollectionsListByVisitorReq) returns (GetCollectionsListReply){
    option (google.api.http) = {
      get: "/v1/get/collections/list/visitor"
    };
  }

  rpc GetCollectionsVisitorCount(GetCollectionsVisitorCountReq) returns (GetCollectionsCountReply){
    option (google.api.http) = {
      get: "/v1/get/collections/visitor/count"
    };
  }

  rpc GetLastCollectionsDraft(google.protobuf.Empty) returns (GetLastCollectionsDraftReply){
    option (google.api.http) = {
      get: "/v1/get/last/collections/draft"
    };
  }

  rpc GetCollectionsContentReview (GetCollectionsContentReviewReq) returns (GetCollectionsContentReviewReply) {
    option (google.api.http) = {
      post: "/v1/get/collections/content/review",
      body: "*"
    };
  }

  rpc GetUserTimeLineListVisitor(GetUserTimeLineListReq) returns (GetUserTimeLineListReply){
    option (google.api.http) = {
      get: "/v1/get/user/timeline/list/visitor"
    };
  }

  rpc CreateCollectionsDraft(google.protobuf.Empty) returns (CreateCollectionsDraftReply){
    option (google.api.http) = {
      post: "/v1/create/collections/draft"
      body: "*"
    };
  }

  rpc SendCollections(SendCollectionsReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/send/collections"
      body: "*"
    };
  }

  rpc SendCollectionsEdit(SendCollectionsEditReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/send/collections/edit"
      body: "*"
    };
  }

  rpc DeleteCollections(DeleteCollectionsReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/delete/collections"
      body: "*"
    };
  }

  // -------------------------article----------------------------

  rpc GetArticleList(GetArticleListReq) returns (GetArticleListReply){
    option (google.api.http) = {
      get: "/v1/get/article/list"
    };
  }

  rpc GetArticleListHot(GetArticleListHotReq) returns (GetArticleListHotReply){
    option (google.api.http) = {
      get: "/v1/get/article/list/hot"
    };
  }

  rpc GetColumnArticleList(GetColumnArticleListReq) returns (GetArticleListReply){
    option (google.api.http) = {
      get: "/v1/get/column/article/list"
    };
  }

  rpc GetArticleCount(google.protobuf.Empty) returns (GetArticleCountReply){
    option (google.api.http) = {
      post: "/v1/get/article/count"
      body: "*"
    };
  }

  rpc GetArticleCountVisitor(GetArticleCountVisitorReq) returns (GetArticleCountReply){
    option (google.api.http) = {
      get: "/v1/get/article/count/visitor"
    };
  }

  rpc GetUserArticleList(GetUserArticleListReq) returns (GetArticleListReply){
    option (google.api.http) = {
      post: "/v1/get/user/article/list",
      body: "*"
    };
  }

  rpc GetUserArticleListSimple(GetUserArticleListSimpleReq) returns (GetArticleListReply){
    option (google.api.http) = {
      post: "/v1/get/user/article/list/simple",
      body: "*"
    };
  }

  rpc GetUserArticleListVisitor(GetUserArticleListVisitorReq) returns (GetArticleListReply){
    option (google.api.http) = {
      get: "/v1/get/user/article/list/visitor"
    };
  }

  rpc GetUserArticleListAll(google.protobuf.Empty) returns (GetArticleListReply){
    option (google.api.http) = {
      get: "/v1/get/user/article/list/all"
    };
  }

  rpc GetArticleStatistic(GetArticleStatisticReq)returns (GetArticleStatisticReply){
    option (google.api.http) = {
      get: "/v1/get/article/statistic"
    };
  }

  rpc GetUserArticleAgree(google.protobuf.Empty)returns (GetUserArticleAgreeReply){
    option (google.api.http) = {
      get: "/v1/get/user/article/agree"
    };
  }

  rpc GetUserArticleCollect(google.protobuf.Empty)returns (GetUserArticleCollectReply){
    option (google.api.http) = {
      get: "/v1/get/user/article/collect"
    };
  }

  rpc GetArticleListStatistic(GetArticleListStatisticReq)returns (GetArticleListStatisticReply){
    option (google.api.http) = {
      get: "/v1/get/article/list/statistic"
    };
  }


  rpc GetLastArticleDraft(google.protobuf.Empty) returns (GetLastArticleDraftReply){
    option (google.api.http) = {
      get: "/v1/get/last/article/draft"
    };
  }


  rpc GetArticleSearch(GetArticleSearchReq)returns (GetArticleSearchReply){
    option (google.api.http) = {
      get: "/v1/get/article/search"
    };
  }

  rpc GetArticleImageReview (GetArticleImageReviewReq) returns (GetArticleImageReviewReply) {
    option (google.api.http) = {
      post: "/v1/get/article/image/review",
      body: "*"
    };
  }

  rpc GetArticleContentReview (GetArticleContentReviewReq) returns (GetArticleContentReviewReply) {
    option (google.api.http) = {
      post: "/v1/get/article/content/review",
      body: "*"
    };
  }

  rpc CreateArticleDraft(google.protobuf.Empty) returns (CreateArticleDraftReply){
    option (google.api.http) = {
      post: "/v1/create/article/draft"
      body: "*"
    };
  }

  rpc ArticleDraftMark(ArticleDraftMarkReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/article/draft/mark"
      body: "*"
    };
  }

  rpc GetArticleDraftList(google.protobuf.Empty) returns (GetArticleDraftListReply){
    option (google.api.http) = {
      get: "/v1/get/article/draft/list"
    };
  }

  rpc SendArticle(SendArticleReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/send/article"
      body: "*"
    };
  }

  rpc SendArticleEdit(SendArticleEditReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/send/article/edit"
      body: "*"
    };
  }

  rpc DeleteArticle(DeleteArticleReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/delete/article"
      body: "*"
    };
  }

  rpc DeleteArticleDraft(DeleteArticleDraftReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/delete/article/draft"
      body: "*"
    };
  }

  rpc SetArticleAgree(SetArticleAgreeReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/set/article/agree"
      body: "*"
    };
  }

  rpc SetArticleView(SetArticleViewReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/set/article/view"
      body: "*"
    };
  }

  rpc SetArticleCollect(SetArticleCollectReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/set/article/collect"
      body: "*"
    };
  }

  rpc CancelArticleAgree(CancelArticleAgreeReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/cancel/article/agree"
      body: "*"
    };
  }

  rpc CancelArticleCollect(CancelArticleCollectReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/cancel/article/collect"
      body: "*"
    };
  }

  rpc ArticleStatisticJudge(ArticleStatisticJudgeReq) returns (ArticleStatisticJudgeReply){
    option (google.api.http) = {
      post: "/v1/article/statistic/judge"
      body: "*"
    };
  }

  // -------------------------talk----------------------------

  rpc GetTalkList(GetTalkListReq) returns (GetTalkListReply){
    option (google.api.http) = {
      get: "/v1/get/talk/list"
    };
  }

  rpc GetTalkListHot(GetTalkListHotReq) returns (GetTalkListHotReply){
    option (google.api.http) = {
      get: "/v1/get/talk/list/hot"
    };
  }

  rpc GetTalkListStatistic(GetTalkListStatisticReq)returns (GetTalkListStatisticReply){
    option (google.api.http) = {
      get: "/v1/get/talk/list/statistic"
    };
  }

  rpc GetUserTalkList(GetUserTalkListReq) returns (GetTalkListReply){
    option (google.api.http) = {
      post: "/v1/get/user/talk/list",
      body: "*"
    };
  }

  rpc GetUserTalkListSimple(GetUserTalkListSimpleReq) returns (GetTalkListReply){
    option (google.api.http) = {
      post: "/v1/get/user/talk/list/simple",
      body: "*"
    };
  }

  rpc GetUserTalkListVisitor(GetUserTalkListVisitorReq) returns (GetTalkListReply){
    option (google.api.http) = {
      get: "/v1/get/user/talk/list/visitor"
    };
  }

  rpc GetTalkCount(google.protobuf.Empty) returns (GetTalkCountReply){
    option (google.api.http) = {
      post: "/v1/get/talk/count"
      body: "*"
    };
  }

  rpc GetTalkCountVisitor(GetTalkCountVisitorReq) returns (GetTalkCountReply){
    option (google.api.http) = {
      get: "/v1/get/talk/count/visitor"
    };
  }

  rpc GetTalkStatistic(GetTalkStatisticReq)returns (GetTalkStatisticReply){
    option (google.api.http) = {
      get: "/v1/get/talk/statistic"
    };
  }

  rpc GetLastTalkDraft(google.protobuf.Empty) returns (GetLastTalkDraftReply){
    option (google.api.http) = {
      get: "/v1/get/last/talk/draft"
    };
  }

  rpc GetTalkSearch(GetTalkSearchReq)returns (GetTalkSearchReply){
    option (google.api.http) = {
      get: "/v1/get/talk/search"
    };
  }

  rpc GetUserTalkAgree(google.protobuf.Empty)returns (GetUserTalkAgreeReply){
    option (google.api.http) = {
      get: "/v1/get/user/talk/agree"
    };
  }

  rpc GetUserTalkCollect(google.protobuf.Empty)returns (GetUserTalkCollectReply){
    option (google.api.http) = {
      get: "/v1/get/user/talk/collect"
    };
  }

  rpc GetTalkImageReview (GetTalkImageReviewReq) returns (GetTalkImageReviewReply) {
    option (google.api.http) = {
      post: "/v1/get/talk/image/review",
      body: "*"
    };
  }

  rpc GetTalkContentReview (GetTalkContentReviewReq) returns (GetTalkContentReviewReply) {
    option (google.api.http) = {
      post: "/v1/get/talk/content/review",
      body: "*"
    };
  }

  rpc CreateTalkDraft(google.protobuf.Empty) returns (CreateTalkDraftReply){
    option (google.api.http) = {
      post: "/v1/create/talk/draft"
      body: "*"
    };
  }

  rpc SendTalk(SendTalkReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/send/talk"
      body: "*"
    };
  }

  rpc SendTalkEdit(SendTalkEditReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/send/talk/edit"
      body: "*"
    };
  }

  rpc DeleteTalk(DeleteTalkReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/delete/talk"
      body: "*"
    };
  }

  rpc SetTalkView(SetTalkViewReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/set/talk/view"
      body: "*"
    };
  }

  rpc TalkStatisticJudge(TalkStatisticJudgeReq) returns (TalkStatisticJudgeReply){
    option (google.api.http) = {
      post: "/v1/talk/statistic/judge"
      body: "*"
    };
  }

  rpc SetTalkAgree(SetTalkAgreeReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/set/talk/agree"
      body: "*"
    };
  }

  rpc SetTalkCollect(SetTalkCollectReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/set/talk/collect"
      body: "*"
    };
  }

  rpc CancelTalkAgree(CancelTalkAgreeReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/cancel/talk/agree"
      body: "*"
    };
  }

  rpc CancelTalkCollect(CancelTalkCollectReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/cancel/talk/collect"
      body: "*"
    };
  }

  // -------------------------column----------------------------

  rpc GetLastColumnDraft(google.protobuf.Empty) returns (GetLastColumnDraftReply){
    option (google.api.http) = {
      get: "/v1/get/last/column/draft"
    };
  }

  rpc CreateColumnDraft(google.protobuf.Empty) returns (CreateColumnDraftReply){
    option (google.api.http) = {
      post: "/v1/create/column/draft"
      body: "*"
    };
  }

  rpc SubscribeColumn(SubscribeColumnReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/subscribe/column"
      body: "*"
    };
  }

  rpc CancelSubscribeColumn(CancelSubscribeColumnReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/cancel/subscribe/column"
      body: "*"
    };
  }

  rpc SubscribeJudge(SubscribeJudgeReq) returns (SubscribeJudgeReply){
    option (google.api.http) = {
      post: "/v1/subscribe/column/judge"
      body: "*"
    };
  }

  rpc SendColumn(SendColumnReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/send/column"
      body: "*"
    };
  }

  rpc GetSubscribeList(GetSubscribeListReq) returns (GetSubscribeListReply){
    option (google.api.http) = {
      post: "/v1/get/subscribe/list",
      body: "*"
    };
  }

  rpc GetSubscribeListCount(GetSubscribeListCountReq) returns (GetSubscribeListCountReply){
    option (google.api.http) = {
      get: "/v1/get/subscribe/list/count"
    };
  }

  rpc GetColumnSubscribes(GetColumnSubscribesReq) returns (GetColumnSubscribesReply){
    option (google.api.http) = {
      post: "/v1/get/column/subscribes"
      body: "*"
    };
  }

  rpc GetColumnList(GetColumnListReq) returns (GetColumnListReply){
    option (google.api.http) = {
      get: "/v1/get/column/list"
    };
  }

  rpc GetColumnListHot(GetColumnListHotReq) returns (GetColumnListHotReply){
    option (google.api.http) = {
      get: "/v1/get/column/list/hot"
    };
  }

  rpc GetColumnListStatistic(GetColumnListStatisticReq)returns (GetColumnListStatisticReply){
    option (google.api.http) = {
      get: "/v1/get/column/list/statistic"
    };
  }

  rpc GetUserColumnList(GetUserColumnListReq) returns (GetColumnListReply){
    option (google.api.http) = {
      post: "/v1/get/user/column/list",
      body: "*"
    };
  }

  rpc GetUserColumnListSimple(GetUserColumnListSimpleReq) returns (GetColumnListReply){
    option (google.api.http) = {
      post: "/v1/get/user/column/list/simple",
      body: "*"
    };
  }

  rpc GetUserColumnListVisitor(GetUserColumnListVisitorReq) returns (GetColumnListReply){
    option (google.api.http) = {
      get: "/v1/get/user/column/list/visitor"
    };
  }

  rpc GetColumnCount(google.protobuf.Empty) returns (GetColumnCountReply){
    option (google.api.http) = {
      post: "/v1/get/column/count"
      body: "*"
    };
  }

  rpc GetColumnCountVisitor(GetColumnCountVisitorReq) returns (GetColumnCountReply){
    option (google.api.http) = {
      get: "/v1/get/column/count/visitor"
    };
  }

  rpc GetColumnSearch(GetColumnSearchReq)returns (GetColumnSearchReply){
    option (google.api.http) = {
      get: "/v1/get/column/search"
    };
  }

  rpc SendColumnEdit(SendColumnEditReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/send/column/edit"
      body: "*"
    };
  }

  rpc DeleteColumn(DeleteColumnReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/delete/column"
      body: "*"
    };
  }

  rpc GetColumnStatistic(GetColumnStatisticReq)returns (GetColumnStatisticReply){
    option (google.api.http) = {
      get: "/v1/get/column/statistic"
    };
  }

  rpc GetUserColumnAgree(google.protobuf.Empty)returns (GetUserColumnAgreeReply){
    option (google.api.http) = {
      get: "/v1/get/user/column/agree"
    };
  }

  rpc GetUserColumnCollect(google.protobuf.Empty)returns (GetUserColumnCollectReply){
    option (google.api.http) = {
      get: "/v1/get/user/column/collect"
    };
  }

  rpc GetUserSubscribeColumn(google.protobuf.Empty)returns (GetUserSubscribeColumnReply){
    option (google.api.http) = {
      get: "/v1/get/user/subscribe/column"
    };
  }

  rpc GetColumnImageReview (GetColumnImageReviewReq) returns (GetColumnImageReviewReply) {
    option (google.api.http) = {
      post: "/v1/get/column/image/review",
      body: "*"
    };
  }

  rpc GetColumnContentReview (GetColumnContentReviewReq) returns (GetColumnContentReviewReply) {
    option (google.api.http) = {
      post: "/v1/get/column/content/review",
      body: "*"
    };
  }

  rpc ColumnStatisticJudge(ColumnStatisticJudgeReq) returns (ColumnStatisticJudgeReply){
    option (google.api.http) = {
      post: "/v1/column/statistic/judge"
      body: "*"
    };
  }

  rpc SetColumnAgree(SetColumnAgreeReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/set/column/agree"
      body: "*"
    };
  }

  rpc CancelColumnAgree(CancelColumnAgreeReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/cancel/column/agree"
      body: "*"
    };
  }

  rpc SetColumnCollect(SetColumnCollectReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/set/column/collect"
      body: "*"
    };
  }

  rpc CancelColumnCollect(CancelColumnCollectReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/cancel/column/collect"
      body: "*"
    };
  }

  rpc SetColumnView(SetColumnViewReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/set/column/view"
      body: "*"
    };
  }

  rpc AddColumnIncludes(AddColumnIncludesReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/add/column/includes"
      body: "*"
    };
  }

  rpc DeleteColumnIncludes(DeleteColumnIncludesReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/delete/column/includes"
      body: "*"
    };
  }

  // -------------------------news----------------------------

  rpc GetNews(GetNewsReq) returns (GetNewsReply){
    option (google.api.http) = {
      get: "/v1/get/news"
    };
  }

  rpc GetNewsSearch(GetNewsSearchReq)returns (GetNewsSearchReply){
    option (google.api.http) = {
      get: "/v1/get/news/search"
    };
  }

  // --------------------achievement service------------------------

  rpc GetAchievementList(GetAchievementListReq) returns (GetAchievementListReply){
    option (google.api.http) = {
      get: "/v1/get/achievement/list"
    };
  }

  rpc GetUserAchievement(GetUserAchievementReq) returns (GetUserAchievementReply){
    option (google.api.http) = {
      get: "/v1/get/user/achievement"
    };
  }

  rpc GetUserMedal(GetUserMedalReq) returns (GetUserMedalReply){
    option (google.api.http) = {
      get: "/v1/get/user/medal"
    };
  }

  rpc AccessUserMedal(AccessUserMedalReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/access/user/medal",
      body: "*"
    };
  }

  rpc GetUserMedalProgress(google.protobuf.Empty) returns (GetUserMedalProgressReply){
    option (google.api.http) = {
      get: "/v1/get/user/medal/progress"
    };
  }

  rpc SetUserMedal(SetUserMedalReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/set/user/medal"
      body: "*"
    };
  }

  rpc CancelUserMedalSet(CancelUserMedalSetReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/cancel/user/medal/set"
      body: "*"
    };
  }

  // --------------------comment service------------------------

  rpc GetLastCommentDraft(google.protobuf.Empty) returns (GetLastCommentDraftReply){
    option (google.api.http) = {
      get: "/v1/get/last/comment/draft"
    };
  }

  rpc GetUserCommentAgree(google.protobuf.Empty) returns (GetUserCommentAgreeReply){
    option (google.api.http) = {
      get: "/v1/get/user/comment/agree"
    };
  }

  rpc GetCommentUser(google.protobuf.Empty) returns (GetCommentUserReply){
    option (google.api.http) = {
      get: "/v1/get/comment/user"
    };
  }

  rpc GetCommentList(GetCommentListReq) returns (GetCommentListReply){
    option (google.api.http) = {
      get: "/v1/get/comment/list"
    };
  }

  rpc GetSubCommentList(GetSubCommentListReq) returns (GetSubCommentListReply){
    option (google.api.http) = {
      get: "/v1/get/subcomment/list"
    };
  }

  rpc GetCommentListHot(GetCommentListReq) returns (GetCommentListReply){
    option (google.api.http) = {
      get: "/v1/get/comment/list/hot"
    };
  }

  rpc GetUserCommentArticleReplyList(GetUserCommentArticleReplyListReq) returns (GetUserCommentArticleReplyListReply){
    option (google.api.http) = {
      post: "/v1/get/user/comment/article/reply/list",
      body: "*"
    };
  }

  rpc GetUserSubCommentArticleReplyList(GetUserSubCommentArticleReplyListReq) returns (GetUserSubCommentArticleReplyListReply){
    option (google.api.http) = {
      post: "/v1/get/user/subcomment/article/reply/list",
      body: "*"
    };
  }

  rpc GetUserCommentTalkReplyList(GetUserCommentTalkReplyListReq) returns (GetUserCommentTalkReplyListReply){
    option (google.api.http) = {
      post: "/v1/get/user/comment/talk/reply/list",
      body: "*"
    };
  }

  rpc GetUserSubCommentTalkReplyList(GetUserSubCommentTalkReplyListReq) returns (GetUserSubCommentTalkReplyListReply){
    option (google.api.http) = {
      post: "/v1/get/user/subcomment/talk/reply/list",
      body: "*"
    };
  }

  rpc GetUserCommentArticleRepliedList(GetUserCommentArticleRepliedListReq) returns (GetUserCommentArticleRepliedListReply){
    option (google.api.http) = {
      post: "/v1/get/user/comment/article/replied/list",
      body: "*"
    };
  }

  rpc GetUserSubCommentArticleRepliedList(GetUserSubCommentArticleRepliedListReq) returns (GetUserSubCommentArticleRepliedListReply){
    option (google.api.http) = {
      post: "/v1/get/user/subcomment/article/replied/list",
      body: "*"
    };
  }

  rpc GetUserCommentTalkRepliedList(GetUserCommentTalkRepliedListReq) returns (GetUserCommentTalkRepliedListReply){
    option (google.api.http) = {
      post: "/v1/get/user/comment/talk/replied/list",
      body: "*"
    };
  }

  rpc GetUserSubCommentTalkRepliedList(GetUserSubCommentTalkRepliedListReq) returns (GetUserSubCommentTalkRepliedListReply){
    option (google.api.http) = {
      post: "/v1/get/user/subcomment/talk/replied/list",
      body: "*"
    };
  }

  rpc GetUserCommentRepliedList(GetUserCommentRepliedListReq) returns (GetUserCommentRepliedListReply){
    option (google.api.http) = {
      post: "/v1/get/user/comment/replied/list",
      body: "*"
    };
  }

  rpc GetUserSubCommentRepliedList(GetUserSubCommentRepliedListReq) returns (GetUserSubCommentRepliedListReply){
    option (google.api.http) = {
      post: "/v1/get/user/subcomment/replied/list",
      body: "*"
    };
  }

  rpc GetCommentContentReview (GetCommentContentReviewReq) returns (GetCommentContentReviewReply) {
    option (google.api.http) = {
      post: "/v1/get/comment/content/review",
      body: "*"
    };
  }

  rpc CreateCommentDraft(google.protobuf.Empty) returns (CreateCommentDraftReply){
    option (google.api.http) = {
      post: "/v1/create/comment/draft"
      body: "*"
    };
  }

  rpc SendComment(SendCommentReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/send/comment"
      body: "*"
    };
  }

  rpc SendSubComment(SendSubCommentReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/send/subcomment"
      body: "*"
    };
  }

  rpc RemoveComment(RemoveCommentReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/remove/comment"
      body: "*"
    };
  }

  rpc RemoveSubComment(RemoveSubCommentReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/remove/subcomment"
      body: "*"
    };
  }

  rpc SetCommentAgree(SetCommentAgreeReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/set/comment/agree"
      body: "*"
    };
  }

  rpc SetSubCommentAgree(SetSubCommentAgreeReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/set/subcomment/agree"
      body: "*"
    };
  }

  rpc CancelCommentAgree(CancelCommentAgreeReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/cancel/comment/agree"
      body: "*"
    };
  }

  rpc CancelSubCommentAgree(CancelSubCommentAgreeReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/cancel/subcomment/agree"
      body: "*"
    };
  }

  // --------------------message service------------------------

  rpc GetMessageNotification(google.protobuf.Empty) returns (GetMessageNotificationReply){
    option (google.api.http) = {
      get: "/v1/get/message/notification"
    };
  }

  rpc GetMessageSystemNotification(GetMessageSystemNotificationReq) returns (GetMessageSystemNotificationReply){
    option (google.api.http) = {
      post: "/v1/get/message/system/notification"
      body: "*"
    };
  }

  rpc GetMailBoxLastTime(google.protobuf.Empty) returns (GetMailBoxLastTimeReply){
    option (google.api.http) = {
      get: "/v1/get/mailbox/last/time"
    };
  }

  rpc SetMailBoxLastTime(SetMailBoxLastTimeReq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/set/mailbox/last/time"
      body: "*"
    };
  }

  rpc RemoveMailBoxCommentCount(google.protobuf.Empty) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/remove/mailbox/comment/count"
      body: "*"
    };
  }

  rpc RemoveMailBoxSubCommentCount(google.protobuf.Empty) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/remove/mailbox/subcomment/count"
      body: "*"
    };
  }

  rpc RemoveMailBoxSystemNotificationCount(google.protobuf.Empty) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/v1/remove/mailbox/system/notification"
      body: "*"
    };
  }
}

// --------------------user service-------------------------

message UserRegisterReq{
  string email = 1;
  string password = 2;
  string code = 3;
}

message LoginByPasswordReq {
  string account = 1;
  string password = 2;
  string mode = 3;
}

message LoginByCodeReq {
  string phone = 1;
  string code = 2;
}

message LoginByWeChatReq{
  string code = 1;
}

message LoginByQQReq{
  string code = 1;
}

message LoginByGithubReq{
  string code = 1;
}

message LoginByGiteeReq{
  string code = 1;
}

message LoginReply {
  string token = 1;
}

message LoginPasswordResetReq{
  string account = 1;
  string code = 2;
  string password = 3;
  string mode = 4;
}

message SendPhoneCodeReq{
  string phone = 1;
  string template = 2;
}

message SendEmailCodeReq{
  string email = 1;
  string template = 2;
}

message GetCosSessionKeyReply{
  string tmp_secret_id = 1;
  string tmp_secret_key = 2;
  string session_token = 3;
  int64 start_time = 4;
  int64 expired_time = 5;
}

message GetAvatarReviewReq{
  int32 page = 1;
}

message GetAvatarReviewReply{
  message Review {
    int32 id = 1;
    string uuid = 2;
    string create_at = 3;
    string job_id = 4;
    string url = 5;
    string label = 6;
    int32 result = 7;
    int32 score = 8;
    string category = 9;
    string subLabel = 10;
  }
  repeated Review review = 1;
}

message GetCoverReviewReq{
  int32 page = 1;
}

message GetCoverReviewReply{
  message Review {
    int32 id = 1;
    string uuid = 2;
    string create_at = 3;
    string job_id = 4;
    string url = 5;
    string label = 6;
    int32 result = 7;
    int32 score = 8;
    string category = 9;
    string subLabel = 10;
  }
  repeated Review review = 1;
}

message GetAccountReply{
  string phone = 1;
  string email = 2;
  string qq = 3;
  string wechat = 4;
  int32 gitee = 5;
  int32 github = 6;
  string password = 7;
}

message GetProfileReply{
  string uuid = 1;
  string username = 2;
  string avatar = 3;
  string school = 4;
  string company = 5;
  string job = 6;
  string homepage = 7;
  string introduce = 8;
  string github = 9;
  string gitee = 10;
}

message GetProfileListReq{
  repeated string uuids = 1;
}

message GetProfileListReply{
  message Profile{
    string uuid = 1;
    string username = 2;
    string introduce = 3;
  }
  repeated Profile profile = 1;
}

message GetUserInfoVisitorReq{
  string uuid = 1;
}

message GetUserInfoReply{
  string username = 1;
  string avatar = 2;
  string school = 3;
  string company = 4;
  string job = 5;
  string homepage = 6;
  string github = 7;
  string gitee = 8;
  string introduce = 9;
  string created = 10;
  int32 score = 11;
  int32 agree = 12;
  int32 collect = 13;
  int32 view = 14;
  int32 follow = 15;
  int32 followed = 16;
  int32 article = 17;
  int32 column = 18;
  int32 talk = 19;
  int32 collections = 20;
  int32 subscribe = 21;
}

message GetUserFollowReq{
  string uuid = 1;
}

message GetUserFollowReply{
  bool follow = 1;
}

message GetColumnSubscribesReq{
  repeated int32 ids = 1;
}

message GetColumnSubscribesReply{
  message Subscribes{
    int32 id = 1;
    int32 subscribe_judge = 2;
  }
  repeated Subscribes subscribes = 1;
}

message GetFollowListReq{
  int32 page = 1;
  string uuid = 2;
}

message GetFollowListReply{
  message Follow{
    string uuid = 1;
    string username = 2;
    string introduce = 3;
    int32 agree = 4;
    int32 view = 5;
    int32 follow = 6;
    int32 followed = 7;
  }
  repeated Follow follow = 1;
}

message GetFollowListCountReq{
  string uuid = 1;
}

message GetFollowListCountReply{
  int32 count = 1;
}

message GetFollowedListReq{
  int32 page = 1;
  string uuid = 2;
}

message GetFollowedListReply{
  message Follow{
    string uuid = 1;
    string username = 2;
    string introduce = 3;
    int32 agree = 4;
    int32 view = 5;
    int32 follow = 6;
    int32 followed = 7;
  }
  repeated Follow follow = 1;
}

message GetFollowedListCountReq{
  string uuid = 1;
}

message GetFollowedListCountReply{
  int32 count = 1;
}

message GetProfileUpdateReply{
  string username = 1;
  string avatar = 2;
  string school = 3;
  string company = 4;
  string job = 5;
  string homepage = 6;
  string introduce = 7;
  string github = 8;
  string gitee = 9;
  int32 status = 10;
}

message GetUserSearchReq{
  int32 page = 1;
  string search = 2;
}

message GetUserSearchReply{
  message List{
    string uuid = 1;
    string username = 2;
    string introduce = 3;
    int32 agree = 4;
    int32 view = 5;
    int32 follow = 6;
    int32 followed = 7;
  }
  repeated List list = 1;
  int32 total = 2;
}

message SetProfileUpdateReq{
  string username = 1;
  string school = 2;
  string company = 3;
  string job = 4;
  string homepage = 5;
  string github = 6;
  string gitee = 7;
  string introduce = 8;
}

message SetUserPhoneReq{
  string phone = 1;
  string code = 2;
}

message SetUserEmailReq{
  string email = 1;
  string code = 2;
}

message SetUserPasswordReq{
  string password = 1;
}

message SetUserWechatReq{
  string code = 1;
  string redirect_url = 2;
}

message SetUserQQReq{
  string code = 1;
  string redirect_url = 2;
}

message SetUserGiteeReq{
  string code = 1;
  string redirect_url = 2;
}

message SetUserGithubReq{
  string code = 1;
  string redirect_url = 2;
}

message SetUserFollowReq{
  string uuid = 1;
}

message CancelUserFollowReq{
  string uuid = 1;
}

message ChangeUserPasswordReq{
  string oldpassword = 1;
  string password = 2;
}

message UnbindUserAccountReq{
  string phone = 1;
  string email = 2;
  string account = 3;
  string password = 4;
  string code = 5;
  string choose = 6;
  string mode = 7;
  string redirect_uri = 8;
}

// --------------------creation service-------------------------

message GetLeaderBoardReply{
  message Board{
    int32 id = 1;
    string uuid = 2;
    string mode = 3;
  }
  repeated Board board = 1;
}

message GetCollectArticleListReq{
  int32 id = 1;
  int32 page = 2;
}

message GetCollectArticleCountReq{
  int32 id = 1;
}

message GetCollectArticleCountReply{
  int32 count = 1;
}

message GetCollectTalkListReq{
  int32 id = 1;
  int32 page = 2;
}

message GetCollectTalkCountReq{
  int32 id = 1;
}

message GetCollectTalkCountReply{
  int32 count = 1;
}

message GetCollectColumnListReq{
  int32 id = 1;
  int32 page = 2;
}

message GetCollectColumnCountReq{
  int32 id = 1;
}

message GetCollectColumnCountReply{
  int32 count = 1;
}


message GetCollectionsReq{
  int32 id = 1;
  string uuid = 2;
}

message GetCollectionsReply{
  string uuid = 1;
  int32 auth = 2;
  int32 article = 3;
  int32 column = 4;
  int32 talk = 5;
}

message GetArticleListReq{
  int32 page = 1;
}

message GetArticleListReply{
  message Article{
    int32 id = 1;
    int32 agree = 2;
    int32 collect = 3;
    int32 comment = 4;
    int32 view = 5;
    string uuid = 6;
  }
  repeated Article article = 1;
}

message GetArticleCountReply{
  int32 count = 1;
}

message GetArticleCountVisitorReq{
  string uuid = 1;
}

message GetArticleListHotReq{
  int32 page = 1;
}

message GetArticleListHotReply{
  message Article{
    int32 id = 1;
    int32 agree = 2;
    int32 collect = 3;
    int32 comment = 4;
    int32 view = 5;
    string uuid = 6;
  }
  repeated Article article = 1;
}

message GetUserArticleListReq{
  int32 page = 1;
}

message GetUserArticleListSimpleReq{
  int32 page = 1;
}

message GetUserArticleListVisitorReq{
  int32 page = 1;
  string uuid = 2;
}

message GetArticleStatisticReq{
  int32 id = 1;
  string uuid = 2;
}

message GetArticleStatisticReply{
  string uuid = 1;
  int32 agree = 2;
  int32 collect = 3;
  int32 view = 4;
  int32  comment = 5;
}

message GetUserArticleAgreeReply{
  map<int32, bool> agree = 1;
}

message GetUserArticleCollectReply{
  map<int32, bool> collect = 1;
}

message GetArticleListStatisticReq{
  repeated int32 ids = 1;
}

message GetArticleListStatisticReply{
  message Count{
    int32 id = 1;
    int32 agree = 2;
    int32 collect = 3;
    int32 view = 4;
    int32 comment = 5;
  }
  repeated Count count = 1;
}

message GetLastArticleDraftReply{
  int32 id = 1;
  int32 status = 2;
}

message GetArticleSearchReq{
  int32 page = 1;
  string search = 2;
  string time = 3;
}

message GetArticleSearchReply{
  message List{
    int32 id = 1;
    string title = 2;
    string tags = 3;
    string text = 4;
    string cover = 5;
    string update = 6;
    string uuid = 7;
    int32 agree = 8;
    int32 collect = 9;
    int32 view = 10;
    int32 comment = 11;
  }
  repeated List list = 1;
  int32 total = 2;
}

message GetArticleImageReviewReq{
  int32 page = 1;
}

message GetArticleImageReviewReply{
  message Review {
    int32 id = 1;
    int32 creation_id = 2;
    string kind = 3;
    string uid = 4;
    string uuid = 5;
    string create_at = 6;
    string job_id = 7;
    string url = 8;
    string label = 9;
    int32 result = 10;
    int32 score = 11;
    string category = 12;
    string subLabel = 13;
  }
  repeated Review review = 1;
}

message GetArticleContentReviewReq{
  int32 page = 1;
}

message GetArticleContentReviewReply{
  message Review {
    int32 id = 1;
    int32 creation_id = 2;
    string title = 3;
    string kind = 4;
    string uuid = 5;
    string create_at = 6;
    string job_id = 7;
    string label = 8;
    int32 result = 9;
    string section = 10;
  }
  repeated Review review = 1;
}

message CreateArticleDraftReply{
  int32 id = 1;
}

message GetCollectionsListReq{
  int32 page = 1;
}

message GetCollectionsListReply{
  message Collections {
    int32 id = 1;
  }
  repeated Collections collections = 1;
}

message GetCollectionsVisitorCountReq{
  string uuid = 1;
}

message GetCollectionsCountReply{
  int32 count = 1;
}

message GetLastCollectionsDraftReply{
  int32 id = 1;
  int32 status = 2;
}

message GetCollectionsContentReviewReq{
  int32 page = 1;
}

message GetCollectionsContentReviewReply{
  message Review {
    int32 id = 1;
    int32 creation_id = 2;
    string title = 3;
    string kind = 4;
    string uuid = 5;
    string create_at = 6;
    string job_id = 7;
    string label = 8;
    int32 result = 9;
    string section = 10;
  }
  repeated Review review = 1;
}

message GetUserTimeLineListReq{
  int32 page = 1;
  string uuid = 2;
}

message GetUserTimeLineListReply{
  message TimeLine{
    int32 id = 1;
    string uuid = 2;
    int32 creation_id = 3;
    int32 mode = 4;
    int32 agree = 5;
    int32 collect = 6;
    int32 view = 7;
    int32 comment = 8;
  }
  repeated TimeLine timeline = 1;
}

message GetCollectionsListByVisitorReq{
  string uuid = 1;
  int32 page = 2;
}

message SendCollectionsReq{
  int32 id = 1;
}

message SendCollectionsEditReq{
  int32 id = 1;
}

message CreateCollectionsDraftReply{
  int32 id = 1;
}

message DeleteCollectionsReq{
  int32 id = 1;
}

message ArticleDraftMarkReq{
  int32 id = 1;
}

message GetArticleDraftListReply{
  message Draft{
    int32 id = 1;
  }
  repeated Draft draft = 1;
}

message SendArticleReq{
  int32 id = 1;
}

message SendArticleEditReq{
  int32 id = 1;
}

message DeleteArticleReq{
  int32 id = 1;
}

message DeleteArticleDraftReq{
  int32 id = 1;
}

message SetArticleAgreeReq{
  int32 id = 1;
  string uuid = 2;
}

message SetArticleViewReq{
  int32 id = 1;
  string uuid = 2;
}

message SetArticleCollectReq{
  int32 id = 1;
  int32 collections_id = 2;
  string uuid = 3;
}

message CancelArticleAgreeReq{
  int32 id = 1;
  string uuid = 2;
}

message CancelArticleCollectReq{
  int32 id = 1;
  string uuid = 2;
}

message ArticleStatisticJudgeReq{
  int32 id = 1;
}

message ArticleStatisticJudgeReply{
  bool agree = 1;
  bool collect = 2;
}

message GetTalkListReq{
  int32 page = 1;
}

message GetTalkListReply{
  message Talk{
    int32 id = 1;
    int32 agree = 2;
    int32 view = 3;
    int32 collect = 4;
    int32 comment = 5;
    string uuid = 6;
  }
  repeated Talk talk = 1;
}

message GetTalkCountReply{
  int32 count = 1;
}

message GetTalkCountVisitorReq{
  string uuid = 1;
}

message GetTalkListHotReq{
  int32 page = 1;
}

message GetTalkListHotReply{
  message Talk{
    int32 id = 1;
    int32 agree = 2;
    int32 view = 3;
    int32 collect = 4;
    int32 comment = 5;
    string uuid = 6;
  }
  repeated Talk talk = 1;
}

message GetTalkListStatisticReq{
  repeated int32 ids = 1;
}

message GetTalkListStatisticReply{
  message Count{
    int32 id = 1;
    int32 agree = 2;
    int32 collect = 3;
    int32 view = 4;
    int32 comment = 5;
  }
  repeated Count count = 1;
}

message GetUserTalkListReq{
  int32 page = 1;
}

message GetUserTalkListSimpleReq{
  int32 page = 1;
}

message GetUserTalkListVisitorReq{
  int32 page = 1;
  string uuid = 2;
}

message GetTalkStatisticReq{
  int32 id = 1;
  string uuid = 2;
}

message GetTalkStatisticReply{
  string uuid = 1;
  int32 agree = 2;
  int32 collect = 3;
  int32 view = 4;
  int32  comment = 5;
}

message GetLastTalkDraftReply{
  int32 id = 1;
  int32 status = 2;
}

message GetTalkSearchReq{
  int32 page = 1;
  string search = 2;
  string time = 3;
}

message GetTalkSearchReply{
  message List{
    int32 id = 1;
    string title = 2;
    string tags = 3;
    string text = 4;
    string cover = 5;
    string update = 6;
    string uuid = 7;
    int32 agree = 9;
    int32 collect = 10;
    int32 view = 11;
    int32 comment = 12;
  }
  repeated List list = 1;
  int32 total = 2;
}

message GetUserTalkAgreeReply{
  map<int32, bool> agree = 1;
}

message GetUserTalkCollectReply{
  map<int32, bool> collect = 1;
}

message GetTalkImageReviewReq{
  int32 page = 1;
}

message GetTalkImageReviewReply{
  message Review {
    int32 id = 1;
    int32 creation_id = 2;
    string kind = 3;
    string uid = 4;
    string uuid = 5;
    string create_at = 6;
    string job_id = 7;
    string url = 8;
    string label = 9;
    int32 result = 10;
    int32 score = 11;
    string category = 12;
    string subLabel = 13;
  }
  repeated Review review = 1;
}

message GetTalkContentReviewReq{
  int32 page = 1;
}

message GetTalkContentReviewReply{
  message Review {
    int32 id = 1;
    int32 creation_id = 2;
    string title = 3;
    string kind = 4;
    string uuid = 5;
    string create_at = 6;
    string job_id = 7;
    string label = 8;
    int32 result = 9;
    string section = 10;
  }
  repeated Review review = 1;
}

message CreateTalkDraftReply{
  int32 id = 1;
}

message SendTalkReq{
  int32 id = 1;
}

message SendTalkEditReq{
  int32 id = 1;
}

message DeleteTalkReq{
  int32 id = 1;
}

message SetTalkViewReq{
  int32 id = 1;
  string uuid = 2;
}

message TalkStatisticJudgeReq{
  int32 id = 1;
}

message TalkStatisticJudgeReply{
  bool agree = 1;
  bool collect = 2;
}

message SetTalkAgreeReq{
  int32 id = 1;
  string uuid = 2;
}

message SetTalkCollectReq{
  int32 id = 1;
  int32 collections_id = 2;
  string uuid = 3;
}

message CancelTalkAgreeReq{
  int32 id = 1;
  string uuid = 2;
}

message CancelTalkCollectReq{
  int32 id = 1;
  string uuid = 2;
}

message GetLastColumnDraftReply{
  int32 id = 1;
  int32 status = 2;
}

message CreateColumnDraftReply{
  int32 id = 1;
}

message SubscribeColumnReq{
  int32 id = 1;
}

message CancelSubscribeColumnReq{
  int32 id = 1;
}

message SubscribeJudgeReq{
  int32 id = 1;
}

message SubscribeJudgeReply{
  bool subscribe = 1;
}

message SendColumnReq{
  int32 id = 1;
}

message GetSubscribeListReq{
  int32 page = 1;
}

message GetSubscribeListReply{
  message Subscribe{
    int32 id = 1;
    string uuid = 2;
    int32 agree = 3;
    int32 collect = 4;
    int32 view = 5;
  }
  repeated Subscribe subscribe = 1;
}

message GetSubscribeListCountReq{
  string uuid = 1;
}

message GetSubscribeListCountReply{
  int32 count = 1;
}

message GetUserFollowsReply{
  map<string, bool> follows = 1;
}

message GetTimeLineUsersReply{
  message Follows{
    string uuid = 1;
    string username = 2;
  }
  repeated Follows follows = 1;
}

message GetColumnListReq{
  int32 page = 1;
}

message GetColumnListReply{
  message Column{
    int32 id = 1;
    int32 agree = 2;
    int32 collect = 3;
    int32 view = 4;
    string uuid = 5;
  }
  repeated Column column = 1;
}

message GetColumnListHotReq{
  int32 page = 1;
}

message GetColumnListHotReply{
  message Column{
    int32 id = 1;
    int32 agree = 2;
    int32 collect = 3;
    int32 view = 4;
    string uuid = 5;
  }
  repeated Column column = 1;
}

message GetColumnListStatisticReq{
  repeated int32 ids = 1;
}

message GetColumnListStatisticReply{
  message Count{
    int32 id = 1;
    int32 agree = 2;
    int32 collect = 3;
    int32 view = 4;
  }
  repeated Count count = 1;
}

message GetUserColumnListReq{
  int32 page = 1;
}

message GetUserColumnListSimpleReq{
  int32 page = 1;
}

message GetUserColumnListVisitorReq{
  int32 page = 1;
  string uuid = 2;
}

message GetColumnArticleListReq{
  int32 id = 1;
}

message GetColumnCountVisitorReq{
  string uuid = 1;
}

message GetColumnCountReply{
  int32 count = 1;
}

message GetColumnSearchReq{
  int32 page = 1;
  string search = 2;
  string time = 3;
}

message GetColumnSearchReply{
  message List{
    int32 id = 1;
    string name = 2;
    string tags = 3;
    string introduce = 4;
    string cover = 5;
    string update = 6;
    string uuid = 7;
    int32 agree = 8;
    int32 collect = 9;
    int32 view = 10;
  }
  repeated List list = 1;
  int32 total = 2;
}

message SendColumnEditReq{
  int32 id = 1;
}

message DeleteColumnReq{
  int32 id = 1;
}

message GetColumnStatisticReq{
  int32 id = 1;
  string uuid = 2;
}

message GetColumnStatisticReply{
  string uuid = 1;
  int32 agree = 2;
  int32 collect = 3;
  int32 view = 4;
}

message GetUserColumnAgreeReply{
  map<int32, bool> agree = 1;
}

message GetUserColumnCollectReply{
  map<int32, bool> collect = 1;
}

message GetUserSubscribeColumnReply{
  map<int32, bool> subscribe = 1;
}

message GetColumnImageReviewReq{
  int32 page = 1;
}

message GetColumnImageReviewReply{
  message Review {
    int32 id = 1;
    int32 creation_id = 2;
    string kind = 3;
    string uid = 4;
    string uuid = 5;
    string create_at = 6;
    string job_id = 7;
    string url = 8;
    string label = 9;
    int32 result = 10;
    int32 score = 11;
    string category = 12;
    string subLabel = 13;
  }
  repeated Review review = 1;
}

message GetColumnContentReviewReq{
  int32 page = 1;
}

message GetColumnContentReviewReply{
  message Review {
    int32 id = 1;
    int32 creation_id = 2;
    string title = 3;
    string kind = 4;
    string uuid = 5;
    string create_at = 6;
    string job_id = 7;
    string label = 8;
    int32 result = 9;
    string section = 10;
  }
  repeated Review review = 1;
}

message ColumnStatisticJudgeReq{
  int32 id = 1;
}

message ColumnStatisticJudgeReply{
  bool agree = 1;
  bool collect = 2;
}

message SetColumnAgreeReq{
  int32 id = 1;
  string uuid = 2;
}

message CancelColumnAgreeReq{
  int32 id = 1;
  string uuid = 2;
}

message SetColumnCollectReq{
  int32 id = 1;
  int32 collections_id = 2;
  string uuid = 3;
}

message CancelColumnCollectReq{
  int32 id = 1;
  string uuid = 2;
}

message SetColumnViewReq{
  int32 id = 1;
  string uuid = 2;
}

message AddColumnIncludesReq{
  int32 id = 1;
  int32 article_id = 2;
}

message DeleteColumnIncludesReq{
  int32 id = 1;
  int32 article_id = 2;
}

message GetNewsReq{
  int32 page = 1;
}

message GetNewsReply{
  message News{
    string id = 1;
  }
  repeated News news = 1;
}

message GetNewsSearchReq{
  int32 page = 1;
  string search = 2;
  string time = 3;
}

message GetNewsSearchReply{
  message List{
    string id = 1;
    string title = 2;
    string tags = 3;
    string author = 4;
    string update = 6;
    string url = 7;
    string content = 8;
    string cover = 9;
  }
  repeated List list = 1;
  int32 total = 2;
}

// --------------------achievement service-------------------------

message GetAchievementListReq{
  repeated string uuids = 1;
}

message GetAchievementListReply{
  message Achievement{
    string uuid = 1;
    int32 view = 2;
    int32 agree = 3;
    int32 followed = 4;
    int32 follow = 5;
  }
  repeated Achievement achievement = 1;
}

message GetUserAchievementReq{
  string uuid = 1;
}

message GetUserAchievementReply{
  int32 agree = 1;
  int32 view = 2;
  int32 collect = 3;
  int32 follow = 4;
  int32 followed = 5;
}

message GetUserMedalReq{
  string uuid = 1;
}

message GetUserMedalReply{
  int32 creation1 = 1;
  int32 creation2 = 2;
  int32 creation3 = 3;
  int32 creation4 = 4;
  int32 creation5 = 5;
  int32 creation6 = 6;
  int32 creation7 = 7;
  int32 agree1 = 8;
  int32 agree2 = 9;
  int32 agree3 = 10;
  int32 agree4 = 11;
  int32 agree5 = 12;
  int32 agree6 = 13;
  int32 view1 = 14;
  int32 view2 = 15;
  int32 view3 = 16;
  int32 comment1 = 17;
  int32 comment2 = 18;
  int32 comment3 = 19;
  int32 collect1 = 20;
  int32 collect2 = 21;
  int32 collect3 = 22;
}

message AccessUserMedalReq{
  string medal = 1;
}

message GetUserMedalProgressReply{
  int32 creation = 1;
  int32 agree = 2;
  int32 active_agree = 3;
  int32 view = 4;
  int32 comment = 5;
  int32 collect = 6;
}

message SetUserMedalReq{
  string medal = 1;
}

message CancelUserMedalSetReq{
  string medal = 1;
}

// --------------------comment service------------------------

message CreateCommentDraftReply{
  int32 id = 1;
}

message GetLastCommentDraftReply{
  int32 id = 1;
  int32 status = 2;
}

message GetUserCommentAgreeReply{
  map<int32, bool> agree = 1;
}

message GetCommentUserReply{
  int32 comment = 1;
  int32 article_reply = 2;
  int32 article_reply_sub = 3;
  int32 talk_reply = 4;
  int32 talk_reply_sub = 5;
  int32 article_replied = 6;
  int32 article_replied_sub = 7;
  int32 talk_replied = 8;
  int32 talk_replied_sub = 9;
}

message SendCommentReq{
  int32 id = 1;
}

message SendSubCommentReq{
  int32 id = 1;
}

message RemoveCommentReq{
  int32 id = 1;
}

message RemoveSubCommentReq{
  int32 id = 1;
}

message GetCommentListReq{
  int32 page = 1;
  int32 creationId = 2;
  int32 creationType = 3;
}

message GetCommentListReply{
  message Comment{
    int32 id = 1;
    string uuid = 2;
    int32 agree = 3;
    int32 comment = 4;
    string username = 5;
  }
  repeated Comment comment = 1;
}

message GetUserCommentArticleReplyListReq{
  int32 page = 1;
}

message GetUserCommentArticleReplyListReply{
  message List{
    int32 id = 1;
    int32 creation_id = 2;
    string creation_author = 3;
  }
  repeated List list = 1;
}

message GetUserSubCommentArticleReplyListReq{
  int32 page = 1;
}

message GetUserSubCommentArticleReplyListReply{
  message List{
    int32 id = 1;
    int32 creation_id = 2;
    string creation_author = 3;
    int32 root_id = 4;
    string root_user = 5;
    int32 parent_id = 6;
    string reply = 7;
    string user_name = 8;
    string reply_name = 9;
    string root_name = 10;
  }
  repeated List list = 1;
}


message GetUserCommentTalkReplyListReq{
  int32 page = 1;
}

message GetUserCommentTalkReplyListReply{
  message List{
    int32 id = 1;
    int32 creation_id = 2;
    string creation_author = 3;
  }
  repeated List list = 1;
}

message GetUserSubCommentTalkReplyListReq{
  int32 page = 1;
}

message GetUserSubCommentTalkReplyListReply{
  message List{
    int32 id = 1;
    int32 creation_id = 2;
    string creation_author = 3;
    int32 root_id = 4;
    string root_user = 5;
    int32 parent_id = 6;
    string reply = 7;
    string user_name = 8;
    string reply_name = 9;
    string root_name = 10;
  }
  repeated List list = 1;
}

message GetUserCommentArticleRepliedListReq{
  int32 page = 1;
}

message GetUserCommentArticleRepliedListReply{
  message List{
    int32 id = 1;
    int32 creation_id = 2;
    string uuid = 3;
    string username = 4;
  }
  repeated List list = 1;
}

message GetUserSubCommentArticleRepliedListReq{
  int32 page = 1;
}

message GetUserSubCommentArticleRepliedListReply{
  message List{
    int32 id = 1;
    string uuid = 2;
    int32 creation_id = 3;
    string creation_author = 4;
    int32 root_id = 5;
    string root_user = 6;
    int32 parent_id = 7;
    string reply = 8;
    string user_name = 9;
    string reply_name = 10;
    string root_name = 11;
  }
  repeated List list = 1;
}

message GetUserCommentTalkRepliedListReq{
  int32 page = 1;
}

message GetUserCommentTalkRepliedListReply{
  message List{
    int32 id = 1;
    int32 creation_id = 2;
    string uuid = 3;
    string username = 4;
  }
  repeated List list = 1;
}

message GetUserSubCommentTalkRepliedListReq{
  int32 page = 1;
}

message GetUserSubCommentTalkRepliedListReply{
  message List{
    int32 id = 1;
    string uuid = 2;
    int32 creation_id = 3;
    string creation_author = 4;
    int32 root_id = 5;
    string root_user = 6;
    int32 parent_id = 7;
    string reply = 8;
    string user_name = 9;
    string reply_name = 10;
    string root_name = 11;
  }
  repeated List list = 1;
}

message GetUserCommentRepliedListReq{
  int32 page = 1;
}

message GetUserCommentRepliedListReply{
  message List{
    int32 id = 1;
    int32 creation_id = 2;
    int32 creation_type = 3;
    string uuid = 4;
    string username = 5;
  }
  repeated List list = 1;
}

message GetUserSubCommentRepliedListReq{
  int32 page = 1;
}

message GetUserSubCommentRepliedListReply{
  message List{
    int32 id = 1;
    string uuid = 2;
    int32 creation_id = 3;
    int32 creation_type = 4;
    string creation_author = 5;
    int32 root_id = 6;
    string root_user = 7;
    int32 parent_id = 8;
    string reply = 9;
    string user_name = 10;
    string reply_name = 11;
    string root_name = 12;
  }
  repeated List list = 1;
}

message GetCommentContentReviewReq{
  int32 page = 1;
}

message GetCommentContentReviewReply{
  message Review {
    int32 id = 1;
    int32 comment_id = 2;
    string comment = 3;
    string kind = 4;
    string uuid = 5;
    string create_at = 6;
    string job_id = 7;
    string label = 8;
    int32 result = 9;
    string section = 10;
  }
  repeated Review review = 1;
}

message GetSubCommentListReq{
  int32 page = 1;
  int32 id = 2;
}

message GetSubCommentListReply{
  message Comment{
    int32 id = 1;
    string uuid = 2;
    string reply = 3;
    int32 agree = 4;
    int32 comment = 5;
    string username = 6;
    string replyName = 7;
  }
  repeated Comment comment = 1;
}

message SetCommentAgreeReq{
  int32 id = 1;
  string uuid = 2;
  int32 creationId = 3;
  int32 creationType = 4;
}

message SetSubCommentAgreeReq{
  int32 id = 1;
  string uuid = 2;
}

message CancelCommentAgreeReq{
  int32 id = 1;
  string uuid = 2;
  int32 creationId = 3;
  int32 creationType = 4;
}

message CancelSubCommentAgreeReq{
  int32 id = 1;
  string uuid = 2;
}

message GetMessageNotificationReply{
  map<string, int32> timeline = 1;
  int32 comment = 2;
  int32 subComment = 3;
  int32 system = 4;
}

message GetMessageSystemNotificationReq{
  int32 page = 1;
}

message GetMessageSystemNotificationReply{
  message List {
    int32 id = 1;
    int32 contentId = 2;
    string createdAt = 3;
    string notificationType = 4;
    string title = 5;
    string uid = 6;
    string uuid = 7;
    string label = 8;
    int32 result = 9;
    string section = 10;
    string text = 11;
    string comment = 12;
  }
  repeated List list = 1;
}

message GetMailBoxLastTimeReply{
  int32 time = 1;
}

message SetMailBoxLastTimeReq{
  int32 time = 1;
}