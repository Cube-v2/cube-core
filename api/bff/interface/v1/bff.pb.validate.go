// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: bff/interface/v1/bff.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserRegisterReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserRegisterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRegisterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRegisterReqMultiError, or nil if none found.
func (m *UserRegisterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRegisterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Password

	// no validation rules for Code

	if len(errors) > 0 {
		return UserRegisterReqMultiError(errors)
	}

	return nil
}

// UserRegisterReqMultiError is an error wrapping multiple validation errors
// returned by UserRegisterReq.ValidateAll() if the designated constraints
// aren't met.
type UserRegisterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRegisterReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRegisterReqMultiError) AllErrors() []error { return m }

// UserRegisterReqValidationError is the validation error returned by
// UserRegisterReq.Validate if the designated constraints aren't met.
type UserRegisterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRegisterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRegisterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRegisterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRegisterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRegisterReqValidationError) ErrorName() string { return "UserRegisterReqValidationError" }

// Error satisfies the builtin error interface
func (e UserRegisterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRegisterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRegisterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRegisterReqValidationError{}

// Validate checks the field values on LoginByPasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginByPasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByPasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByPasswordReqMultiError, or nil if none found.
func (m *LoginByPasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByPasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for Password

	// no validation rules for Mode

	if len(errors) > 0 {
		return LoginByPasswordReqMultiError(errors)
	}

	return nil
}

// LoginByPasswordReqMultiError is an error wrapping multiple validation errors
// returned by LoginByPasswordReq.ValidateAll() if the designated constraints
// aren't met.
type LoginByPasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByPasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByPasswordReqMultiError) AllErrors() []error { return m }

// LoginByPasswordReqValidationError is the validation error returned by
// LoginByPasswordReq.Validate if the designated constraints aren't met.
type LoginByPasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByPasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByPasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByPasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByPasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByPasswordReqValidationError) ErrorName() string {
	return "LoginByPasswordReqValidationError"
}

// Error satisfies the builtin error interface
func (e LoginByPasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByPasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByPasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByPasswordReqValidationError{}

// Validate checks the field values on LoginByCodeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginByCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByCodeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginByCodeReqMultiError,
// or nil if none found.
func (m *LoginByCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phone

	// no validation rules for Code

	if len(errors) > 0 {
		return LoginByCodeReqMultiError(errors)
	}

	return nil
}

// LoginByCodeReqMultiError is an error wrapping multiple validation errors
// returned by LoginByCodeReq.ValidateAll() if the designated constraints
// aren't met.
type LoginByCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByCodeReqMultiError) AllErrors() []error { return m }

// LoginByCodeReqValidationError is the validation error returned by
// LoginByCodeReq.Validate if the designated constraints aren't met.
type LoginByCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByCodeReqValidationError) ErrorName() string { return "LoginByCodeReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginByCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByCodeReqValidationError{}

// Validate checks the field values on LoginByWeChatReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginByWeChatReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByWeChatReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByWeChatReqMultiError, or nil if none found.
func (m *LoginByWeChatReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByWeChatReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Wechat

	if len(errors) > 0 {
		return LoginByWeChatReqMultiError(errors)
	}

	return nil
}

// LoginByWeChatReqMultiError is an error wrapping multiple validation errors
// returned by LoginByWeChatReq.ValidateAll() if the designated constraints
// aren't met.
type LoginByWeChatReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByWeChatReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByWeChatReqMultiError) AllErrors() []error { return m }

// LoginByWeChatReqValidationError is the validation error returned by
// LoginByWeChatReq.Validate if the designated constraints aren't met.
type LoginByWeChatReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByWeChatReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByWeChatReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByWeChatReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByWeChatReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByWeChatReqValidationError) ErrorName() string { return "LoginByWeChatReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginByWeChatReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByWeChatReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByWeChatReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByWeChatReqValidationError{}

// Validate checks the field values on LoginByGithubReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginByGithubReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByGithubReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByGithubReqMultiError, or nil if none found.
func (m *LoginByGithubReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByGithubReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Github

	if len(errors) > 0 {
		return LoginByGithubReqMultiError(errors)
	}

	return nil
}

// LoginByGithubReqMultiError is an error wrapping multiple validation errors
// returned by LoginByGithubReq.ValidateAll() if the designated constraints
// aren't met.
type LoginByGithubReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByGithubReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByGithubReqMultiError) AllErrors() []error { return m }

// LoginByGithubReqValidationError is the validation error returned by
// LoginByGithubReq.Validate if the designated constraints aren't met.
type LoginByGithubReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByGithubReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByGithubReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByGithubReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByGithubReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByGithubReqValidationError) ErrorName() string { return "LoginByGithubReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginByGithubReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByGithubReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByGithubReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByGithubReqValidationError{}

// Validate checks the field values on LoginReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReplyMultiError, or
// nil if none found.
func (m *LoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginReplyMultiError(errors)
	}

	return nil
}

// LoginReplyMultiError is an error wrapping multiple validation errors
// returned by LoginReply.ValidateAll() if the designated constraints aren't met.
type LoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReplyMultiError) AllErrors() []error { return m }

// LoginReplyValidationError is the validation error returned by
// LoginReply.Validate if the designated constraints aren't met.
type LoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReplyValidationError) ErrorName() string { return "LoginReplyValidationError" }

// Error satisfies the builtin error interface
func (e LoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReplyValidationError{}

// Validate checks the field values on LoginPasswordResetReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginPasswordResetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginPasswordResetReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginPasswordResetReqMultiError, or nil if none found.
func (m *LoginPasswordResetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginPasswordResetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for Code

	// no validation rules for Password

	// no validation rules for Mode

	if len(errors) > 0 {
		return LoginPasswordResetReqMultiError(errors)
	}

	return nil
}

// LoginPasswordResetReqMultiError is an error wrapping multiple validation
// errors returned by LoginPasswordResetReq.ValidateAll() if the designated
// constraints aren't met.
type LoginPasswordResetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginPasswordResetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginPasswordResetReqMultiError) AllErrors() []error { return m }

// LoginPasswordResetReqValidationError is the validation error returned by
// LoginPasswordResetReq.Validate if the designated constraints aren't met.
type LoginPasswordResetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginPasswordResetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginPasswordResetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginPasswordResetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginPasswordResetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginPasswordResetReqValidationError) ErrorName() string {
	return "LoginPasswordResetReqValidationError"
}

// Error satisfies the builtin error interface
func (e LoginPasswordResetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginPasswordResetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginPasswordResetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginPasswordResetReqValidationError{}

// Validate checks the field values on SendPhoneCodeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendPhoneCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendPhoneCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendPhoneCodeReqMultiError, or nil if none found.
func (m *SendPhoneCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendPhoneCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phone

	// no validation rules for Template

	if len(errors) > 0 {
		return SendPhoneCodeReqMultiError(errors)
	}

	return nil
}

// SendPhoneCodeReqMultiError is an error wrapping multiple validation errors
// returned by SendPhoneCodeReq.ValidateAll() if the designated constraints
// aren't met.
type SendPhoneCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendPhoneCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendPhoneCodeReqMultiError) AllErrors() []error { return m }

// SendPhoneCodeReqValidationError is the validation error returned by
// SendPhoneCodeReq.Validate if the designated constraints aren't met.
type SendPhoneCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendPhoneCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendPhoneCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendPhoneCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendPhoneCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendPhoneCodeReqValidationError) ErrorName() string { return "SendPhoneCodeReqValidationError" }

// Error satisfies the builtin error interface
func (e SendPhoneCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendPhoneCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendPhoneCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendPhoneCodeReqValidationError{}

// Validate checks the field values on SendEmailCodeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendEmailCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendEmailCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendEmailCodeReqMultiError, or nil if none found.
func (m *SendEmailCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendEmailCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Template

	if len(errors) > 0 {
		return SendEmailCodeReqMultiError(errors)
	}

	return nil
}

// SendEmailCodeReqMultiError is an error wrapping multiple validation errors
// returned by SendEmailCodeReq.ValidateAll() if the designated constraints
// aren't met.
type SendEmailCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendEmailCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendEmailCodeReqMultiError) AllErrors() []error { return m }

// SendEmailCodeReqValidationError is the validation error returned by
// SendEmailCodeReq.Validate if the designated constraints aren't met.
type SendEmailCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendEmailCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendEmailCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendEmailCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendEmailCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendEmailCodeReqValidationError) ErrorName() string { return "SendEmailCodeReqValidationError" }

// Error satisfies the builtin error interface
func (e SendEmailCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendEmailCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendEmailCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendEmailCodeReqValidationError{}

// Validate checks the field values on GetCosSessionKeyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCosSessionKeyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCosSessionKeyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCosSessionKeyReplyMultiError, or nil if none found.
func (m *GetCosSessionKeyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCosSessionKeyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TmpSecretId

	// no validation rules for TmpSecretKey

	// no validation rules for SessionToken

	// no validation rules for StartTime

	// no validation rules for ExpiredTime

	if len(errors) > 0 {
		return GetCosSessionKeyReplyMultiError(errors)
	}

	return nil
}

// GetCosSessionKeyReplyMultiError is an error wrapping multiple validation
// errors returned by GetCosSessionKeyReply.ValidateAll() if the designated
// constraints aren't met.
type GetCosSessionKeyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCosSessionKeyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCosSessionKeyReplyMultiError) AllErrors() []error { return m }

// GetCosSessionKeyReplyValidationError is the validation error returned by
// GetCosSessionKeyReply.Validate if the designated constraints aren't met.
type GetCosSessionKeyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCosSessionKeyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCosSessionKeyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCosSessionKeyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCosSessionKeyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCosSessionKeyReplyValidationError) ErrorName() string {
	return "GetCosSessionKeyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCosSessionKeyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCosSessionKeyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCosSessionKeyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCosSessionKeyReplyValidationError{}

// Validate checks the field values on GetAccountReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAccountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountReplyMultiError, or nil if none found.
func (m *GetAccountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for Qq

	// no validation rules for Wechat

	// no validation rules for Weibo

	// no validation rules for Github

	// no validation rules for Password

	if len(errors) > 0 {
		return GetAccountReplyMultiError(errors)
	}

	return nil
}

// GetAccountReplyMultiError is an error wrapping multiple validation errors
// returned by GetAccountReply.ValidateAll() if the designated constraints
// aren't met.
type GetAccountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountReplyMultiError) AllErrors() []error { return m }

// GetAccountReplyValidationError is the validation error returned by
// GetAccountReply.Validate if the designated constraints aren't met.
type GetAccountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountReplyValidationError) ErrorName() string { return "GetAccountReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetAccountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountReplyValidationError{}

// Validate checks the field values on GetProfileReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProfileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProfileReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProfileReplyMultiError, or nil if none found.
func (m *GetProfileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProfileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Username

	// no validation rules for Avatar

	// no validation rules for School

	// no validation rules for Company

	// no validation rules for Job

	// no validation rules for Homepage

	// no validation rules for Introduce

	if len(errors) > 0 {
		return GetProfileReplyMultiError(errors)
	}

	return nil
}

// GetProfileReplyMultiError is an error wrapping multiple validation errors
// returned by GetProfileReply.ValidateAll() if the designated constraints
// aren't met.
type GetProfileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProfileReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProfileReplyMultiError) AllErrors() []error { return m }

// GetProfileReplyValidationError is the validation error returned by
// GetProfileReply.Validate if the designated constraints aren't met.
type GetProfileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProfileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProfileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProfileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProfileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProfileReplyValidationError) ErrorName() string { return "GetProfileReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetProfileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProfileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProfileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProfileReplyValidationError{}

// Validate checks the field values on GetUserInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserInfoReqMultiError,
// or nil if none found.
func (m *GetUserInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetUserInfoReqMultiError(errors)
	}

	return nil
}

// GetUserInfoReqMultiError is an error wrapping multiple validation errors
// returned by GetUserInfoReq.ValidateAll() if the designated constraints
// aren't met.
type GetUserInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserInfoReqMultiError) AllErrors() []error { return m }

// GetUserInfoReqValidationError is the validation error returned by
// GetUserInfoReq.Validate if the designated constraints aren't met.
type GetUserInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInfoReqValidationError) ErrorName() string { return "GetUserInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e GetUserInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInfoReqValidationError{}

// Validate checks the field values on GetUserInfoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserInfoReplyMultiError, or nil if none found.
func (m *GetUserInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Avatar

	// no validation rules for School

	// no validation rules for Company

	// no validation rules for Job

	// no validation rules for Homepage

	// no validation rules for Introduce

	// no validation rules for Created

	if len(errors) > 0 {
		return GetUserInfoReplyMultiError(errors)
	}

	return nil
}

// GetUserInfoReplyMultiError is an error wrapping multiple validation errors
// returned by GetUserInfoReply.ValidateAll() if the designated constraints
// aren't met.
type GetUserInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserInfoReplyMultiError) AllErrors() []error { return m }

// GetUserInfoReplyValidationError is the validation error returned by
// GetUserInfoReply.Validate if the designated constraints aren't met.
type GetUserInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInfoReplyValidationError) ErrorName() string { return "GetUserInfoReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetUserInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInfoReplyValidationError{}

// Validate checks the field values on GetProfileUpdateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProfileUpdateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProfileUpdateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProfileUpdateReplyMultiError, or nil if none found.
func (m *GetProfileUpdateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProfileUpdateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Avatar

	// no validation rules for School

	// no validation rules for Company

	// no validation rules for Job

	// no validation rules for Homepage

	// no validation rules for Introduce

	// no validation rules for Status

	if len(errors) > 0 {
		return GetProfileUpdateReplyMultiError(errors)
	}

	return nil
}

// GetProfileUpdateReplyMultiError is an error wrapping multiple validation
// errors returned by GetProfileUpdateReply.ValidateAll() if the designated
// constraints aren't met.
type GetProfileUpdateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProfileUpdateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProfileUpdateReplyMultiError) AllErrors() []error { return m }

// GetProfileUpdateReplyValidationError is the validation error returned by
// GetProfileUpdateReply.Validate if the designated constraints aren't met.
type GetProfileUpdateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProfileUpdateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProfileUpdateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProfileUpdateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProfileUpdateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProfileUpdateReplyValidationError) ErrorName() string {
	return "GetProfileUpdateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetProfileUpdateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProfileUpdateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProfileUpdateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProfileUpdateReplyValidationError{}

// Validate checks the field values on SetProfileUpdateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetProfileUpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetProfileUpdateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetProfileUpdateReqMultiError, or nil if none found.
func (m *SetProfileUpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetProfileUpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for School

	// no validation rules for Company

	// no validation rules for Job

	// no validation rules for Homepage

	// no validation rules for Introduce

	if len(errors) > 0 {
		return SetProfileUpdateReqMultiError(errors)
	}

	return nil
}

// SetProfileUpdateReqMultiError is an error wrapping multiple validation
// errors returned by SetProfileUpdateReq.ValidateAll() if the designated
// constraints aren't met.
type SetProfileUpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetProfileUpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetProfileUpdateReqMultiError) AllErrors() []error { return m }

// SetProfileUpdateReqValidationError is the validation error returned by
// SetProfileUpdateReq.Validate if the designated constraints aren't met.
type SetProfileUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetProfileUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetProfileUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetProfileUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetProfileUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetProfileUpdateReqValidationError) ErrorName() string {
	return "SetProfileUpdateReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetProfileUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetProfileUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetProfileUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetProfileUpdateReqValidationError{}

// Validate checks the field values on SetUserPhoneReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetUserPhoneReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserPhoneReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserPhoneReqMultiError, or nil if none found.
func (m *SetUserPhoneReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserPhoneReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phone

	// no validation rules for Code

	if len(errors) > 0 {
		return SetUserPhoneReqMultiError(errors)
	}

	return nil
}

// SetUserPhoneReqMultiError is an error wrapping multiple validation errors
// returned by SetUserPhoneReq.ValidateAll() if the designated constraints
// aren't met.
type SetUserPhoneReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserPhoneReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserPhoneReqMultiError) AllErrors() []error { return m }

// SetUserPhoneReqValidationError is the validation error returned by
// SetUserPhoneReq.Validate if the designated constraints aren't met.
type SetUserPhoneReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserPhoneReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserPhoneReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserPhoneReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserPhoneReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserPhoneReqValidationError) ErrorName() string { return "SetUserPhoneReqValidationError" }

// Error satisfies the builtin error interface
func (e SetUserPhoneReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserPhoneReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserPhoneReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserPhoneReqValidationError{}

// Validate checks the field values on SetUserEmailReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetUserEmailReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserEmailReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserEmailReqMultiError, or nil if none found.
func (m *SetUserEmailReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserEmailReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Code

	if len(errors) > 0 {
		return SetUserEmailReqMultiError(errors)
	}

	return nil
}

// SetUserEmailReqMultiError is an error wrapping multiple validation errors
// returned by SetUserEmailReq.ValidateAll() if the designated constraints
// aren't met.
type SetUserEmailReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserEmailReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserEmailReqMultiError) AllErrors() []error { return m }

// SetUserEmailReqValidationError is the validation error returned by
// SetUserEmailReq.Validate if the designated constraints aren't met.
type SetUserEmailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserEmailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserEmailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserEmailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserEmailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserEmailReqValidationError) ErrorName() string { return "SetUserEmailReqValidationError" }

// Error satisfies the builtin error interface
func (e SetUserEmailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserEmailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserEmailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserEmailReqValidationError{}

// Validate checks the field values on SetUserPasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetUserPasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserPasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserPasswordReqMultiError, or nil if none found.
func (m *SetUserPasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserPasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Password

	if len(errors) > 0 {
		return SetUserPasswordReqMultiError(errors)
	}

	return nil
}

// SetUserPasswordReqMultiError is an error wrapping multiple validation errors
// returned by SetUserPasswordReq.ValidateAll() if the designated constraints
// aren't met.
type SetUserPasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserPasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserPasswordReqMultiError) AllErrors() []error { return m }

// SetUserPasswordReqValidationError is the validation error returned by
// SetUserPasswordReq.Validate if the designated constraints aren't met.
type SetUserPasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserPasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserPasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserPasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserPasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserPasswordReqValidationError) ErrorName() string {
	return "SetUserPasswordReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetUserPasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserPasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserPasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserPasswordReqValidationError{}

// Validate checks the field values on ChangeUserPasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeUserPasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeUserPasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeUserPasswordReqMultiError, or nil if none found.
func (m *ChangeUserPasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeUserPasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Oldpassword

	// no validation rules for Password

	if len(errors) > 0 {
		return ChangeUserPasswordReqMultiError(errors)
	}

	return nil
}

// ChangeUserPasswordReqMultiError is an error wrapping multiple validation
// errors returned by ChangeUserPasswordReq.ValidateAll() if the designated
// constraints aren't met.
type ChangeUserPasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeUserPasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeUserPasswordReqMultiError) AllErrors() []error { return m }

// ChangeUserPasswordReqValidationError is the validation error returned by
// ChangeUserPasswordReq.Validate if the designated constraints aren't met.
type ChangeUserPasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeUserPasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeUserPasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeUserPasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeUserPasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeUserPasswordReqValidationError) ErrorName() string {
	return "ChangeUserPasswordReqValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeUserPasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeUserPasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeUserPasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeUserPasswordReqValidationError{}

// Validate checks the field values on UnbindUserPhoneReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnbindUserPhoneReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnbindUserPhoneReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnbindUserPhoneReqMultiError, or nil if none found.
func (m *UnbindUserPhoneReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UnbindUserPhoneReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phone

	// no validation rules for Code

	if len(errors) > 0 {
		return UnbindUserPhoneReqMultiError(errors)
	}

	return nil
}

// UnbindUserPhoneReqMultiError is an error wrapping multiple validation errors
// returned by UnbindUserPhoneReq.ValidateAll() if the designated constraints
// aren't met.
type UnbindUserPhoneReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnbindUserPhoneReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnbindUserPhoneReqMultiError) AllErrors() []error { return m }

// UnbindUserPhoneReqValidationError is the validation error returned by
// UnbindUserPhoneReq.Validate if the designated constraints aren't met.
type UnbindUserPhoneReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnbindUserPhoneReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnbindUserPhoneReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnbindUserPhoneReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnbindUserPhoneReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnbindUserPhoneReqValidationError) ErrorName() string {
	return "UnbindUserPhoneReqValidationError"
}

// Error satisfies the builtin error interface
func (e UnbindUserPhoneReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnbindUserPhoneReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnbindUserPhoneReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnbindUserPhoneReqValidationError{}

// Validate checks the field values on UnbindUserEmailReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnbindUserEmailReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnbindUserEmailReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnbindUserEmailReqMultiError, or nil if none found.
func (m *UnbindUserEmailReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UnbindUserEmailReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Code

	if len(errors) > 0 {
		return UnbindUserEmailReqMultiError(errors)
	}

	return nil
}

// UnbindUserEmailReqMultiError is an error wrapping multiple validation errors
// returned by UnbindUserEmailReq.ValidateAll() if the designated constraints
// aren't met.
type UnbindUserEmailReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnbindUserEmailReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnbindUserEmailReqMultiError) AllErrors() []error { return m }

// UnbindUserEmailReqValidationError is the validation error returned by
// UnbindUserEmailReq.Validate if the designated constraints aren't met.
type UnbindUserEmailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnbindUserEmailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnbindUserEmailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnbindUserEmailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnbindUserEmailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnbindUserEmailReqValidationError) ErrorName() string {
	return "UnbindUserEmailReqValidationError"
}

// Error satisfies the builtin error interface
func (e UnbindUserEmailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnbindUserEmailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnbindUserEmailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnbindUserEmailReqValidationError{}

// Validate checks the field values on GetArticleListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleListReqMultiError, or nil if none found.
func (m *GetArticleListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if len(errors) > 0 {
		return GetArticleListReqMultiError(errors)
	}

	return nil
}

// GetArticleListReqMultiError is an error wrapping multiple validation errors
// returned by GetArticleListReq.ValidateAll() if the designated constraints
// aren't met.
type GetArticleListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListReqMultiError) AllErrors() []error { return m }

// GetArticleListReqValidationError is the validation error returned by
// GetArticleListReq.Validate if the designated constraints aren't met.
type GetArticleListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListReqValidationError) ErrorName() string {
	return "GetArticleListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListReqValidationError{}

// Validate checks the field values on GetArticleListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleListReplyMultiError, or nil if none found.
func (m *GetArticleListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetArticle() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetArticleListReplyValidationError{
						field:  fmt.Sprintf("Article[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetArticleListReplyValidationError{
						field:  fmt.Sprintf("Article[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetArticleListReplyValidationError{
					field:  fmt.Sprintf("Article[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetArticleListReplyMultiError(errors)
	}

	return nil
}

// GetArticleListReplyMultiError is an error wrapping multiple validation
// errors returned by GetArticleListReply.ValidateAll() if the designated
// constraints aren't met.
type GetArticleListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListReplyMultiError) AllErrors() []error { return m }

// GetArticleListReplyValidationError is the validation error returned by
// GetArticleListReply.Validate if the designated constraints aren't met.
type GetArticleListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListReplyValidationError) ErrorName() string {
	return "GetArticleListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListReplyValidationError{}

// Validate checks the field values on GetArticleListHotReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListHotReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListHotReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleListHotReqMultiError, or nil if none found.
func (m *GetArticleListHotReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListHotReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if len(errors) > 0 {
		return GetArticleListHotReqMultiError(errors)
	}

	return nil
}

// GetArticleListHotReqMultiError is an error wrapping multiple validation
// errors returned by GetArticleListHotReq.ValidateAll() if the designated
// constraints aren't met.
type GetArticleListHotReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListHotReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListHotReqMultiError) AllErrors() []error { return m }

// GetArticleListHotReqValidationError is the validation error returned by
// GetArticleListHotReq.Validate if the designated constraints aren't met.
type GetArticleListHotReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListHotReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListHotReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListHotReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListHotReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListHotReqValidationError) ErrorName() string {
	return "GetArticleListHotReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListHotReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListHotReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListHotReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListHotReqValidationError{}

// Validate checks the field values on GetArticleListHotReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListHotReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListHotReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleListHotReplyMultiError, or nil if none found.
func (m *GetArticleListHotReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListHotReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetArticle() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetArticleListHotReplyValidationError{
						field:  fmt.Sprintf("Article[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetArticleListHotReplyValidationError{
						field:  fmt.Sprintf("Article[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetArticleListHotReplyValidationError{
					field:  fmt.Sprintf("Article[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetArticleListHotReplyMultiError(errors)
	}

	return nil
}

// GetArticleListHotReplyMultiError is an error wrapping multiple validation
// errors returned by GetArticleListHotReply.ValidateAll() if the designated
// constraints aren't met.
type GetArticleListHotReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListHotReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListHotReplyMultiError) AllErrors() []error { return m }

// GetArticleListHotReplyValidationError is the validation error returned by
// GetArticleListHotReply.Validate if the designated constraints aren't met.
type GetArticleListHotReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListHotReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListHotReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListHotReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListHotReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListHotReplyValidationError) ErrorName() string {
	return "GetArticleListHotReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListHotReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListHotReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListHotReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListHotReplyValidationError{}

// Validate checks the field values on GetArticleListStatisticReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListStatisticReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListStatisticReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleListStatisticReqMultiError, or nil if none found.
func (m *GetArticleListStatisticReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListStatisticReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetArticleListStatisticReqMultiError(errors)
	}

	return nil
}

// GetArticleListStatisticReqMultiError is an error wrapping multiple
// validation errors returned by GetArticleListStatisticReq.ValidateAll() if
// the designated constraints aren't met.
type GetArticleListStatisticReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListStatisticReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListStatisticReqMultiError) AllErrors() []error { return m }

// GetArticleListStatisticReqValidationError is the validation error returned
// by GetArticleListStatisticReq.Validate if the designated constraints aren't met.
type GetArticleListStatisticReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListStatisticReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListStatisticReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListStatisticReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListStatisticReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListStatisticReqValidationError) ErrorName() string {
	return "GetArticleListStatisticReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListStatisticReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListStatisticReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListStatisticReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListStatisticReqValidationError{}

// Validate checks the field values on GetArticleListStatisticReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListStatisticReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListStatisticReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleListStatisticReplyMultiError, or nil if none found.
func (m *GetArticleListStatisticReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListStatisticReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCount() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetArticleListStatisticReplyValidationError{
						field:  fmt.Sprintf("Count[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetArticleListStatisticReplyValidationError{
						field:  fmt.Sprintf("Count[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetArticleListStatisticReplyValidationError{
					field:  fmt.Sprintf("Count[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetArticleListStatisticReplyMultiError(errors)
	}

	return nil
}

// GetArticleListStatisticReplyMultiError is an error wrapping multiple
// validation errors returned by GetArticleListStatisticReply.ValidateAll() if
// the designated constraints aren't met.
type GetArticleListStatisticReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListStatisticReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListStatisticReplyMultiError) AllErrors() []error { return m }

// GetArticleListStatisticReplyValidationError is the validation error returned
// by GetArticleListStatisticReply.Validate if the designated constraints
// aren't met.
type GetArticleListStatisticReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListStatisticReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListStatisticReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListStatisticReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListStatisticReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListStatisticReplyValidationError) ErrorName() string {
	return "GetArticleListStatisticReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListStatisticReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListStatisticReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListStatisticReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListStatisticReplyValidationError{}

// Validate checks the field values on GetLastArticleDraftReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLastArticleDraftReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLastArticleDraftReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLastArticleDraftReplyMultiError, or nil if none found.
func (m *GetLastArticleDraftReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLastArticleDraftReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	if len(errors) > 0 {
		return GetLastArticleDraftReplyMultiError(errors)
	}

	return nil
}

// GetLastArticleDraftReplyMultiError is an error wrapping multiple validation
// errors returned by GetLastArticleDraftReply.ValidateAll() if the designated
// constraints aren't met.
type GetLastArticleDraftReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLastArticleDraftReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLastArticleDraftReplyMultiError) AllErrors() []error { return m }

// GetLastArticleDraftReplyValidationError is the validation error returned by
// GetLastArticleDraftReply.Validate if the designated constraints aren't met.
type GetLastArticleDraftReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLastArticleDraftReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLastArticleDraftReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLastArticleDraftReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLastArticleDraftReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLastArticleDraftReplyValidationError) ErrorName() string {
	return "GetLastArticleDraftReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetLastArticleDraftReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLastArticleDraftReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLastArticleDraftReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLastArticleDraftReplyValidationError{}

// Validate checks the field values on CreateArticleDraftReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateArticleDraftReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateArticleDraftReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateArticleDraftReplyMultiError, or nil if none found.
func (m *CreateArticleDraftReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateArticleDraftReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateArticleDraftReplyMultiError(errors)
	}

	return nil
}

// CreateArticleDraftReplyMultiError is an error wrapping multiple validation
// errors returned by CreateArticleDraftReply.ValidateAll() if the designated
// constraints aren't met.
type CreateArticleDraftReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateArticleDraftReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateArticleDraftReplyMultiError) AllErrors() []error { return m }

// CreateArticleDraftReplyValidationError is the validation error returned by
// CreateArticleDraftReply.Validate if the designated constraints aren't met.
type CreateArticleDraftReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateArticleDraftReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateArticleDraftReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateArticleDraftReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateArticleDraftReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateArticleDraftReplyValidationError) ErrorName() string {
	return "CreateArticleDraftReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateArticleDraftReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateArticleDraftReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateArticleDraftReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateArticleDraftReplyValidationError{}

// Validate checks the field values on ArticleDraftMarkReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleDraftMarkReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleDraftMarkReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleDraftMarkReqMultiError, or nil if none found.
func (m *ArticleDraftMarkReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleDraftMarkReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ArticleDraftMarkReqMultiError(errors)
	}

	return nil
}

// ArticleDraftMarkReqMultiError is an error wrapping multiple validation
// errors returned by ArticleDraftMarkReq.ValidateAll() if the designated
// constraints aren't met.
type ArticleDraftMarkReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleDraftMarkReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleDraftMarkReqMultiError) AllErrors() []error { return m }

// ArticleDraftMarkReqValidationError is the validation error returned by
// ArticleDraftMarkReq.Validate if the designated constraints aren't met.
type ArticleDraftMarkReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleDraftMarkReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleDraftMarkReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleDraftMarkReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleDraftMarkReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleDraftMarkReqValidationError) ErrorName() string {
	return "ArticleDraftMarkReqValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleDraftMarkReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleDraftMarkReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleDraftMarkReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleDraftMarkReqValidationError{}

// Validate checks the field values on GetArticleDraftListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleDraftListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleDraftListReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleDraftListReplyMultiError, or nil if none found.
func (m *GetArticleDraftListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleDraftListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDraft() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetArticleDraftListReplyValidationError{
						field:  fmt.Sprintf("Draft[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetArticleDraftListReplyValidationError{
						field:  fmt.Sprintf("Draft[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetArticleDraftListReplyValidationError{
					field:  fmt.Sprintf("Draft[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetArticleDraftListReplyMultiError(errors)
	}

	return nil
}

// GetArticleDraftListReplyMultiError is an error wrapping multiple validation
// errors returned by GetArticleDraftListReply.ValidateAll() if the designated
// constraints aren't met.
type GetArticleDraftListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleDraftListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleDraftListReplyMultiError) AllErrors() []error { return m }

// GetArticleDraftListReplyValidationError is the validation error returned by
// GetArticleDraftListReply.Validate if the designated constraints aren't met.
type GetArticleDraftListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleDraftListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleDraftListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleDraftListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleDraftListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleDraftListReplyValidationError) ErrorName() string {
	return "GetArticleDraftListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleDraftListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleDraftListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleDraftListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleDraftListReplyValidationError{}

// Validate checks the field values on SendArticleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendArticleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendArticleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendArticleReqMultiError,
// or nil if none found.
func (m *SendArticleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendArticleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SendArticleReqMultiError(errors)
	}

	return nil
}

// SendArticleReqMultiError is an error wrapping multiple validation errors
// returned by SendArticleReq.ValidateAll() if the designated constraints
// aren't met.
type SendArticleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendArticleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendArticleReqMultiError) AllErrors() []error { return m }

// SendArticleReqValidationError is the validation error returned by
// SendArticleReq.Validate if the designated constraints aren't met.
type SendArticleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendArticleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendArticleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendArticleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendArticleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendArticleReqValidationError) ErrorName() string { return "SendArticleReqValidationError" }

// Error satisfies the builtin error interface
func (e SendArticleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendArticleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendArticleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendArticleReqValidationError{}

// Validate checks the field values on GetArticleListReply_Article with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListReply_Article) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListReply_Article with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleListReply_ArticleMultiError, or nil if none found.
func (m *GetArticleListReply_Article) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListReply_Article) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetArticleListReply_ArticleMultiError(errors)
	}

	return nil
}

// GetArticleListReply_ArticleMultiError is an error wrapping multiple
// validation errors returned by GetArticleListReply_Article.ValidateAll() if
// the designated constraints aren't met.
type GetArticleListReply_ArticleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListReply_ArticleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListReply_ArticleMultiError) AllErrors() []error { return m }

// GetArticleListReply_ArticleValidationError is the validation error returned
// by GetArticleListReply_Article.Validate if the designated constraints
// aren't met.
type GetArticleListReply_ArticleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListReply_ArticleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListReply_ArticleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListReply_ArticleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListReply_ArticleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListReply_ArticleValidationError) ErrorName() string {
	return "GetArticleListReply_ArticleValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListReply_ArticleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListReply_Article.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListReply_ArticleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListReply_ArticleValidationError{}

// Validate checks the field values on GetArticleListHotReply_Article with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListHotReply_Article) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListHotReply_Article with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetArticleListHotReply_ArticleMultiError, or nil if none found.
func (m *GetArticleListHotReply_Article) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListHotReply_Article) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetArticleListHotReply_ArticleMultiError(errors)
	}

	return nil
}

// GetArticleListHotReply_ArticleMultiError is an error wrapping multiple
// validation errors returned by GetArticleListHotReply_Article.ValidateAll()
// if the designated constraints aren't met.
type GetArticleListHotReply_ArticleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListHotReply_ArticleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListHotReply_ArticleMultiError) AllErrors() []error { return m }

// GetArticleListHotReply_ArticleValidationError is the validation error
// returned by GetArticleListHotReply_Article.Validate if the designated
// constraints aren't met.
type GetArticleListHotReply_ArticleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListHotReply_ArticleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListHotReply_ArticleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListHotReply_ArticleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListHotReply_ArticleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListHotReply_ArticleValidationError) ErrorName() string {
	return "GetArticleListHotReply_ArticleValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListHotReply_ArticleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListHotReply_Article.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListHotReply_ArticleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListHotReply_ArticleValidationError{}

// Validate checks the field values on GetArticleListStatisticReply_Count with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetArticleListStatisticReply_Count) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListStatisticReply_Count
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetArticleListStatisticReply_CountMultiError, or nil if none found.
func (m *GetArticleListStatisticReply_Count) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListStatisticReply_Count) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Agree

	// no validation rules for Collect

	// no validation rules for View

	// no validation rules for Comment

	if len(errors) > 0 {
		return GetArticleListStatisticReply_CountMultiError(errors)
	}

	return nil
}

// GetArticleListStatisticReply_CountMultiError is an error wrapping multiple
// validation errors returned by
// GetArticleListStatisticReply_Count.ValidateAll() if the designated
// constraints aren't met.
type GetArticleListStatisticReply_CountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListStatisticReply_CountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListStatisticReply_CountMultiError) AllErrors() []error { return m }

// GetArticleListStatisticReply_CountValidationError is the validation error
// returned by GetArticleListStatisticReply_Count.Validate if the designated
// constraints aren't met.
type GetArticleListStatisticReply_CountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListStatisticReply_CountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListStatisticReply_CountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListStatisticReply_CountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListStatisticReply_CountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListStatisticReply_CountValidationError) ErrorName() string {
	return "GetArticleListStatisticReply_CountValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListStatisticReply_CountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListStatisticReply_Count.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListStatisticReply_CountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListStatisticReply_CountValidationError{}

// Validate checks the field values on GetArticleDraftListReply_Draft with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleDraftListReply_Draft) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleDraftListReply_Draft with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetArticleDraftListReply_DraftMultiError, or nil if none found.
func (m *GetArticleDraftListReply_Draft) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleDraftListReply_Draft) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetArticleDraftListReply_DraftMultiError(errors)
	}

	return nil
}

// GetArticleDraftListReply_DraftMultiError is an error wrapping multiple
// validation errors returned by GetArticleDraftListReply_Draft.ValidateAll()
// if the designated constraints aren't met.
type GetArticleDraftListReply_DraftMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleDraftListReply_DraftMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleDraftListReply_DraftMultiError) AllErrors() []error { return m }

// GetArticleDraftListReply_DraftValidationError is the validation error
// returned by GetArticleDraftListReply_Draft.Validate if the designated
// constraints aren't met.
type GetArticleDraftListReply_DraftValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleDraftListReply_DraftValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleDraftListReply_DraftValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleDraftListReply_DraftValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleDraftListReply_DraftValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleDraftListReply_DraftValidationError) ErrorName() string {
	return "GetArticleDraftListReply_DraftValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleDraftListReply_DraftValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleDraftListReply_Draft.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleDraftListReply_DraftValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleDraftListReply_DraftValidationError{}
