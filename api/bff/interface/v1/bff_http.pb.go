// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.3.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type BffHTTPServer interface {
	ArticleDraftMark(context.Context, *ArticleDraftMarkReq) (*emptypb.Empty, error)
	ChangeUserPassword(context.Context, *ChangeUserPasswordReq) (*emptypb.Empty, error)
	CreateArticleDraft(context.Context, *emptypb.Empty) (*CreateArticleDraftReply, error)
	CreateCollections(context.Context, *CreateCollectionsReq) (*emptypb.Empty, error)
	GetAccount(context.Context, *emptypb.Empty) (*GetAccountReply, error)
	GetArticleDraftList(context.Context, *emptypb.Empty) (*GetArticleDraftListReply, error)
	GetArticleList(context.Context, *GetArticleListReq) (*GetArticleListReply, error)
	GetArticleListHot(context.Context, *GetArticleListHotReq) (*GetArticleListHotReply, error)
	GetArticleListStatistic(context.Context, *GetArticleListStatisticReq) (*GetArticleListStatisticReply, error)
	GetArticleStatistic(context.Context, *GetArticleStatisticReq) (*GetArticleStatisticReply, error)
	GetCosSessionKey(context.Context, *emptypb.Empty) (*GetCosSessionKeyReply, error)
	GetLastArticleDraft(context.Context, *emptypb.Empty) (*GetLastArticleDraftReply, error)
	GetLeaderBoard(context.Context, *emptypb.Empty) (*GetLeaderBoardReply, error)
	GetProfile(context.Context, *emptypb.Empty) (*GetProfileReply, error)
	GetProfileUpdate(context.Context, *emptypb.Empty) (*GetProfileUpdateReply, error)
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoReply, error)
	LoginByCode(context.Context, *LoginByCodeReq) (*LoginReply, error)
	LoginByGithub(context.Context, *LoginByGithubReq) (*LoginReply, error)
	LoginByPassword(context.Context, *LoginByPasswordReq) (*LoginReply, error)
	LoginByWeChat(context.Context, *LoginByWeChatReq) (*LoginReply, error)
	LoginPasswordReset(context.Context, *LoginPasswordResetReq) (*emptypb.Empty, error)
	SendArticle(context.Context, *SendArticleReq) (*emptypb.Empty, error)
	SendEmailCode(context.Context, *SendEmailCodeReq) (*emptypb.Empty, error)
	SendPhoneCode(context.Context, *SendPhoneCodeReq) (*emptypb.Empty, error)
	SetArticleAgree(context.Context, *SetArticleAgreeReq) (*emptypb.Empty, error)
	SetArticleCollect(context.Context, *SetArticleCollectReq) (*emptypb.Empty, error)
	SetArticleView(context.Context, *SetArticleViewReq) (*emptypb.Empty, error)
	SetProfileUpdate(context.Context, *SetProfileUpdateReq) (*emptypb.Empty, error)
	SetUserEmail(context.Context, *SetUserEmailReq) (*emptypb.Empty, error)
	SetUserPassword(context.Context, *SetUserPasswordReq) (*emptypb.Empty, error)
	SetUserPhone(context.Context, *SetUserPhoneReq) (*emptypb.Empty, error)
	UnbindUserEmail(context.Context, *UnbindUserEmailReq) (*emptypb.Empty, error)
	UnbindUserPhone(context.Context, *UnbindUserPhoneReq) (*emptypb.Empty, error)
	UserRegister(context.Context, *UserRegisterReq) (*emptypb.Empty, error)
}

func RegisterBffHTTPServer(s *http.Server, srv BffHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/user/register", _Bff_UserRegister0_HTTP_Handler(srv))
	r.POST("/v1/user/login/password", _Bff_LoginByPassword0_HTTP_Handler(srv))
	r.POST("/v1/user/login/code", _Bff_LoginByCode0_HTTP_Handler(srv))
	r.POST("/v1/user/login/wechat", _Bff_LoginByWeChat0_HTTP_Handler(srv))
	r.POST("/v1/user/login/github", _Bff_LoginByGithub0_HTTP_Handler(srv))
	r.POST("/v1/user/login/password/reset", _Bff_LoginPasswordReset0_HTTP_Handler(srv))
	r.POST("/v1/user/code/phone", _Bff_SendPhoneCode0_HTTP_Handler(srv))
	r.POST("/v1/user/code/email", _Bff_SendEmailCode0_HTTP_Handler(srv))
	r.GET("/v1/get/cos/session/key", _Bff_GetCosSessionKey0_HTTP_Handler(srv))
	r.GET("/v1/get/user/account", _Bff_GetAccount0_HTTP_Handler(srv))
	r.GET("/v1/get/user/profile", _Bff_GetProfile0_HTTP_Handler(srv))
	r.GET("/v1/get/user/info", _Bff_GetUserInfo0_HTTP_Handler(srv))
	r.GET("/v1/get/user/profile/update", _Bff_GetProfileUpdate0_HTTP_Handler(srv))
	r.POST("/v1/set/user/profile/update", _Bff_SetProfileUpdate0_HTTP_Handler(srv))
	r.POST("/v1/set/user/phone", _Bff_SetUserPhone0_HTTP_Handler(srv))
	r.POST("/v1/set/user/email", _Bff_SetUserEmail0_HTTP_Handler(srv))
	r.POST("/v1/set/user/password", _Bff_SetUserPassword0_HTTP_Handler(srv))
	r.POST("/v1/change/user/password", _Bff_ChangeUserPassword0_HTTP_Handler(srv))
	r.POST("/v1/unbind/user/phone", _Bff_UnbindUserPhone0_HTTP_Handler(srv))
	r.POST("/v1/unbind/user/email", _Bff_UnbindUserEmail0_HTTP_Handler(srv))
	r.GET("/v1/get/leaderboard", _Bff_GetLeaderBoard0_HTTP_Handler(srv))
	r.GET("/v1/get/article/list", _Bff_GetArticleList0_HTTP_Handler(srv))
	r.GET("/v1/get/article/list/hot", _Bff_GetArticleListHot0_HTTP_Handler(srv))
	r.GET("/v1/get/article/statistic", _Bff_GetArticleStatistic0_HTTP_Handler(srv))
	r.GET("/v1/get/article/list/statistic", _Bff_GetArticleListStatistic0_HTTP_Handler(srv))
	r.GET("/v1/get/last/article/draft", _Bff_GetLastArticleDraft0_HTTP_Handler(srv))
	r.POST("/v1/create/article/draft", _Bff_CreateArticleDraft0_HTTP_Handler(srv))
	r.POST("/v1/create/article/collections", _Bff_CreateCollections0_HTTP_Handler(srv))
	r.POST("/v1/article/draft/mark", _Bff_ArticleDraftMark0_HTTP_Handler(srv))
	r.GET("/v1/get/article/draft/list", _Bff_GetArticleDraftList0_HTTP_Handler(srv))
	r.POST("/v1/send/article", _Bff_SendArticle0_HTTP_Handler(srv))
	r.POST("/v1/set/article/agree", _Bff_SetArticleAgree0_HTTP_Handler(srv))
	r.POST("/v1/set/article/view", _Bff_SetArticleView0_HTTP_Handler(srv))
	r.POST("/v1/set/article/collect", _Bff_SetArticleCollect0_HTTP_Handler(srv))
}

func _Bff_UserRegister0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserRegisterReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/UserRegister")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserRegister(ctx, req.(*UserRegisterReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_LoginByPassword0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginByPasswordReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/LoginByPassword")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginByPassword(ctx, req.(*LoginByPasswordReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_LoginByCode0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginByCodeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/LoginByCode")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginByCode(ctx, req.(*LoginByCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_LoginByWeChat0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginByWeChatReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/LoginByWeChat")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginByWeChat(ctx, req.(*LoginByWeChatReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_LoginByGithub0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginByGithubReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/LoginByGithub")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginByGithub(ctx, req.(*LoginByGithubReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_LoginPasswordReset0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginPasswordResetReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/LoginPasswordReset")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginPasswordReset(ctx, req.(*LoginPasswordResetReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SendPhoneCode0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendPhoneCodeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/SendPhoneCode")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendPhoneCode(ctx, req.(*SendPhoneCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SendEmailCode0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendEmailCodeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/SendEmailCode")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendEmailCode(ctx, req.(*SendEmailCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetCosSessionKey0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetCosSessionKey")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCosSessionKey(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCosSessionKeyReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetAccount0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetAccount")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAccount(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAccountReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetProfile0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetProfile")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProfile(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetProfileReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetUserInfo0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserInfoReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetUserInfo")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserInfo(ctx, req.(*GetUserInfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetProfileUpdate0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetProfileUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProfileUpdate(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetProfileUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_SetProfileUpdate0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetProfileUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/SetProfileUpdate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetProfileUpdate(ctx, req.(*SetProfileUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SetUserPhone0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetUserPhoneReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/SetUserPhone")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetUserPhone(ctx, req.(*SetUserPhoneReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SetUserEmail0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetUserEmailReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/SetUserEmail")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetUserEmail(ctx, req.(*SetUserEmailReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SetUserPassword0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetUserPasswordReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/SetUserPassword")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetUserPassword(ctx, req.(*SetUserPasswordReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_ChangeUserPassword0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ChangeUserPasswordReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/ChangeUserPassword")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ChangeUserPassword(ctx, req.(*ChangeUserPasswordReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_UnbindUserPhone0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UnbindUserPhoneReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/UnbindUserPhone")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UnbindUserPhone(ctx, req.(*UnbindUserPhoneReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_UnbindUserEmail0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UnbindUserEmailReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/UnbindUserEmail")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UnbindUserEmail(ctx, req.(*UnbindUserEmailReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetLeaderBoard0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetLeaderBoard")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLeaderBoard(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetLeaderBoardReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetArticleList0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetArticleListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetArticleList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArticleList(ctx, req.(*GetArticleListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleListReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetArticleListHot0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetArticleListHotReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetArticleListHot")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArticleListHot(ctx, req.(*GetArticleListHotReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleListHotReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetArticleStatistic0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetArticleStatisticReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetArticleStatistic")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArticleStatistic(ctx, req.(*GetArticleStatisticReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleStatisticReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetArticleListStatistic0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetArticleListStatisticReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetArticleListStatistic")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArticleListStatistic(ctx, req.(*GetArticleListStatisticReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleListStatisticReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetLastArticleDraft0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetLastArticleDraft")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLastArticleDraft(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetLastArticleDraftReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_CreateArticleDraft0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/CreateArticleDraft")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateArticleDraft(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateArticleDraftReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_CreateCollections0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCollectionsReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/CreateCollections")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCollections(ctx, req.(*CreateCollectionsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_ArticleDraftMark0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ArticleDraftMarkReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/ArticleDraftMark")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ArticleDraftMark(ctx, req.(*ArticleDraftMarkReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetArticleDraftList0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/GetArticleDraftList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetArticleDraftList(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetArticleDraftListReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_SendArticle0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendArticleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/SendArticle")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendArticle(ctx, req.(*SendArticleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SetArticleAgree0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetArticleAgreeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/SetArticleAgree")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetArticleAgree(ctx, req.(*SetArticleAgreeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SetArticleView0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetArticleViewReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/SetArticleView")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetArticleView(ctx, req.(*SetArticleViewReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Bff_SetArticleCollect0_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetArticleCollectReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/bff.v1.Bff/SetArticleCollect")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetArticleCollect(ctx, req.(*SetArticleCollectReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type BffHTTPClient interface {
	ArticleDraftMark(ctx context.Context, req *ArticleDraftMarkReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	ChangeUserPassword(ctx context.Context, req *ChangeUserPasswordReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	CreateArticleDraft(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *CreateArticleDraftReply, err error)
	CreateCollections(ctx context.Context, req *CreateCollectionsReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetAccount(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetAccountReply, err error)
	GetArticleDraftList(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetArticleDraftListReply, err error)
	GetArticleList(ctx context.Context, req *GetArticleListReq, opts ...http.CallOption) (rsp *GetArticleListReply, err error)
	GetArticleListHot(ctx context.Context, req *GetArticleListHotReq, opts ...http.CallOption) (rsp *GetArticleListHotReply, err error)
	GetArticleListStatistic(ctx context.Context, req *GetArticleListStatisticReq, opts ...http.CallOption) (rsp *GetArticleListStatisticReply, err error)
	GetArticleStatistic(ctx context.Context, req *GetArticleStatisticReq, opts ...http.CallOption) (rsp *GetArticleStatisticReply, err error)
	GetCosSessionKey(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetCosSessionKeyReply, err error)
	GetLastArticleDraft(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetLastArticleDraftReply, err error)
	GetLeaderBoard(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetLeaderBoardReply, err error)
	GetProfile(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetProfileReply, err error)
	GetProfileUpdate(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetProfileUpdateReply, err error)
	GetUserInfo(ctx context.Context, req *GetUserInfoReq, opts ...http.CallOption) (rsp *GetUserInfoReply, err error)
	LoginByCode(ctx context.Context, req *LoginByCodeReq, opts ...http.CallOption) (rsp *LoginReply, err error)
	LoginByGithub(ctx context.Context, req *LoginByGithubReq, opts ...http.CallOption) (rsp *LoginReply, err error)
	LoginByPassword(ctx context.Context, req *LoginByPasswordReq, opts ...http.CallOption) (rsp *LoginReply, err error)
	LoginByWeChat(ctx context.Context, req *LoginByWeChatReq, opts ...http.CallOption) (rsp *LoginReply, err error)
	LoginPasswordReset(ctx context.Context, req *LoginPasswordResetReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SendArticle(ctx context.Context, req *SendArticleReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SendEmailCode(ctx context.Context, req *SendEmailCodeReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SendPhoneCode(ctx context.Context, req *SendPhoneCodeReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetArticleAgree(ctx context.Context, req *SetArticleAgreeReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetArticleCollect(ctx context.Context, req *SetArticleCollectReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetArticleView(ctx context.Context, req *SetArticleViewReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetProfileUpdate(ctx context.Context, req *SetProfileUpdateReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetUserEmail(ctx context.Context, req *SetUserEmailReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetUserPassword(ctx context.Context, req *SetUserPasswordReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetUserPhone(ctx context.Context, req *SetUserPhoneReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UnbindUserEmail(ctx context.Context, req *UnbindUserEmailReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UnbindUserPhone(ctx context.Context, req *UnbindUserPhoneReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UserRegister(ctx context.Context, req *UserRegisterReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type BffHTTPClientImpl struct {
	cc *http.Client
}

func NewBffHTTPClient(client *http.Client) BffHTTPClient {
	return &BffHTTPClientImpl{client}
}

func (c *BffHTTPClientImpl) ArticleDraftMark(ctx context.Context, in *ArticleDraftMarkReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/article/draft/mark"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/ArticleDraftMark"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) ChangeUserPassword(ctx context.Context, in *ChangeUserPasswordReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/change/user/password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/ChangeUserPassword"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) CreateArticleDraft(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*CreateArticleDraftReply, error) {
	var out CreateArticleDraftReply
	pattern := "/v1/create/article/draft"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/CreateArticleDraft"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) CreateCollections(ctx context.Context, in *CreateCollectionsReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/create/article/collections"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/CreateCollections"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetAccount(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetAccountReply, error) {
	var out GetAccountReply
	pattern := "/v1/get/user/account"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetAccount"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetArticleDraftList(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetArticleDraftListReply, error) {
	var out GetArticleDraftListReply
	pattern := "/v1/get/article/draft/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetArticleDraftList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetArticleList(ctx context.Context, in *GetArticleListReq, opts ...http.CallOption) (*GetArticleListReply, error) {
	var out GetArticleListReply
	pattern := "/v1/get/article/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetArticleList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetArticleListHot(ctx context.Context, in *GetArticleListHotReq, opts ...http.CallOption) (*GetArticleListHotReply, error) {
	var out GetArticleListHotReply
	pattern := "/v1/get/article/list/hot"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetArticleListHot"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetArticleListStatistic(ctx context.Context, in *GetArticleListStatisticReq, opts ...http.CallOption) (*GetArticleListStatisticReply, error) {
	var out GetArticleListStatisticReply
	pattern := "/v1/get/article/list/statistic"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetArticleListStatistic"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetArticleStatistic(ctx context.Context, in *GetArticleStatisticReq, opts ...http.CallOption) (*GetArticleStatisticReply, error) {
	var out GetArticleStatisticReply
	pattern := "/v1/get/article/statistic"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetArticleStatistic"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetCosSessionKey(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetCosSessionKeyReply, error) {
	var out GetCosSessionKeyReply
	pattern := "/v1/get/cos/session/key"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetCosSessionKey"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetLastArticleDraft(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetLastArticleDraftReply, error) {
	var out GetLastArticleDraftReply
	pattern := "/v1/get/last/article/draft"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetLastArticleDraft"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetLeaderBoard(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetLeaderBoardReply, error) {
	var out GetLeaderBoardReply
	pattern := "/v1/get/leaderboard"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetLeaderBoard"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetProfile(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetProfileReply, error) {
	var out GetProfileReply
	pattern := "/v1/get/user/profile"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetProfile"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetProfileUpdate(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetProfileUpdateReply, error) {
	var out GetProfileUpdateReply
	pattern := "/v1/get/user/profile/update"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetProfileUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...http.CallOption) (*GetUserInfoReply, error) {
	var out GetUserInfoReply
	pattern := "/v1/get/user/info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/bff.v1.Bff/GetUserInfo"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) LoginByCode(ctx context.Context, in *LoginByCodeReq, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/v1/user/login/code"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/LoginByCode"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) LoginByGithub(ctx context.Context, in *LoginByGithubReq, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/v1/user/login/github"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/LoginByGithub"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) LoginByPassword(ctx context.Context, in *LoginByPasswordReq, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/v1/user/login/password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/LoginByPassword"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) LoginByWeChat(ctx context.Context, in *LoginByWeChatReq, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/v1/user/login/wechat"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/LoginByWeChat"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) LoginPasswordReset(ctx context.Context, in *LoginPasswordResetReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/user/login/password/reset"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/LoginPasswordReset"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SendArticle(ctx context.Context, in *SendArticleReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/send/article"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/SendArticle"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SendEmailCode(ctx context.Context, in *SendEmailCodeReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/user/code/email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/SendEmailCode"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SendPhoneCode(ctx context.Context, in *SendPhoneCodeReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/user/code/phone"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/SendPhoneCode"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SetArticleAgree(ctx context.Context, in *SetArticleAgreeReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/set/article/agree"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/SetArticleAgree"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SetArticleCollect(ctx context.Context, in *SetArticleCollectReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/set/article/collect"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/SetArticleCollect"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SetArticleView(ctx context.Context, in *SetArticleViewReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/set/article/view"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/SetArticleView"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SetProfileUpdate(ctx context.Context, in *SetProfileUpdateReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/set/user/profile/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/SetProfileUpdate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SetUserEmail(ctx context.Context, in *SetUserEmailReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/set/user/email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/SetUserEmail"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SetUserPassword(ctx context.Context, in *SetUserPasswordReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/set/user/password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/SetUserPassword"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) SetUserPhone(ctx context.Context, in *SetUserPhoneReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/set/user/phone"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/SetUserPhone"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) UnbindUserEmail(ctx context.Context, in *UnbindUserEmailReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/unbind/user/email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/UnbindUserEmail"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) UnbindUserPhone(ctx context.Context, in *UnbindUserPhoneReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/unbind/user/phone"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/UnbindUserPhone"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) UserRegister(ctx context.Context, in *UserRegisterReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/user/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/bff.v1.Bff/UserRegister"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
