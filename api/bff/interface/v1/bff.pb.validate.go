// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: bff/interface/v1/bff.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserRegisterReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserRegisterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRegisterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRegisterReqMultiError, or nil if none found.
func (m *UserRegisterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRegisterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Password

	// no validation rules for Code

	if len(errors) > 0 {
		return UserRegisterReqMultiError(errors)
	}

	return nil
}

// UserRegisterReqMultiError is an error wrapping multiple validation errors
// returned by UserRegisterReq.ValidateAll() if the designated constraints
// aren't met.
type UserRegisterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRegisterReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRegisterReqMultiError) AllErrors() []error { return m }

// UserRegisterReqValidationError is the validation error returned by
// UserRegisterReq.Validate if the designated constraints aren't met.
type UserRegisterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRegisterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRegisterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRegisterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRegisterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRegisterReqValidationError) ErrorName() string { return "UserRegisterReqValidationError" }

// Error satisfies the builtin error interface
func (e UserRegisterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRegisterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRegisterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRegisterReqValidationError{}

// Validate checks the field values on LoginByPasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginByPasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByPasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByPasswordReqMultiError, or nil if none found.
func (m *LoginByPasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByPasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for Password

	// no validation rules for Mode

	if len(errors) > 0 {
		return LoginByPasswordReqMultiError(errors)
	}

	return nil
}

// LoginByPasswordReqMultiError is an error wrapping multiple validation errors
// returned by LoginByPasswordReq.ValidateAll() if the designated constraints
// aren't met.
type LoginByPasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByPasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByPasswordReqMultiError) AllErrors() []error { return m }

// LoginByPasswordReqValidationError is the validation error returned by
// LoginByPasswordReq.Validate if the designated constraints aren't met.
type LoginByPasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByPasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByPasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByPasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByPasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByPasswordReqValidationError) ErrorName() string {
	return "LoginByPasswordReqValidationError"
}

// Error satisfies the builtin error interface
func (e LoginByPasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByPasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByPasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByPasswordReqValidationError{}

// Validate checks the field values on LoginByCodeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginByCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByCodeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginByCodeReqMultiError,
// or nil if none found.
func (m *LoginByCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phone

	// no validation rules for Code

	if len(errors) > 0 {
		return LoginByCodeReqMultiError(errors)
	}

	return nil
}

// LoginByCodeReqMultiError is an error wrapping multiple validation errors
// returned by LoginByCodeReq.ValidateAll() if the designated constraints
// aren't met.
type LoginByCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByCodeReqMultiError) AllErrors() []error { return m }

// LoginByCodeReqValidationError is the validation error returned by
// LoginByCodeReq.Validate if the designated constraints aren't met.
type LoginByCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByCodeReqValidationError) ErrorName() string { return "LoginByCodeReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginByCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByCodeReqValidationError{}

// Validate checks the field values on LoginByWeChatReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginByWeChatReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByWeChatReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByWeChatReqMultiError, or nil if none found.
func (m *LoginByWeChatReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByWeChatReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Wechat

	if len(errors) > 0 {
		return LoginByWeChatReqMultiError(errors)
	}

	return nil
}

// LoginByWeChatReqMultiError is an error wrapping multiple validation errors
// returned by LoginByWeChatReq.ValidateAll() if the designated constraints
// aren't met.
type LoginByWeChatReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByWeChatReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByWeChatReqMultiError) AllErrors() []error { return m }

// LoginByWeChatReqValidationError is the validation error returned by
// LoginByWeChatReq.Validate if the designated constraints aren't met.
type LoginByWeChatReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByWeChatReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByWeChatReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByWeChatReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByWeChatReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByWeChatReqValidationError) ErrorName() string { return "LoginByWeChatReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginByWeChatReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByWeChatReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByWeChatReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByWeChatReqValidationError{}

// Validate checks the field values on LoginByGithubReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginByGithubReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByGithubReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByGithubReqMultiError, or nil if none found.
func (m *LoginByGithubReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByGithubReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Github

	if len(errors) > 0 {
		return LoginByGithubReqMultiError(errors)
	}

	return nil
}

// LoginByGithubReqMultiError is an error wrapping multiple validation errors
// returned by LoginByGithubReq.ValidateAll() if the designated constraints
// aren't met.
type LoginByGithubReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByGithubReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByGithubReqMultiError) AllErrors() []error { return m }

// LoginByGithubReqValidationError is the validation error returned by
// LoginByGithubReq.Validate if the designated constraints aren't met.
type LoginByGithubReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByGithubReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByGithubReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByGithubReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByGithubReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByGithubReqValidationError) ErrorName() string { return "LoginByGithubReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginByGithubReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByGithubReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByGithubReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByGithubReqValidationError{}

// Validate checks the field values on LoginReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReplyMultiError, or
// nil if none found.
func (m *LoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginReplyMultiError(errors)
	}

	return nil
}

// LoginReplyMultiError is an error wrapping multiple validation errors
// returned by LoginReply.ValidateAll() if the designated constraints aren't met.
type LoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReplyMultiError) AllErrors() []error { return m }

// LoginReplyValidationError is the validation error returned by
// LoginReply.Validate if the designated constraints aren't met.
type LoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReplyValidationError) ErrorName() string { return "LoginReplyValidationError" }

// Error satisfies the builtin error interface
func (e LoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReplyValidationError{}

// Validate checks the field values on LoginPasswordResetReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginPasswordResetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginPasswordResetReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginPasswordResetReqMultiError, or nil if none found.
func (m *LoginPasswordResetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginPasswordResetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for Code

	// no validation rules for Password

	// no validation rules for Mode

	if len(errors) > 0 {
		return LoginPasswordResetReqMultiError(errors)
	}

	return nil
}

// LoginPasswordResetReqMultiError is an error wrapping multiple validation
// errors returned by LoginPasswordResetReq.ValidateAll() if the designated
// constraints aren't met.
type LoginPasswordResetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginPasswordResetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginPasswordResetReqMultiError) AllErrors() []error { return m }

// LoginPasswordResetReqValidationError is the validation error returned by
// LoginPasswordResetReq.Validate if the designated constraints aren't met.
type LoginPasswordResetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginPasswordResetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginPasswordResetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginPasswordResetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginPasswordResetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginPasswordResetReqValidationError) ErrorName() string {
	return "LoginPasswordResetReqValidationError"
}

// Error satisfies the builtin error interface
func (e LoginPasswordResetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginPasswordResetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginPasswordResetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginPasswordResetReqValidationError{}

// Validate checks the field values on SendPhoneCodeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendPhoneCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendPhoneCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendPhoneCodeReqMultiError, or nil if none found.
func (m *SendPhoneCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendPhoneCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phone

	// no validation rules for Template

	if len(errors) > 0 {
		return SendPhoneCodeReqMultiError(errors)
	}

	return nil
}

// SendPhoneCodeReqMultiError is an error wrapping multiple validation errors
// returned by SendPhoneCodeReq.ValidateAll() if the designated constraints
// aren't met.
type SendPhoneCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendPhoneCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendPhoneCodeReqMultiError) AllErrors() []error { return m }

// SendPhoneCodeReqValidationError is the validation error returned by
// SendPhoneCodeReq.Validate if the designated constraints aren't met.
type SendPhoneCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendPhoneCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendPhoneCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendPhoneCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendPhoneCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendPhoneCodeReqValidationError) ErrorName() string { return "SendPhoneCodeReqValidationError" }

// Error satisfies the builtin error interface
func (e SendPhoneCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendPhoneCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendPhoneCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendPhoneCodeReqValidationError{}

// Validate checks the field values on SendEmailCodeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendEmailCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendEmailCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendEmailCodeReqMultiError, or nil if none found.
func (m *SendEmailCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendEmailCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Template

	if len(errors) > 0 {
		return SendEmailCodeReqMultiError(errors)
	}

	return nil
}

// SendEmailCodeReqMultiError is an error wrapping multiple validation errors
// returned by SendEmailCodeReq.ValidateAll() if the designated constraints
// aren't met.
type SendEmailCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendEmailCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendEmailCodeReqMultiError) AllErrors() []error { return m }

// SendEmailCodeReqValidationError is the validation error returned by
// SendEmailCodeReq.Validate if the designated constraints aren't met.
type SendEmailCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendEmailCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendEmailCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendEmailCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendEmailCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendEmailCodeReqValidationError) ErrorName() string { return "SendEmailCodeReqValidationError" }

// Error satisfies the builtin error interface
func (e SendEmailCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendEmailCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendEmailCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendEmailCodeReqValidationError{}

// Validate checks the field values on GetCosSessionKeyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCosSessionKeyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCosSessionKeyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCosSessionKeyReplyMultiError, or nil if none found.
func (m *GetCosSessionKeyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCosSessionKeyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TmpSecretId

	// no validation rules for TmpSecretKey

	// no validation rules for SessionToken

	// no validation rules for StartTime

	// no validation rules for ExpiredTime

	if len(errors) > 0 {
		return GetCosSessionKeyReplyMultiError(errors)
	}

	return nil
}

// GetCosSessionKeyReplyMultiError is an error wrapping multiple validation
// errors returned by GetCosSessionKeyReply.ValidateAll() if the designated
// constraints aren't met.
type GetCosSessionKeyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCosSessionKeyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCosSessionKeyReplyMultiError) AllErrors() []error { return m }

// GetCosSessionKeyReplyValidationError is the validation error returned by
// GetCosSessionKeyReply.Validate if the designated constraints aren't met.
type GetCosSessionKeyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCosSessionKeyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCosSessionKeyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCosSessionKeyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCosSessionKeyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCosSessionKeyReplyValidationError) ErrorName() string {
	return "GetCosSessionKeyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCosSessionKeyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCosSessionKeyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCosSessionKeyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCosSessionKeyReplyValidationError{}

// Validate checks the field values on GetUserProfileReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserProfileReplyMultiError, or nil if none found.
func (m *GetUserProfileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Username

	// no validation rules for Avatar

	// no validation rules for School

	// no validation rules for Company

	// no validation rules for Job

	// no validation rules for Homepage

	// no validation rules for Introduce

	if len(errors) > 0 {
		return GetUserProfileReplyMultiError(errors)
	}

	return nil
}

// GetUserProfileReplyMultiError is an error wrapping multiple validation
// errors returned by GetUserProfileReply.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileReplyMultiError) AllErrors() []error { return m }

// GetUserProfileReplyValidationError is the validation error returned by
// GetUserProfileReply.Validate if the designated constraints aren't met.
type GetUserProfileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileReplyValidationError) ErrorName() string {
	return "GetUserProfileReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileReplyValidationError{}

// Validate checks the field values on GetUserProfileUpdateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileUpdateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileUpdateReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserProfileUpdateReplyMultiError, or nil if none found.
func (m *GetUserProfileUpdateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileUpdateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Avatar

	// no validation rules for School

	// no validation rules for Company

	// no validation rules for Job

	// no validation rules for Homepage

	// no validation rules for Introduce

	// no validation rules for Status

	if len(errors) > 0 {
		return GetUserProfileUpdateReplyMultiError(errors)
	}

	return nil
}

// GetUserProfileUpdateReplyMultiError is an error wrapping multiple validation
// errors returned by GetUserProfileUpdateReply.ValidateAll() if the
// designated constraints aren't met.
type GetUserProfileUpdateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileUpdateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileUpdateReplyMultiError) AllErrors() []error { return m }

// GetUserProfileUpdateReplyValidationError is the validation error returned by
// GetUserProfileUpdateReply.Validate if the designated constraints aren't met.
type GetUserProfileUpdateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileUpdateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileUpdateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileUpdateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileUpdateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileUpdateReplyValidationError) ErrorName() string {
	return "GetUserProfileUpdateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileUpdateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileUpdateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileUpdateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileUpdateReplyValidationError{}

// Validate checks the field values on SetUserProfileReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetUserProfileReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserProfileReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserProfileReqMultiError, or nil if none found.
func (m *SetUserProfileReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserProfileReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for School

	// no validation rules for Company

	// no validation rules for Job

	// no validation rules for Homepage

	// no validation rules for Introduce

	if len(errors) > 0 {
		return SetUserProfileReqMultiError(errors)
	}

	return nil
}

// SetUserProfileReqMultiError is an error wrapping multiple validation errors
// returned by SetUserProfileReq.ValidateAll() if the designated constraints
// aren't met.
type SetUserProfileReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserProfileReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserProfileReqMultiError) AllErrors() []error { return m }

// SetUserProfileReqValidationError is the validation error returned by
// SetUserProfileReq.Validate if the designated constraints aren't met.
type SetUserProfileReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserProfileReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserProfileReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserProfileReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserProfileReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserProfileReqValidationError) ErrorName() string {
	return "SetUserProfileReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetUserProfileReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserProfileReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserProfileReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserProfileReqValidationError{}

// Validate checks the field values on ProfileReviewReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProfileReviewReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileReviewReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProfileReviewReqMultiError, or nil if none found.
func (m *ProfileReviewReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileReviewReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJobsDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProfileReviewReqValidationError{
					field:  "JobsDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProfileReviewReqValidationError{
					field:  "JobsDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJobsDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProfileReviewReqValidationError{
				field:  "JobsDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EventName

	if len(errors) > 0 {
		return ProfileReviewReqMultiError(errors)
	}

	return nil
}

// ProfileReviewReqMultiError is an error wrapping multiple validation errors
// returned by ProfileReviewReq.ValidateAll() if the designated constraints
// aren't met.
type ProfileReviewReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileReviewReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileReviewReqMultiError) AllErrors() []error { return m }

// ProfileReviewReqValidationError is the validation error returned by
// ProfileReviewReq.Validate if the designated constraints aren't met.
type ProfileReviewReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileReviewReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileReviewReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileReviewReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileReviewReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileReviewReqValidationError) ErrorName() string { return "ProfileReviewReqValidationError" }

// Error satisfies the builtin error interface
func (e ProfileReviewReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileReviewReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileReviewReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileReviewReqValidationError{}

// Validate checks the field values on AvatarReviewReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AvatarReviewReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AvatarReviewReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AvatarReviewReqMultiError, or nil if none found.
func (m *AvatarReviewReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AvatarReviewReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJobsDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AvatarReviewReqValidationError{
					field:  "JobsDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AvatarReviewReqValidationError{
					field:  "JobsDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJobsDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AvatarReviewReqValidationError{
				field:  "JobsDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EventName

	if len(errors) > 0 {
		return AvatarReviewReqMultiError(errors)
	}

	return nil
}

// AvatarReviewReqMultiError is an error wrapping multiple validation errors
// returned by AvatarReviewReq.ValidateAll() if the designated constraints
// aren't met.
type AvatarReviewReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AvatarReviewReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AvatarReviewReqMultiError) AllErrors() []error { return m }

// AvatarReviewReqValidationError is the validation error returned by
// AvatarReviewReq.Validate if the designated constraints aren't met.
type AvatarReviewReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AvatarReviewReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AvatarReviewReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AvatarReviewReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AvatarReviewReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AvatarReviewReqValidationError) ErrorName() string { return "AvatarReviewReqValidationError" }

// Error satisfies the builtin error interface
func (e AvatarReviewReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAvatarReviewReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AvatarReviewReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AvatarReviewReqValidationError{}

// Validate checks the field values on ProfileReviewReq_SectionPornInfoStruct
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ProfileReviewReq_SectionPornInfoStruct) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ProfileReviewReq_SectionPornInfoStruct with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ProfileReviewReq_SectionPornInfoStructMultiError, or nil if none found.
func (m *ProfileReviewReq_SectionPornInfoStruct) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileReviewReq_SectionPornInfoStruct) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HitFlag

	// no validation rules for Score

	// no validation rules for Keywords

	if len(errors) > 0 {
		return ProfileReviewReq_SectionPornInfoStructMultiError(errors)
	}

	return nil
}

// ProfileReviewReq_SectionPornInfoStructMultiError is an error wrapping
// multiple validation errors returned by
// ProfileReviewReq_SectionPornInfoStruct.ValidateAll() if the designated
// constraints aren't met.
type ProfileReviewReq_SectionPornInfoStructMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileReviewReq_SectionPornInfoStructMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileReviewReq_SectionPornInfoStructMultiError) AllErrors() []error { return m }

// ProfileReviewReq_SectionPornInfoStructValidationError is the validation
// error returned by ProfileReviewReq_SectionPornInfoStruct.Validate if the
// designated constraints aren't met.
type ProfileReviewReq_SectionPornInfoStructValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileReviewReq_SectionPornInfoStructValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileReviewReq_SectionPornInfoStructValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileReviewReq_SectionPornInfoStructValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileReviewReq_SectionPornInfoStructValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileReviewReq_SectionPornInfoStructValidationError) ErrorName() string {
	return "ProfileReviewReq_SectionPornInfoStructValidationError"
}

// Error satisfies the builtin error interface
func (e ProfileReviewReq_SectionPornInfoStructValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileReviewReq_SectionPornInfoStruct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileReviewReq_SectionPornInfoStructValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileReviewReq_SectionPornInfoStructValidationError{}

// Validate checks the field values on ProfileReviewReq_SectionAdsInfoStruct
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ProfileReviewReq_SectionAdsInfoStruct) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileReviewReq_SectionAdsInfoStruct
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ProfileReviewReq_SectionAdsInfoStructMultiError, or nil if none found.
func (m *ProfileReviewReq_SectionAdsInfoStruct) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileReviewReq_SectionAdsInfoStruct) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HitFlag

	// no validation rules for Score

	// no validation rules for Keywords

	if len(errors) > 0 {
		return ProfileReviewReq_SectionAdsInfoStructMultiError(errors)
	}

	return nil
}

// ProfileReviewReq_SectionAdsInfoStructMultiError is an error wrapping
// multiple validation errors returned by
// ProfileReviewReq_SectionAdsInfoStruct.ValidateAll() if the designated
// constraints aren't met.
type ProfileReviewReq_SectionAdsInfoStructMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileReviewReq_SectionAdsInfoStructMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileReviewReq_SectionAdsInfoStructMultiError) AllErrors() []error { return m }

// ProfileReviewReq_SectionAdsInfoStructValidationError is the validation error
// returned by ProfileReviewReq_SectionAdsInfoStruct.Validate if the
// designated constraints aren't met.
type ProfileReviewReq_SectionAdsInfoStructValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileReviewReq_SectionAdsInfoStructValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileReviewReq_SectionAdsInfoStructValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileReviewReq_SectionAdsInfoStructValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileReviewReq_SectionAdsInfoStructValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileReviewReq_SectionAdsInfoStructValidationError) ErrorName() string {
	return "ProfileReviewReq_SectionAdsInfoStructValidationError"
}

// Error satisfies the builtin error interface
func (e ProfileReviewReq_SectionAdsInfoStructValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileReviewReq_SectionAdsInfoStruct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileReviewReq_SectionAdsInfoStructValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileReviewReq_SectionAdsInfoStructValidationError{}

// Validate checks the field values on
// ProfileReviewReq_SectionIllegalInfoStruct with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProfileReviewReq_SectionIllegalInfoStruct) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ProfileReviewReq_SectionIllegalInfoStruct with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ProfileReviewReq_SectionIllegalInfoStructMultiError, or nil if none found.
func (m *ProfileReviewReq_SectionIllegalInfoStruct) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileReviewReq_SectionIllegalInfoStruct) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HitFlag

	// no validation rules for Score

	// no validation rules for Keywords

	if len(errors) > 0 {
		return ProfileReviewReq_SectionIllegalInfoStructMultiError(errors)
	}

	return nil
}

// ProfileReviewReq_SectionIllegalInfoStructMultiError is an error wrapping
// multiple validation errors returned by
// ProfileReviewReq_SectionIllegalInfoStruct.ValidateAll() if the designated
// constraints aren't met.
type ProfileReviewReq_SectionIllegalInfoStructMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileReviewReq_SectionIllegalInfoStructMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileReviewReq_SectionIllegalInfoStructMultiError) AllErrors() []error { return m }

// ProfileReviewReq_SectionIllegalInfoStructValidationError is the validation
// error returned by ProfileReviewReq_SectionIllegalInfoStruct.Validate if the
// designated constraints aren't met.
type ProfileReviewReq_SectionIllegalInfoStructValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileReviewReq_SectionIllegalInfoStructValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileReviewReq_SectionIllegalInfoStructValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileReviewReq_SectionIllegalInfoStructValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileReviewReq_SectionIllegalInfoStructValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileReviewReq_SectionIllegalInfoStructValidationError) ErrorName() string {
	return "ProfileReviewReq_SectionIllegalInfoStructValidationError"
}

// Error satisfies the builtin error interface
func (e ProfileReviewReq_SectionIllegalInfoStructValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileReviewReq_SectionIllegalInfoStruct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileReviewReq_SectionIllegalInfoStructValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileReviewReq_SectionIllegalInfoStructValidationError{}

// Validate checks the field values on ProfileReviewReq_SectionAbuseInfoStruct
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ProfileReviewReq_SectionAbuseInfoStruct) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ProfileReviewReq_SectionAbuseInfoStruct with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ProfileReviewReq_SectionAbuseInfoStructMultiError, or nil if none found.
func (m *ProfileReviewReq_SectionAbuseInfoStruct) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileReviewReq_SectionAbuseInfoStruct) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HitFlag

	// no validation rules for Score

	// no validation rules for Keywords

	if len(errors) > 0 {
		return ProfileReviewReq_SectionAbuseInfoStructMultiError(errors)
	}

	return nil
}

// ProfileReviewReq_SectionAbuseInfoStructMultiError is an error wrapping
// multiple validation errors returned by
// ProfileReviewReq_SectionAbuseInfoStruct.ValidateAll() if the designated
// constraints aren't met.
type ProfileReviewReq_SectionAbuseInfoStructMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileReviewReq_SectionAbuseInfoStructMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileReviewReq_SectionAbuseInfoStructMultiError) AllErrors() []error { return m }

// ProfileReviewReq_SectionAbuseInfoStructValidationError is the validation
// error returned by ProfileReviewReq_SectionAbuseInfoStruct.Validate if the
// designated constraints aren't met.
type ProfileReviewReq_SectionAbuseInfoStructValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileReviewReq_SectionAbuseInfoStructValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileReviewReq_SectionAbuseInfoStructValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileReviewReq_SectionAbuseInfoStructValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileReviewReq_SectionAbuseInfoStructValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileReviewReq_SectionAbuseInfoStructValidationError) ErrorName() string {
	return "ProfileReviewReq_SectionAbuseInfoStructValidationError"
}

// Error satisfies the builtin error interface
func (e ProfileReviewReq_SectionAbuseInfoStructValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileReviewReq_SectionAbuseInfoStruct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileReviewReq_SectionAbuseInfoStructValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileReviewReq_SectionAbuseInfoStructValidationError{}

// Validate checks the field values on ProfileReviewReq_SectionStruct with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProfileReviewReq_SectionStruct) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileReviewReq_SectionStruct with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ProfileReviewReq_SectionStructMultiError, or nil if none found.
func (m *ProfileReviewReq_SectionStruct) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileReviewReq_SectionStruct) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Label

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetPornInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProfileReviewReq_SectionStructValidationError{
					field:  "PornInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProfileReviewReq_SectionStructValidationError{
					field:  "PornInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPornInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProfileReviewReq_SectionStructValidationError{
				field:  "PornInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAdsInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProfileReviewReq_SectionStructValidationError{
					field:  "AdsInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProfileReviewReq_SectionStructValidationError{
					field:  "AdsInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAdsInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProfileReviewReq_SectionStructValidationError{
				field:  "AdsInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIllegalInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProfileReviewReq_SectionStructValidationError{
					field:  "IllegalInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProfileReviewReq_SectionStructValidationError{
					field:  "IllegalInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIllegalInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProfileReviewReq_SectionStructValidationError{
				field:  "IllegalInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAbuseInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProfileReviewReq_SectionStructValidationError{
					field:  "AbuseInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProfileReviewReq_SectionStructValidationError{
					field:  "AbuseInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAbuseInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProfileReviewReq_SectionStructValidationError{
				field:  "AbuseInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProfileReviewReq_SectionStructMultiError(errors)
	}

	return nil
}

// ProfileReviewReq_SectionStructMultiError is an error wrapping multiple
// validation errors returned by ProfileReviewReq_SectionStruct.ValidateAll()
// if the designated constraints aren't met.
type ProfileReviewReq_SectionStructMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileReviewReq_SectionStructMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileReviewReq_SectionStructMultiError) AllErrors() []error { return m }

// ProfileReviewReq_SectionStructValidationError is the validation error
// returned by ProfileReviewReq_SectionStruct.Validate if the designated
// constraints aren't met.
type ProfileReviewReq_SectionStructValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileReviewReq_SectionStructValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileReviewReq_SectionStructValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileReviewReq_SectionStructValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileReviewReq_SectionStructValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileReviewReq_SectionStructValidationError) ErrorName() string {
	return "ProfileReviewReq_SectionStructValidationError"
}

// Error satisfies the builtin error interface
func (e ProfileReviewReq_SectionStructValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileReviewReq_SectionStruct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileReviewReq_SectionStructValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileReviewReq_SectionStructValidationError{}

// Validate checks the field values on ProfileReviewReq_JobsDetailStruct with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ProfileReviewReq_JobsDetailStruct) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileReviewReq_JobsDetailStruct
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ProfileReviewReq_JobsDetailStructMultiError, or nil if none found.
func (m *ProfileReviewReq_JobsDetailStruct) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileReviewReq_JobsDetailStruct) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for JobId

	// no validation rules for DataId

	// no validation rules for State

	// no validation rules for CreationTime

	// no validation rules for Object

	// no validation rules for Label

	// no validation rules for Result

	// no validation rules for BucketId

	// no validation rules for Region

	// no validation rules for CosHeaders

	for idx, item := range m.GetSection() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProfileReviewReq_JobsDetailStructValidationError{
						field:  fmt.Sprintf("Section[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProfileReviewReq_JobsDetailStructValidationError{
						field:  fmt.Sprintf("Section[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProfileReviewReq_JobsDetailStructValidationError{
					field:  fmt.Sprintf("Section[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProfileReviewReq_JobsDetailStructMultiError(errors)
	}

	return nil
}

// ProfileReviewReq_JobsDetailStructMultiError is an error wrapping multiple
// validation errors returned by
// ProfileReviewReq_JobsDetailStruct.ValidateAll() if the designated
// constraints aren't met.
type ProfileReviewReq_JobsDetailStructMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileReviewReq_JobsDetailStructMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileReviewReq_JobsDetailStructMultiError) AllErrors() []error { return m }

// ProfileReviewReq_JobsDetailStructValidationError is the validation error
// returned by ProfileReviewReq_JobsDetailStruct.Validate if the designated
// constraints aren't met.
type ProfileReviewReq_JobsDetailStructValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileReviewReq_JobsDetailStructValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileReviewReq_JobsDetailStructValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileReviewReq_JobsDetailStructValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileReviewReq_JobsDetailStructValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileReviewReq_JobsDetailStructValidationError) ErrorName() string {
	return "ProfileReviewReq_JobsDetailStructValidationError"
}

// Error satisfies the builtin error interface
func (e ProfileReviewReq_JobsDetailStructValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileReviewReq_JobsDetailStruct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileReviewReq_JobsDetailStructValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileReviewReq_JobsDetailStructValidationError{}

// Validate checks the field values on AvatarReviewReq_JobsDetailStruct with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AvatarReviewReq_JobsDetailStruct) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AvatarReviewReq_JobsDetailStruct with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AvatarReviewReq_JobsDetailStructMultiError, or nil if none found.
func (m *AvatarReviewReq_JobsDetailStruct) ValidateAll() error {
	return m.validate(true)
}

func (m *AvatarReviewReq_JobsDetailStruct) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for JobId

	// no validation rules for State

	// no validation rules for Object

	// no validation rules for Label

	// no validation rules for Result

	// no validation rules for Category

	// no validation rules for BucketId

	// no validation rules for Region

	// no validation rules for CosHeaders

	if len(errors) > 0 {
		return AvatarReviewReq_JobsDetailStructMultiError(errors)
	}

	return nil
}

// AvatarReviewReq_JobsDetailStructMultiError is an error wrapping multiple
// validation errors returned by
// AvatarReviewReq_JobsDetailStruct.ValidateAll() if the designated
// constraints aren't met.
type AvatarReviewReq_JobsDetailStructMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AvatarReviewReq_JobsDetailStructMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AvatarReviewReq_JobsDetailStructMultiError) AllErrors() []error { return m }

// AvatarReviewReq_JobsDetailStructValidationError is the validation error
// returned by AvatarReviewReq_JobsDetailStruct.Validate if the designated
// constraints aren't met.
type AvatarReviewReq_JobsDetailStructValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AvatarReviewReq_JobsDetailStructValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AvatarReviewReq_JobsDetailStructValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AvatarReviewReq_JobsDetailStructValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AvatarReviewReq_JobsDetailStructValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AvatarReviewReq_JobsDetailStructValidationError) ErrorName() string {
	return "AvatarReviewReq_JobsDetailStructValidationError"
}

// Error satisfies the builtin error interface
func (e AvatarReviewReq_JobsDetailStructValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAvatarReviewReq_JobsDetailStruct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AvatarReviewReq_JobsDetailStructValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AvatarReviewReq_JobsDetailStructValidationError{}
