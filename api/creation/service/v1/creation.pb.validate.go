// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: creation/service/v1/creation.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _creation_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetLeaderBoardReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLeaderBoardReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLeaderBoardReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLeaderBoardReplyMultiError, or nil if none found.
func (m *GetLeaderBoardReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLeaderBoardReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBoard() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetLeaderBoardReplyValidationError{
						field:  fmt.Sprintf("Board[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetLeaderBoardReplyValidationError{
						field:  fmt.Sprintf("Board[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetLeaderBoardReplyValidationError{
					field:  fmt.Sprintf("Board[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetLeaderBoardReplyMultiError(errors)
	}

	return nil
}

// GetLeaderBoardReplyMultiError is an error wrapping multiple validation
// errors returned by GetLeaderBoardReply.ValidateAll() if the designated
// constraints aren't met.
type GetLeaderBoardReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLeaderBoardReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLeaderBoardReplyMultiError) AllErrors() []error { return m }

// GetLeaderBoardReplyValidationError is the validation error returned by
// GetLeaderBoardReply.Validate if the designated constraints aren't met.
type GetLeaderBoardReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLeaderBoardReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLeaderBoardReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLeaderBoardReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLeaderBoardReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLeaderBoardReplyValidationError) ErrorName() string {
	return "GetLeaderBoardReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetLeaderBoardReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLeaderBoardReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLeaderBoardReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLeaderBoardReplyValidationError{}

// Validate checks the field values on GetCollectArticleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectArticleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectArticleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectArticleReqMultiError, or nil if none found.
func (m *GetCollectArticleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectArticleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Page

	if len(errors) > 0 {
		return GetCollectArticleReqMultiError(errors)
	}

	return nil
}

// GetCollectArticleReqMultiError is an error wrapping multiple validation
// errors returned by GetCollectArticleReq.ValidateAll() if the designated
// constraints aren't met.
type GetCollectArticleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectArticleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectArticleReqMultiError) AllErrors() []error { return m }

// GetCollectArticleReqValidationError is the validation error returned by
// GetCollectArticleReq.Validate if the designated constraints aren't met.
type GetCollectArticleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectArticleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectArticleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectArticleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectArticleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectArticleReqValidationError) ErrorName() string {
	return "GetCollectArticleReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectArticleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectArticleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectArticleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectArticleReqValidationError{}

// Validate checks the field values on GetCollectArticleCountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectArticleCountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectArticleCountReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectArticleCountReqMultiError, or nil if none found.
func (m *GetCollectArticleCountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectArticleCountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCollectArticleCountReqMultiError(errors)
	}

	return nil
}

// GetCollectArticleCountReqMultiError is an error wrapping multiple validation
// errors returned by GetCollectArticleCountReq.ValidateAll() if the
// designated constraints aren't met.
type GetCollectArticleCountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectArticleCountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectArticleCountReqMultiError) AllErrors() []error { return m }

// GetCollectArticleCountReqValidationError is the validation error returned by
// GetCollectArticleCountReq.Validate if the designated constraints aren't met.
type GetCollectArticleCountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectArticleCountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectArticleCountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectArticleCountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectArticleCountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectArticleCountReqValidationError) ErrorName() string {
	return "GetCollectArticleCountReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectArticleCountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectArticleCountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectArticleCountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectArticleCountReqValidationError{}

// Validate checks the field values on GetCollectArticleCountReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectArticleCountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectArticleCountReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectArticleCountReplyMultiError, or nil if none found.
func (m *GetCollectArticleCountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectArticleCountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return GetCollectArticleCountReplyMultiError(errors)
	}

	return nil
}

// GetCollectArticleCountReplyMultiError is an error wrapping multiple
// validation errors returned by GetCollectArticleCountReply.ValidateAll() if
// the designated constraints aren't met.
type GetCollectArticleCountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectArticleCountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectArticleCountReplyMultiError) AllErrors() []error { return m }

// GetCollectArticleCountReplyValidationError is the validation error returned
// by GetCollectArticleCountReply.Validate if the designated constraints
// aren't met.
type GetCollectArticleCountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectArticleCountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectArticleCountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectArticleCountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectArticleCountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectArticleCountReplyValidationError) ErrorName() string {
	return "GetCollectArticleCountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectArticleCountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectArticleCountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectArticleCountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectArticleCountReplyValidationError{}

// Validate checks the field values on GetCollectionReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectionReqMultiError, or nil if none found.
func (m *GetCollectionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = GetCollectionReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCollectionReqMultiError(errors)
	}

	return nil
}

func (m *GetCollectionReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetCollectionReqMultiError is an error wrapping multiple validation errors
// returned by GetCollectionReq.ValidateAll() if the designated constraints
// aren't met.
type GetCollectionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionReqMultiError) AllErrors() []error { return m }

// GetCollectionReqValidationError is the validation error returned by
// GetCollectionReq.Validate if the designated constraints aren't met.
type GetCollectionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionReqValidationError) ErrorName() string { return "GetCollectionReqValidationError" }

// Error satisfies the builtin error interface
func (e GetCollectionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionReqValidationError{}

// Validate checks the field values on GetCollectionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectionReplyMultiError, or nil if none found.
func (m *GetCollectionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Name

	// no validation rules for Introduce

	// no validation rules for Auth

	if len(errors) > 0 {
		return GetCollectionReplyMultiError(errors)
	}

	return nil
}

// GetCollectionReplyMultiError is an error wrapping multiple validation errors
// returned by GetCollectionReply.ValidateAll() if the designated constraints
// aren't met.
type GetCollectionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionReplyMultiError) AllErrors() []error { return m }

// GetCollectionReplyValidationError is the validation error returned by
// GetCollectionReply.Validate if the designated constraints aren't met.
type GetCollectionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionReplyValidationError) ErrorName() string {
	return "GetCollectionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionReplyValidationError{}

// Validate checks the field values on GetCollectionsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectionsReqMultiError, or nil if none found.
func (m *GetCollectionsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = GetCollectionsReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCollectionsReqMultiError(errors)
	}

	return nil
}

func (m *GetCollectionsReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetCollectionsReqMultiError is an error wrapping multiple validation errors
// returned by GetCollectionsReq.ValidateAll() if the designated constraints
// aren't met.
type GetCollectionsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionsReqMultiError) AllErrors() []error { return m }

// GetCollectionsReqValidationError is the validation error returned by
// GetCollectionsReq.Validate if the designated constraints aren't met.
type GetCollectionsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionsReqValidationError) ErrorName() string {
	return "GetCollectionsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionsReqValidationError{}

// Validate checks the field values on GetCollectionsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectionsReplyMultiError, or nil if none found.
func (m *GetCollectionsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCollections() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCollectionsReplyValidationError{
						field:  fmt.Sprintf("Collections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCollectionsReplyValidationError{
						field:  fmt.Sprintf("Collections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCollectionsReplyValidationError{
					field:  fmt.Sprintf("Collections[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCollectionsReplyMultiError(errors)
	}

	return nil
}

// GetCollectionsReplyMultiError is an error wrapping multiple validation
// errors returned by GetCollectionsReply.ValidateAll() if the designated
// constraints aren't met.
type GetCollectionsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionsReplyMultiError) AllErrors() []error { return m }

// GetCollectionsReplyValidationError is the validation error returned by
// GetCollectionsReply.Validate if the designated constraints aren't met.
type GetCollectionsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionsReplyValidationError) ErrorName() string {
	return "GetCollectionsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionsReplyValidationError{}

// Validate checks the field values on GetCollectionsCountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionsCountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionsCountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectionsCountReqMultiError, or nil if none found.
func (m *GetCollectionsCountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionsCountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = GetCollectionsCountReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCollectionsCountReqMultiError(errors)
	}

	return nil
}

func (m *GetCollectionsCountReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetCollectionsCountReqMultiError is an error wrapping multiple validation
// errors returned by GetCollectionsCountReq.ValidateAll() if the designated
// constraints aren't met.
type GetCollectionsCountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionsCountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionsCountReqMultiError) AllErrors() []error { return m }

// GetCollectionsCountReqValidationError is the validation error returned by
// GetCollectionsCountReq.Validate if the designated constraints aren't met.
type GetCollectionsCountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionsCountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionsCountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionsCountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionsCountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionsCountReqValidationError) ErrorName() string {
	return "GetCollectionsCountReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionsCountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionsCountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionsCountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionsCountReqValidationError{}

// Validate checks the field values on GetCollectionsCountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionsCountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionsCountReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectionsCountReplyMultiError, or nil if none found.
func (m *GetCollectionsCountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionsCountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return GetCollectionsCountReplyMultiError(errors)
	}

	return nil
}

// GetCollectionsCountReplyMultiError is an error wrapping multiple validation
// errors returned by GetCollectionsCountReply.ValidateAll() if the designated
// constraints aren't met.
type GetCollectionsCountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionsCountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionsCountReplyMultiError) AllErrors() []error { return m }

// GetCollectionsCountReplyValidationError is the validation error returned by
// GetCollectionsCountReply.Validate if the designated constraints aren't met.
type GetCollectionsCountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionsCountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionsCountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionsCountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionsCountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionsCountReplyValidationError) ErrorName() string {
	return "GetCollectionsCountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionsCountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionsCountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionsCountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionsCountReplyValidationError{}

// Validate checks the field values on CreateCollectionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCollectionsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCollectionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCollectionsReqMultiError, or nil if none found.
func (m *CreateCollectionsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCollectionsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = CreateCollectionsReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 50 {
		err := CreateCollectionsReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetIntroduce()); l < 1 || l > 100 {
		err := CreateCollectionsReqValidationError{
			field:  "Introduce",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Auth

	if len(errors) > 0 {
		return CreateCollectionsReqMultiError(errors)
	}

	return nil
}

func (m *CreateCollectionsReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateCollectionsReqMultiError is an error wrapping multiple validation
// errors returned by CreateCollectionsReq.ValidateAll() if the designated
// constraints aren't met.
type CreateCollectionsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCollectionsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCollectionsReqMultiError) AllErrors() []error { return m }

// CreateCollectionsReqValidationError is the validation error returned by
// CreateCollectionsReq.Validate if the designated constraints aren't met.
type CreateCollectionsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCollectionsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCollectionsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCollectionsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCollectionsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCollectionsReqValidationError) ErrorName() string {
	return "CreateCollectionsReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCollectionsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCollectionsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCollectionsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCollectionsReqValidationError{}

// Validate checks the field values on EditCollectionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditCollectionsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditCollectionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditCollectionsReqMultiError, or nil if none found.
func (m *EditCollectionsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EditCollectionsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = EditCollectionsReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 50 {
		err := EditCollectionsReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetIntroduce()); l < 1 || l > 100 {
		err := EditCollectionsReqValidationError{
			field:  "Introduce",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Auth

	if len(errors) > 0 {
		return EditCollectionsReqMultiError(errors)
	}

	return nil
}

func (m *EditCollectionsReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// EditCollectionsReqMultiError is an error wrapping multiple validation errors
// returned by EditCollectionsReq.ValidateAll() if the designated constraints
// aren't met.
type EditCollectionsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditCollectionsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditCollectionsReqMultiError) AllErrors() []error { return m }

// EditCollectionsReqValidationError is the validation error returned by
// EditCollectionsReq.Validate if the designated constraints aren't met.
type EditCollectionsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditCollectionsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditCollectionsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditCollectionsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditCollectionsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditCollectionsReqValidationError) ErrorName() string {
	return "EditCollectionsReqValidationError"
}

// Error satisfies the builtin error interface
func (e EditCollectionsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditCollectionsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditCollectionsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditCollectionsReqValidationError{}

// Validate checks the field values on DeleteCollectionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCollectionsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCollectionsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCollectionsReqMultiError, or nil if none found.
func (m *DeleteCollectionsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCollectionsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = DeleteCollectionsReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteCollectionsReqMultiError(errors)
	}

	return nil
}

func (m *DeleteCollectionsReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteCollectionsReqMultiError is an error wrapping multiple validation
// errors returned by DeleteCollectionsReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteCollectionsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCollectionsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCollectionsReqMultiError) AllErrors() []error { return m }

// DeleteCollectionsReqValidationError is the validation error returned by
// DeleteCollectionsReq.Validate if the designated constraints aren't met.
type DeleteCollectionsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCollectionsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCollectionsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCollectionsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCollectionsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCollectionsReqValidationError) ErrorName() string {
	return "DeleteCollectionsReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCollectionsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCollectionsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCollectionsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCollectionsReqValidationError{}

// Validate checks the field values on GetArticleListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleListReqMultiError, or nil if none found.
func (m *GetArticleListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if len(errors) > 0 {
		return GetArticleListReqMultiError(errors)
	}

	return nil
}

// GetArticleListReqMultiError is an error wrapping multiple validation errors
// returned by GetArticleListReq.ValidateAll() if the designated constraints
// aren't met.
type GetArticleListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListReqMultiError) AllErrors() []error { return m }

// GetArticleListReqValidationError is the validation error returned by
// GetArticleListReq.Validate if the designated constraints aren't met.
type GetArticleListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListReqValidationError) ErrorName() string {
	return "GetArticleListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListReqValidationError{}

// Validate checks the field values on GetArticleListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleListReplyMultiError, or nil if none found.
func (m *GetArticleListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetArticle() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetArticleListReplyValidationError{
						field:  fmt.Sprintf("Article[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetArticleListReplyValidationError{
						field:  fmt.Sprintf("Article[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetArticleListReplyValidationError{
					field:  fmt.Sprintf("Article[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetArticleListReplyMultiError(errors)
	}

	return nil
}

// GetArticleListReplyMultiError is an error wrapping multiple validation
// errors returned by GetArticleListReply.ValidateAll() if the designated
// constraints aren't met.
type GetArticleListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListReplyMultiError) AllErrors() []error { return m }

// GetArticleListReplyValidationError is the validation error returned by
// GetArticleListReply.Validate if the designated constraints aren't met.
type GetArticleListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListReplyValidationError) ErrorName() string {
	return "GetArticleListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListReplyValidationError{}

// Validate checks the field values on GetArticleListHotReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListHotReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListHotReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleListHotReqMultiError, or nil if none found.
func (m *GetArticleListHotReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListHotReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	if len(errors) > 0 {
		return GetArticleListHotReqMultiError(errors)
	}

	return nil
}

// GetArticleListHotReqMultiError is an error wrapping multiple validation
// errors returned by GetArticleListHotReq.ValidateAll() if the designated
// constraints aren't met.
type GetArticleListHotReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListHotReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListHotReqMultiError) AllErrors() []error { return m }

// GetArticleListHotReqValidationError is the validation error returned by
// GetArticleListHotReq.Validate if the designated constraints aren't met.
type GetArticleListHotReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListHotReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListHotReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListHotReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListHotReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListHotReqValidationError) ErrorName() string {
	return "GetArticleListHotReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListHotReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListHotReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListHotReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListHotReqValidationError{}

// Validate checks the field values on GetArticleListHotReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListHotReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListHotReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleListHotReplyMultiError, or nil if none found.
func (m *GetArticleListHotReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListHotReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetArticle() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetArticleListHotReplyValidationError{
						field:  fmt.Sprintf("Article[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetArticleListHotReplyValidationError{
						field:  fmt.Sprintf("Article[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetArticleListHotReplyValidationError{
					field:  fmt.Sprintf("Article[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetArticleListHotReplyMultiError(errors)
	}

	return nil
}

// GetArticleListHotReplyMultiError is an error wrapping multiple validation
// errors returned by GetArticleListHotReply.ValidateAll() if the designated
// constraints aren't met.
type GetArticleListHotReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListHotReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListHotReplyMultiError) AllErrors() []error { return m }

// GetArticleListHotReplyValidationError is the validation error returned by
// GetArticleListHotReply.Validate if the designated constraints aren't met.
type GetArticleListHotReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListHotReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListHotReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListHotReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListHotReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListHotReplyValidationError) ErrorName() string {
	return "GetArticleListHotReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListHotReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListHotReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListHotReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListHotReplyValidationError{}

// Validate checks the field values on GetUserArticleListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserArticleListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserArticleListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserArticleListReqMultiError, or nil if none found.
func (m *GetUserArticleListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserArticleListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetUserArticleListReqMultiError(errors)
	}

	return nil
}

// GetUserArticleListReqMultiError is an error wrapping multiple validation
// errors returned by GetUserArticleListReq.ValidateAll() if the designated
// constraints aren't met.
type GetUserArticleListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserArticleListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserArticleListReqMultiError) AllErrors() []error { return m }

// GetUserArticleListReqValidationError is the validation error returned by
// GetUserArticleListReq.Validate if the designated constraints aren't met.
type GetUserArticleListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserArticleListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserArticleListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserArticleListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserArticleListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserArticleListReqValidationError) ErrorName() string {
	return "GetUserArticleListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserArticleListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserArticleListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserArticleListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserArticleListReqValidationError{}

// Validate checks the field values on GetUserArticleListVisitorReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserArticleListVisitorReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserArticleListVisitorReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserArticleListVisitorReqMultiError, or nil if none found.
func (m *GetUserArticleListVisitorReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserArticleListVisitorReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetUserArticleListVisitorReqMultiError(errors)
	}

	return nil
}

// GetUserArticleListVisitorReqMultiError is an error wrapping multiple
// validation errors returned by GetUserArticleListVisitorReq.ValidateAll() if
// the designated constraints aren't met.
type GetUserArticleListVisitorReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserArticleListVisitorReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserArticleListVisitorReqMultiError) AllErrors() []error { return m }

// GetUserArticleListVisitorReqValidationError is the validation error returned
// by GetUserArticleListVisitorReq.Validate if the designated constraints
// aren't met.
type GetUserArticleListVisitorReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserArticleListVisitorReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserArticleListVisitorReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserArticleListVisitorReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserArticleListVisitorReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserArticleListVisitorReqValidationError) ErrorName() string {
	return "GetUserArticleListVisitorReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserArticleListVisitorReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserArticleListVisitorReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserArticleListVisitorReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserArticleListVisitorReqValidationError{}

// Validate checks the field values on GetArticleStatisticReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleStatisticReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleStatisticReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleStatisticReqMultiError, or nil if none found.
func (m *GetArticleStatisticReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleStatisticReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetArticleStatisticReqMultiError(errors)
	}

	return nil
}

// GetArticleStatisticReqMultiError is an error wrapping multiple validation
// errors returned by GetArticleStatisticReq.ValidateAll() if the designated
// constraints aren't met.
type GetArticleStatisticReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleStatisticReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleStatisticReqMultiError) AllErrors() []error { return m }

// GetArticleStatisticReqValidationError is the validation error returned by
// GetArticleStatisticReq.Validate if the designated constraints aren't met.
type GetArticleStatisticReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleStatisticReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleStatisticReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleStatisticReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleStatisticReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleStatisticReqValidationError) ErrorName() string {
	return "GetArticleStatisticReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleStatisticReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleStatisticReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleStatisticReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleStatisticReqValidationError{}

// Validate checks the field values on GetArticleListStatisticReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListStatisticReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListStatisticReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleListStatisticReqMultiError, or nil if none found.
func (m *GetArticleListStatisticReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListStatisticReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetArticleListStatisticReqMultiError(errors)
	}

	return nil
}

// GetArticleListStatisticReqMultiError is an error wrapping multiple
// validation errors returned by GetArticleListStatisticReq.ValidateAll() if
// the designated constraints aren't met.
type GetArticleListStatisticReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListStatisticReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListStatisticReqMultiError) AllErrors() []error { return m }

// GetArticleListStatisticReqValidationError is the validation error returned
// by GetArticleListStatisticReq.Validate if the designated constraints aren't met.
type GetArticleListStatisticReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListStatisticReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListStatisticReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListStatisticReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListStatisticReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListStatisticReqValidationError) ErrorName() string {
	return "GetArticleListStatisticReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListStatisticReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListStatisticReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListStatisticReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListStatisticReqValidationError{}

// Validate checks the field values on GetArticleStatisticReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleStatisticReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleStatisticReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleStatisticReplyMultiError, or nil if none found.
func (m *GetArticleStatisticReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleStatisticReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Agree

	// no validation rules for Collect

	// no validation rules for View

	// no validation rules for Comment

	if len(errors) > 0 {
		return GetArticleStatisticReplyMultiError(errors)
	}

	return nil
}

// GetArticleStatisticReplyMultiError is an error wrapping multiple validation
// errors returned by GetArticleStatisticReply.ValidateAll() if the designated
// constraints aren't met.
type GetArticleStatisticReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleStatisticReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleStatisticReplyMultiError) AllErrors() []error { return m }

// GetArticleStatisticReplyValidationError is the validation error returned by
// GetArticleStatisticReply.Validate if the designated constraints aren't met.
type GetArticleStatisticReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleStatisticReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleStatisticReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleStatisticReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleStatisticReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleStatisticReplyValidationError) ErrorName() string {
	return "GetArticleStatisticReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleStatisticReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleStatisticReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleStatisticReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleStatisticReplyValidationError{}

// Validate checks the field values on GetArticleListStatisticReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListStatisticReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListStatisticReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleListStatisticReplyMultiError, or nil if none found.
func (m *GetArticleListStatisticReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListStatisticReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCount() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetArticleListStatisticReplyValidationError{
						field:  fmt.Sprintf("Count[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetArticleListStatisticReplyValidationError{
						field:  fmt.Sprintf("Count[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetArticleListStatisticReplyValidationError{
					field:  fmt.Sprintf("Count[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetArticleListStatisticReplyMultiError(errors)
	}

	return nil
}

// GetArticleListStatisticReplyMultiError is an error wrapping multiple
// validation errors returned by GetArticleListStatisticReply.ValidateAll() if
// the designated constraints aren't met.
type GetArticleListStatisticReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListStatisticReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListStatisticReplyMultiError) AllErrors() []error { return m }

// GetArticleListStatisticReplyValidationError is the validation error returned
// by GetArticleListStatisticReply.Validate if the designated constraints
// aren't met.
type GetArticleListStatisticReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListStatisticReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListStatisticReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListStatisticReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListStatisticReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListStatisticReplyValidationError) ErrorName() string {
	return "GetArticleListStatisticReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListStatisticReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListStatisticReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListStatisticReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListStatisticReplyValidationError{}

// Validate checks the field values on GetLastArticleDraftReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLastArticleDraftReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLastArticleDraftReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLastArticleDraftReqMultiError, or nil if none found.
func (m *GetLastArticleDraftReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLastArticleDraftReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = GetLastArticleDraftReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetLastArticleDraftReqMultiError(errors)
	}

	return nil
}

func (m *GetLastArticleDraftReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetLastArticleDraftReqMultiError is an error wrapping multiple validation
// errors returned by GetLastArticleDraftReq.ValidateAll() if the designated
// constraints aren't met.
type GetLastArticleDraftReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLastArticleDraftReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLastArticleDraftReqMultiError) AllErrors() []error { return m }

// GetLastArticleDraftReqValidationError is the validation error returned by
// GetLastArticleDraftReq.Validate if the designated constraints aren't met.
type GetLastArticleDraftReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLastArticleDraftReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLastArticleDraftReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLastArticleDraftReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLastArticleDraftReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLastArticleDraftReqValidationError) ErrorName() string {
	return "GetLastArticleDraftReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetLastArticleDraftReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLastArticleDraftReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLastArticleDraftReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLastArticleDraftReqValidationError{}

// Validate checks the field values on GetLastArticleDraftReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLastArticleDraftReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLastArticleDraftReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLastArticleDraftReplyMultiError, or nil if none found.
func (m *GetLastArticleDraftReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLastArticleDraftReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	if len(errors) > 0 {
		return GetLastArticleDraftReplyMultiError(errors)
	}

	return nil
}

// GetLastArticleDraftReplyMultiError is an error wrapping multiple validation
// errors returned by GetLastArticleDraftReply.ValidateAll() if the designated
// constraints aren't met.
type GetLastArticleDraftReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLastArticleDraftReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLastArticleDraftReplyMultiError) AllErrors() []error { return m }

// GetLastArticleDraftReplyValidationError is the validation error returned by
// GetLastArticleDraftReply.Validate if the designated constraints aren't met.
type GetLastArticleDraftReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLastArticleDraftReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLastArticleDraftReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLastArticleDraftReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLastArticleDraftReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLastArticleDraftReplyValidationError) ErrorName() string {
	return "GetLastArticleDraftReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetLastArticleDraftReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLastArticleDraftReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLastArticleDraftReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLastArticleDraftReplyValidationError{}

// Validate checks the field values on CreateArticleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateArticleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateArticleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateArticleReqMultiError, or nil if none found.
func (m *CreateArticleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateArticleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Auth

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = CreateArticleReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateArticleReqMultiError(errors)
	}

	return nil
}

func (m *CreateArticleReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateArticleReqMultiError is an error wrapping multiple validation errors
// returned by CreateArticleReq.ValidateAll() if the designated constraints
// aren't met.
type CreateArticleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateArticleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateArticleReqMultiError) AllErrors() []error { return m }

// CreateArticleReqValidationError is the validation error returned by
// CreateArticleReq.Validate if the designated constraints aren't met.
type CreateArticleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateArticleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateArticleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateArticleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateArticleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateArticleReqValidationError) ErrorName() string { return "CreateArticleReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateArticleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateArticleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateArticleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateArticleReqValidationError{}

// Validate checks the field values on EditArticleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EditArticleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditArticleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EditArticleReqMultiError,
// or nil if none found.
func (m *EditArticleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EditArticleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = EditArticleReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EditArticleReqMultiError(errors)
	}

	return nil
}

func (m *EditArticleReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// EditArticleReqMultiError is an error wrapping multiple validation errors
// returned by EditArticleReq.ValidateAll() if the designated constraints
// aren't met.
type EditArticleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditArticleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditArticleReqMultiError) AllErrors() []error { return m }

// EditArticleReqValidationError is the validation error returned by
// EditArticleReq.Validate if the designated constraints aren't met.
type EditArticleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditArticleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditArticleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditArticleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditArticleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditArticleReqValidationError) ErrorName() string { return "EditArticleReqValidationError" }

// Error satisfies the builtin error interface
func (e EditArticleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditArticleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditArticleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditArticleReqValidationError{}

// Validate checks the field values on CreateArticleCacheAndSearchReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateArticleCacheAndSearchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateArticleCacheAndSearchReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateArticleCacheAndSearchReqMultiError, or nil if none found.
func (m *CreateArticleCacheAndSearchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateArticleCacheAndSearchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Auth

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = CreateArticleCacheAndSearchReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateArticleCacheAndSearchReqMultiError(errors)
	}

	return nil
}

func (m *CreateArticleCacheAndSearchReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateArticleCacheAndSearchReqMultiError is an error wrapping multiple
// validation errors returned by CreateArticleCacheAndSearchReq.ValidateAll()
// if the designated constraints aren't met.
type CreateArticleCacheAndSearchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateArticleCacheAndSearchReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateArticleCacheAndSearchReqMultiError) AllErrors() []error { return m }

// CreateArticleCacheAndSearchReqValidationError is the validation error
// returned by CreateArticleCacheAndSearchReq.Validate if the designated
// constraints aren't met.
type CreateArticleCacheAndSearchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateArticleCacheAndSearchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateArticleCacheAndSearchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateArticleCacheAndSearchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateArticleCacheAndSearchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateArticleCacheAndSearchReqValidationError) ErrorName() string {
	return "CreateArticleCacheAndSearchReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateArticleCacheAndSearchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateArticleCacheAndSearchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateArticleCacheAndSearchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateArticleCacheAndSearchReqValidationError{}

// Validate checks the field values on EditArticleCosAndSearchReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditArticleCosAndSearchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditArticleCosAndSearchReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditArticleCosAndSearchReqMultiError, or nil if none found.
func (m *EditArticleCosAndSearchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EditArticleCosAndSearchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = EditArticleCosAndSearchReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EditArticleCosAndSearchReqMultiError(errors)
	}

	return nil
}

func (m *EditArticleCosAndSearchReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// EditArticleCosAndSearchReqMultiError is an error wrapping multiple
// validation errors returned by EditArticleCosAndSearchReq.ValidateAll() if
// the designated constraints aren't met.
type EditArticleCosAndSearchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditArticleCosAndSearchReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditArticleCosAndSearchReqMultiError) AllErrors() []error { return m }

// EditArticleCosAndSearchReqValidationError is the validation error returned
// by EditArticleCosAndSearchReq.Validate if the designated constraints aren't met.
type EditArticleCosAndSearchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditArticleCosAndSearchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditArticleCosAndSearchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditArticleCosAndSearchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditArticleCosAndSearchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditArticleCosAndSearchReqValidationError) ErrorName() string {
	return "EditArticleCosAndSearchReqValidationError"
}

// Error satisfies the builtin error interface
func (e EditArticleCosAndSearchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditArticleCosAndSearchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditArticleCosAndSearchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditArticleCosAndSearchReqValidationError{}

// Validate checks the field values on DeleteArticleCacheAndSearchReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteArticleCacheAndSearchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteArticleCacheAndSearchReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteArticleCacheAndSearchReqMultiError, or nil if none found.
func (m *DeleteArticleCacheAndSearchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteArticleCacheAndSearchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = DeleteArticleCacheAndSearchReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteArticleCacheAndSearchReqMultiError(errors)
	}

	return nil
}

func (m *DeleteArticleCacheAndSearchReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteArticleCacheAndSearchReqMultiError is an error wrapping multiple
// validation errors returned by DeleteArticleCacheAndSearchReq.ValidateAll()
// if the designated constraints aren't met.
type DeleteArticleCacheAndSearchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteArticleCacheAndSearchReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteArticleCacheAndSearchReqMultiError) AllErrors() []error { return m }

// DeleteArticleCacheAndSearchReqValidationError is the validation error
// returned by DeleteArticleCacheAndSearchReq.Validate if the designated
// constraints aren't met.
type DeleteArticleCacheAndSearchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteArticleCacheAndSearchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteArticleCacheAndSearchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteArticleCacheAndSearchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteArticleCacheAndSearchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteArticleCacheAndSearchReqValidationError) ErrorName() string {
	return "DeleteArticleCacheAndSearchReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteArticleCacheAndSearchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteArticleCacheAndSearchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteArticleCacheAndSearchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteArticleCacheAndSearchReqValidationError{}

// Validate checks the field values on CreateArticleDraftReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateArticleDraftReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateArticleDraftReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateArticleDraftReqMultiError, or nil if none found.
func (m *CreateArticleDraftReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateArticleDraftReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = CreateArticleDraftReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateArticleDraftReqMultiError(errors)
	}

	return nil
}

func (m *CreateArticleDraftReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateArticleDraftReqMultiError is an error wrapping multiple validation
// errors returned by CreateArticleDraftReq.ValidateAll() if the designated
// constraints aren't met.
type CreateArticleDraftReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateArticleDraftReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateArticleDraftReqMultiError) AllErrors() []error { return m }

// CreateArticleDraftReqValidationError is the validation error returned by
// CreateArticleDraftReq.Validate if the designated constraints aren't met.
type CreateArticleDraftReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateArticleDraftReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateArticleDraftReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateArticleDraftReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateArticleDraftReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateArticleDraftReqValidationError) ErrorName() string {
	return "CreateArticleDraftReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateArticleDraftReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateArticleDraftReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateArticleDraftReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateArticleDraftReqValidationError{}

// Validate checks the field values on CreateArticleDraftReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateArticleDraftReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateArticleDraftReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateArticleDraftReplyMultiError, or nil if none found.
func (m *CreateArticleDraftReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateArticleDraftReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateArticleDraftReplyMultiError(errors)
	}

	return nil
}

// CreateArticleDraftReplyMultiError is an error wrapping multiple validation
// errors returned by CreateArticleDraftReply.ValidateAll() if the designated
// constraints aren't met.
type CreateArticleDraftReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateArticleDraftReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateArticleDraftReplyMultiError) AllErrors() []error { return m }

// CreateArticleDraftReplyValidationError is the validation error returned by
// CreateArticleDraftReply.Validate if the designated constraints aren't met.
type CreateArticleDraftReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateArticleDraftReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateArticleDraftReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateArticleDraftReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateArticleDraftReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateArticleDraftReplyValidationError) ErrorName() string {
	return "CreateArticleDraftReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateArticleDraftReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateArticleDraftReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateArticleDraftReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateArticleDraftReplyValidationError{}

// Validate checks the field values on ArticleDraftMarkReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleDraftMarkReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleDraftMarkReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleDraftMarkReqMultiError, or nil if none found.
func (m *ArticleDraftMarkReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleDraftMarkReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = ArticleDraftMarkReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ArticleDraftMarkReqMultiError(errors)
	}

	return nil
}

func (m *ArticleDraftMarkReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ArticleDraftMarkReqMultiError is an error wrapping multiple validation
// errors returned by ArticleDraftMarkReq.ValidateAll() if the designated
// constraints aren't met.
type ArticleDraftMarkReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleDraftMarkReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleDraftMarkReqMultiError) AllErrors() []error { return m }

// ArticleDraftMarkReqValidationError is the validation error returned by
// ArticleDraftMarkReq.Validate if the designated constraints aren't met.
type ArticleDraftMarkReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleDraftMarkReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleDraftMarkReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleDraftMarkReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleDraftMarkReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleDraftMarkReqValidationError) ErrorName() string {
	return "ArticleDraftMarkReqValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleDraftMarkReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleDraftMarkReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleDraftMarkReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleDraftMarkReqValidationError{}

// Validate checks the field values on GetArticleDraftListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleDraftListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleDraftListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleDraftListReqMultiError, or nil if none found.
func (m *GetArticleDraftListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleDraftListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = GetArticleDraftListReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetArticleDraftListReqMultiError(errors)
	}

	return nil
}

func (m *GetArticleDraftListReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetArticleDraftListReqMultiError is an error wrapping multiple validation
// errors returned by GetArticleDraftListReq.ValidateAll() if the designated
// constraints aren't met.
type GetArticleDraftListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleDraftListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleDraftListReqMultiError) AllErrors() []error { return m }

// GetArticleDraftListReqValidationError is the validation error returned by
// GetArticleDraftListReq.Validate if the designated constraints aren't met.
type GetArticleDraftListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleDraftListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleDraftListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleDraftListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleDraftListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleDraftListReqValidationError) ErrorName() string {
	return "GetArticleDraftListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleDraftListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleDraftListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleDraftListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleDraftListReqValidationError{}

// Validate checks the field values on GetArticleDraftListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleDraftListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleDraftListReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleDraftListReplyMultiError, or nil if none found.
func (m *GetArticleDraftListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleDraftListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDraft() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetArticleDraftListReplyValidationError{
						field:  fmt.Sprintf("Draft[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetArticleDraftListReplyValidationError{
						field:  fmt.Sprintf("Draft[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetArticleDraftListReplyValidationError{
					field:  fmt.Sprintf("Draft[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetArticleDraftListReplyMultiError(errors)
	}

	return nil
}

// GetArticleDraftListReplyMultiError is an error wrapping multiple validation
// errors returned by GetArticleDraftListReply.ValidateAll() if the designated
// constraints aren't met.
type GetArticleDraftListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleDraftListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleDraftListReplyMultiError) AllErrors() []error { return m }

// GetArticleDraftListReplyValidationError is the validation error returned by
// GetArticleDraftListReply.Validate if the designated constraints aren't met.
type GetArticleDraftListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleDraftListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleDraftListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleDraftListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleDraftListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleDraftListReplyValidationError) ErrorName() string {
	return "GetArticleDraftListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleDraftListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleDraftListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleDraftListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleDraftListReplyValidationError{}

// Validate checks the field values on SendArticleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendArticleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendArticleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendArticleReqMultiError,
// or nil if none found.
func (m *SendArticleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendArticleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = SendArticleReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendArticleReqMultiError(errors)
	}

	return nil
}

func (m *SendArticleReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SendArticleReqMultiError is an error wrapping multiple validation errors
// returned by SendArticleReq.ValidateAll() if the designated constraints
// aren't met.
type SendArticleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendArticleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendArticleReqMultiError) AllErrors() []error { return m }

// SendArticleReqValidationError is the validation error returned by
// SendArticleReq.Validate if the designated constraints aren't met.
type SendArticleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendArticleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendArticleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendArticleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendArticleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendArticleReqValidationError) ErrorName() string { return "SendArticleReqValidationError" }

// Error satisfies the builtin error interface
func (e SendArticleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendArticleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendArticleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendArticleReqValidationError{}

// Validate checks the field values on SendArticleEditReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendArticleEditReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendArticleEditReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendArticleEditReqMultiError, or nil if none found.
func (m *SendArticleEditReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendArticleEditReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = SendArticleEditReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendArticleEditReqMultiError(errors)
	}

	return nil
}

func (m *SendArticleEditReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SendArticleEditReqMultiError is an error wrapping multiple validation errors
// returned by SendArticleEditReq.ValidateAll() if the designated constraints
// aren't met.
type SendArticleEditReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendArticleEditReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendArticleEditReqMultiError) AllErrors() []error { return m }

// SendArticleEditReqValidationError is the validation error returned by
// SendArticleEditReq.Validate if the designated constraints aren't met.
type SendArticleEditReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendArticleEditReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendArticleEditReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendArticleEditReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendArticleEditReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendArticleEditReqValidationError) ErrorName() string {
	return "SendArticleEditReqValidationError"
}

// Error satisfies the builtin error interface
func (e SendArticleEditReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendArticleEditReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendArticleEditReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendArticleEditReqValidationError{}

// Validate checks the field values on DeleteArticleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteArticleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteArticleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteArticleReqMultiError, or nil if none found.
func (m *DeleteArticleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteArticleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = DeleteArticleReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteArticleReqMultiError(errors)
	}

	return nil
}

func (m *DeleteArticleReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteArticleReqMultiError is an error wrapping multiple validation errors
// returned by DeleteArticleReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteArticleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteArticleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteArticleReqMultiError) AllErrors() []error { return m }

// DeleteArticleReqValidationError is the validation error returned by
// DeleteArticleReq.Validate if the designated constraints aren't met.
type DeleteArticleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteArticleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteArticleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteArticleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteArticleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteArticleReqValidationError) ErrorName() string { return "DeleteArticleReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteArticleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteArticleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteArticleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteArticleReqValidationError{}

// Validate checks the field values on SetArticleAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetArticleAgreeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetArticleAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetArticleAgreeReqMultiError, or nil if none found.
func (m *SetArticleAgreeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetArticleAgreeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = SetArticleAgreeReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserUuid()); err != nil {
		err = SetArticleAgreeReqValidationError{
			field:  "UserUuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetArticleAgreeReqMultiError(errors)
	}

	return nil
}

func (m *SetArticleAgreeReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SetArticleAgreeReqMultiError is an error wrapping multiple validation errors
// returned by SetArticleAgreeReq.ValidateAll() if the designated constraints
// aren't met.
type SetArticleAgreeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetArticleAgreeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetArticleAgreeReqMultiError) AllErrors() []error { return m }

// SetArticleAgreeReqValidationError is the validation error returned by
// SetArticleAgreeReq.Validate if the designated constraints aren't met.
type SetArticleAgreeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetArticleAgreeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetArticleAgreeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetArticleAgreeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetArticleAgreeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetArticleAgreeReqValidationError) ErrorName() string {
	return "SetArticleAgreeReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetArticleAgreeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetArticleAgreeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetArticleAgreeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetArticleAgreeReqValidationError{}

// Validate checks the field values on SetArticleViewReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetArticleViewReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetArticleViewReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetArticleViewReqMultiError, or nil if none found.
func (m *SetArticleViewReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetArticleViewReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = SetArticleViewReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetArticleViewReqMultiError(errors)
	}

	return nil
}

func (m *SetArticleViewReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SetArticleViewReqMultiError is an error wrapping multiple validation errors
// returned by SetArticleViewReq.ValidateAll() if the designated constraints
// aren't met.
type SetArticleViewReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetArticleViewReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetArticleViewReqMultiError) AllErrors() []error { return m }

// SetArticleViewReqValidationError is the validation error returned by
// SetArticleViewReq.Validate if the designated constraints aren't met.
type SetArticleViewReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetArticleViewReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetArticleViewReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetArticleViewReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetArticleViewReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetArticleViewReqValidationError) ErrorName() string {
	return "SetArticleViewReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetArticleViewReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetArticleViewReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetArticleViewReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetArticleViewReqValidationError{}

// Validate checks the field values on SetArticleCollectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetArticleCollectReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetArticleCollectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetArticleCollectReqMultiError, or nil if none found.
func (m *SetArticleCollectReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetArticleCollectReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CollectionsId

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = SetArticleCollectReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserUuid()); err != nil {
		err = SetArticleCollectReqValidationError{
			field:  "UserUuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetArticleCollectReqMultiError(errors)
	}

	return nil
}

func (m *SetArticleCollectReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SetArticleCollectReqMultiError is an error wrapping multiple validation
// errors returned by SetArticleCollectReq.ValidateAll() if the designated
// constraints aren't met.
type SetArticleCollectReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetArticleCollectReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetArticleCollectReqMultiError) AllErrors() []error { return m }

// SetArticleCollectReqValidationError is the validation error returned by
// SetArticleCollectReq.Validate if the designated constraints aren't met.
type SetArticleCollectReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetArticleCollectReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetArticleCollectReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetArticleCollectReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetArticleCollectReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetArticleCollectReqValidationError) ErrorName() string {
	return "SetArticleCollectReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetArticleCollectReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetArticleCollectReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetArticleCollectReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetArticleCollectReqValidationError{}

// Validate checks the field values on CancelArticleAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelArticleAgreeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelArticleAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelArticleAgreeReqMultiError, or nil if none found.
func (m *CancelArticleAgreeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelArticleAgreeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = CancelArticleAgreeReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserUuid()); err != nil {
		err = CancelArticleAgreeReqValidationError{
			field:  "UserUuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelArticleAgreeReqMultiError(errors)
	}

	return nil
}

func (m *CancelArticleAgreeReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CancelArticleAgreeReqMultiError is an error wrapping multiple validation
// errors returned by CancelArticleAgreeReq.ValidateAll() if the designated
// constraints aren't met.
type CancelArticleAgreeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelArticleAgreeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelArticleAgreeReqMultiError) AllErrors() []error { return m }

// CancelArticleAgreeReqValidationError is the validation error returned by
// CancelArticleAgreeReq.Validate if the designated constraints aren't met.
type CancelArticleAgreeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelArticleAgreeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelArticleAgreeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelArticleAgreeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelArticleAgreeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelArticleAgreeReqValidationError) ErrorName() string {
	return "CancelArticleAgreeReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelArticleAgreeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelArticleAgreeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelArticleAgreeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelArticleAgreeReqValidationError{}

// Validate checks the field values on CancelArticleCollectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelArticleCollectReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelArticleCollectReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelArticleCollectReqMultiError, or nil if none found.
func (m *CancelArticleCollectReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelArticleCollectReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = CancelArticleCollectReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserUuid()); err != nil {
		err = CancelArticleCollectReqValidationError{
			field:  "UserUuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelArticleCollectReqMultiError(errors)
	}

	return nil
}

func (m *CancelArticleCollectReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CancelArticleCollectReqMultiError is an error wrapping multiple validation
// errors returned by CancelArticleCollectReq.ValidateAll() if the designated
// constraints aren't met.
type CancelArticleCollectReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelArticleCollectReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelArticleCollectReqMultiError) AllErrors() []error { return m }

// CancelArticleCollectReqValidationError is the validation error returned by
// CancelArticleCollectReq.Validate if the designated constraints aren't met.
type CancelArticleCollectReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelArticleCollectReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelArticleCollectReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelArticleCollectReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelArticleCollectReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelArticleCollectReqValidationError) ErrorName() string {
	return "CancelArticleCollectReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelArticleCollectReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelArticleCollectReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelArticleCollectReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelArticleCollectReqValidationError{}

// Validate checks the field values on ArticleStatisticJudgeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleStatisticJudgeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleStatisticJudgeReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleStatisticJudgeReqMultiError, or nil if none found.
func (m *ArticleStatisticJudgeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleStatisticJudgeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = ArticleStatisticJudgeReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ArticleStatisticJudgeReqMultiError(errors)
	}

	return nil
}

func (m *ArticleStatisticJudgeReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ArticleStatisticJudgeReqMultiError is an error wrapping multiple validation
// errors returned by ArticleStatisticJudgeReq.ValidateAll() if the designated
// constraints aren't met.
type ArticleStatisticJudgeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleStatisticJudgeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleStatisticJudgeReqMultiError) AllErrors() []error { return m }

// ArticleStatisticJudgeReqValidationError is the validation error returned by
// ArticleStatisticJudgeReq.Validate if the designated constraints aren't met.
type ArticleStatisticJudgeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleStatisticJudgeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleStatisticJudgeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleStatisticJudgeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleStatisticJudgeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleStatisticJudgeReqValidationError) ErrorName() string {
	return "ArticleStatisticJudgeReqValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleStatisticJudgeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleStatisticJudgeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleStatisticJudgeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleStatisticJudgeReqValidationError{}

// Validate checks the field values on ArticleStatisticJudgeReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArticleStatisticJudgeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleStatisticJudgeReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArticleStatisticJudgeReplyMultiError, or nil if none found.
func (m *ArticleStatisticJudgeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleStatisticJudgeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Agree

	// no validation rules for Collect

	if len(errors) > 0 {
		return ArticleStatisticJudgeReplyMultiError(errors)
	}

	return nil
}

// ArticleStatisticJudgeReplyMultiError is an error wrapping multiple
// validation errors returned by ArticleStatisticJudgeReply.ValidateAll() if
// the designated constraints aren't met.
type ArticleStatisticJudgeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleStatisticJudgeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleStatisticJudgeReplyMultiError) AllErrors() []error { return m }

// ArticleStatisticJudgeReplyValidationError is the validation error returned
// by ArticleStatisticJudgeReply.Validate if the designated constraints aren't met.
type ArticleStatisticJudgeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleStatisticJudgeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleStatisticJudgeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleStatisticJudgeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleStatisticJudgeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleStatisticJudgeReplyValidationError) ErrorName() string {
	return "ArticleStatisticJudgeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ArticleStatisticJudgeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleStatisticJudgeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleStatisticJudgeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleStatisticJudgeReplyValidationError{}

// Validate checks the field values on GetLastTalkDraftReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLastTalkDraftReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLastTalkDraftReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLastTalkDraftReqMultiError, or nil if none found.
func (m *GetLastTalkDraftReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLastTalkDraftReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = GetLastTalkDraftReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetLastTalkDraftReqMultiError(errors)
	}

	return nil
}

func (m *GetLastTalkDraftReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetLastTalkDraftReqMultiError is an error wrapping multiple validation
// errors returned by GetLastTalkDraftReq.ValidateAll() if the designated
// constraints aren't met.
type GetLastTalkDraftReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLastTalkDraftReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLastTalkDraftReqMultiError) AllErrors() []error { return m }

// GetLastTalkDraftReqValidationError is the validation error returned by
// GetLastTalkDraftReq.Validate if the designated constraints aren't met.
type GetLastTalkDraftReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLastTalkDraftReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLastTalkDraftReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLastTalkDraftReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLastTalkDraftReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLastTalkDraftReqValidationError) ErrorName() string {
	return "GetLastTalkDraftReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetLastTalkDraftReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLastTalkDraftReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLastTalkDraftReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLastTalkDraftReqValidationError{}

// Validate checks the field values on GetLastTalkDraftReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLastTalkDraftReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLastTalkDraftReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLastTalkDraftReplyMultiError, or nil if none found.
func (m *GetLastTalkDraftReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLastTalkDraftReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	if len(errors) > 0 {
		return GetLastTalkDraftReplyMultiError(errors)
	}

	return nil
}

// GetLastTalkDraftReplyMultiError is an error wrapping multiple validation
// errors returned by GetLastTalkDraftReply.ValidateAll() if the designated
// constraints aren't met.
type GetLastTalkDraftReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLastTalkDraftReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLastTalkDraftReplyMultiError) AllErrors() []error { return m }

// GetLastTalkDraftReplyValidationError is the validation error returned by
// GetLastTalkDraftReply.Validate if the designated constraints aren't met.
type GetLastTalkDraftReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLastTalkDraftReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLastTalkDraftReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLastTalkDraftReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLastTalkDraftReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLastTalkDraftReplyValidationError) ErrorName() string {
	return "GetLastTalkDraftReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetLastTalkDraftReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLastTalkDraftReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLastTalkDraftReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLastTalkDraftReplyValidationError{}

// Validate checks the field values on CreateTalkDraftReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTalkDraftReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTalkDraftReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTalkDraftReqMultiError, or nil if none found.
func (m *CreateTalkDraftReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTalkDraftReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = CreateTalkDraftReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateTalkDraftReqMultiError(errors)
	}

	return nil
}

func (m *CreateTalkDraftReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateTalkDraftReqMultiError is an error wrapping multiple validation errors
// returned by CreateTalkDraftReq.ValidateAll() if the designated constraints
// aren't met.
type CreateTalkDraftReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTalkDraftReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTalkDraftReqMultiError) AllErrors() []error { return m }

// CreateTalkDraftReqValidationError is the validation error returned by
// CreateTalkDraftReq.Validate if the designated constraints aren't met.
type CreateTalkDraftReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTalkDraftReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTalkDraftReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTalkDraftReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTalkDraftReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTalkDraftReqValidationError) ErrorName() string {
	return "CreateTalkDraftReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTalkDraftReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTalkDraftReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTalkDraftReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTalkDraftReqValidationError{}

// Validate checks the field values on CreateTalkDraftReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTalkDraftReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTalkDraftReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTalkDraftReplyMultiError, or nil if none found.
func (m *CreateTalkDraftReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTalkDraftReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateTalkDraftReplyMultiError(errors)
	}

	return nil
}

// CreateTalkDraftReplyMultiError is an error wrapping multiple validation
// errors returned by CreateTalkDraftReply.ValidateAll() if the designated
// constraints aren't met.
type CreateTalkDraftReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTalkDraftReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTalkDraftReplyMultiError) AllErrors() []error { return m }

// CreateTalkDraftReplyValidationError is the validation error returned by
// CreateTalkDraftReply.Validate if the designated constraints aren't met.
type CreateTalkDraftReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTalkDraftReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTalkDraftReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTalkDraftReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTalkDraftReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTalkDraftReplyValidationError) ErrorName() string {
	return "CreateTalkDraftReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTalkDraftReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTalkDraftReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTalkDraftReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTalkDraftReplyValidationError{}

// Validate checks the field values on SendTalkReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendTalkReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendTalkReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendTalkReqMultiError, or
// nil if none found.
func (m *SendTalkReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendTalkReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = SendTalkReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendTalkReqMultiError(errors)
	}

	return nil
}

func (m *SendTalkReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SendTalkReqMultiError is an error wrapping multiple validation errors
// returned by SendTalkReq.ValidateAll() if the designated constraints aren't met.
type SendTalkReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendTalkReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendTalkReqMultiError) AllErrors() []error { return m }

// SendTalkReqValidationError is the validation error returned by
// SendTalkReq.Validate if the designated constraints aren't met.
type SendTalkReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendTalkReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendTalkReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendTalkReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendTalkReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendTalkReqValidationError) ErrorName() string { return "SendTalkReqValidationError" }

// Error satisfies the builtin error interface
func (e SendTalkReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendTalkReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendTalkReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendTalkReqValidationError{}

// Validate checks the field values on SendTalkEditReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendTalkEditReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendTalkEditReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendTalkEditReqMultiError, or nil if none found.
func (m *SendTalkEditReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendTalkEditReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = SendTalkEditReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendTalkEditReqMultiError(errors)
	}

	return nil
}

func (m *SendTalkEditReq) _validateUuid(uuid string) error {
	if matched := _creation_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SendTalkEditReqMultiError is an error wrapping multiple validation errors
// returned by SendTalkEditReq.ValidateAll() if the designated constraints
// aren't met.
type SendTalkEditReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendTalkEditReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendTalkEditReqMultiError) AllErrors() []error { return m }

// SendTalkEditReqValidationError is the validation error returned by
// SendTalkEditReq.Validate if the designated constraints aren't met.
type SendTalkEditReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendTalkEditReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendTalkEditReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendTalkEditReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendTalkEditReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendTalkEditReqValidationError) ErrorName() string { return "SendTalkEditReqValidationError" }

// Error satisfies the builtin error interface
func (e SendTalkEditReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendTalkEditReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendTalkEditReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendTalkEditReqValidationError{}

// Validate checks the field values on GetLeaderBoardReply_Board with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLeaderBoardReply_Board) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLeaderBoardReply_Board with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLeaderBoardReply_BoardMultiError, or nil if none found.
func (m *GetLeaderBoardReply_Board) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLeaderBoardReply_Board) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	// no validation rules for Mode

	if len(errors) > 0 {
		return GetLeaderBoardReply_BoardMultiError(errors)
	}

	return nil
}

// GetLeaderBoardReply_BoardMultiError is an error wrapping multiple validation
// errors returned by GetLeaderBoardReply_Board.ValidateAll() if the
// designated constraints aren't met.
type GetLeaderBoardReply_BoardMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLeaderBoardReply_BoardMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLeaderBoardReply_BoardMultiError) AllErrors() []error { return m }

// GetLeaderBoardReply_BoardValidationError is the validation error returned by
// GetLeaderBoardReply_Board.Validate if the designated constraints aren't met.
type GetLeaderBoardReply_BoardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLeaderBoardReply_BoardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLeaderBoardReply_BoardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLeaderBoardReply_BoardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLeaderBoardReply_BoardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLeaderBoardReply_BoardValidationError) ErrorName() string {
	return "GetLeaderBoardReply_BoardValidationError"
}

// Error satisfies the builtin error interface
func (e GetLeaderBoardReply_BoardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLeaderBoardReply_Board.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLeaderBoardReply_BoardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLeaderBoardReply_BoardValidationError{}

// Validate checks the field values on GetCollectionsReply_Collections with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionsReply_Collections) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionsReply_Collections with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCollectionsReply_CollectionsMultiError, or nil if none found.
func (m *GetCollectionsReply_Collections) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionsReply_Collections) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Introduce

	if len(errors) > 0 {
		return GetCollectionsReply_CollectionsMultiError(errors)
	}

	return nil
}

// GetCollectionsReply_CollectionsMultiError is an error wrapping multiple
// validation errors returned by GetCollectionsReply_Collections.ValidateAll()
// if the designated constraints aren't met.
type GetCollectionsReply_CollectionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionsReply_CollectionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionsReply_CollectionsMultiError) AllErrors() []error { return m }

// GetCollectionsReply_CollectionsValidationError is the validation error
// returned by GetCollectionsReply_Collections.Validate if the designated
// constraints aren't met.
type GetCollectionsReply_CollectionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionsReply_CollectionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionsReply_CollectionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionsReply_CollectionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionsReply_CollectionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionsReply_CollectionsValidationError) ErrorName() string {
	return "GetCollectionsReply_CollectionsValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionsReply_CollectionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionsReply_Collections.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionsReply_CollectionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionsReply_CollectionsValidationError{}

// Validate checks the field values on GetArticleListReply_Article with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListReply_Article) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListReply_Article with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetArticleListReply_ArticleMultiError, or nil if none found.
func (m *GetArticleListReply_Article) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListReply_Article) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetArticleListReply_ArticleMultiError(errors)
	}

	return nil
}

// GetArticleListReply_ArticleMultiError is an error wrapping multiple
// validation errors returned by GetArticleListReply_Article.ValidateAll() if
// the designated constraints aren't met.
type GetArticleListReply_ArticleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListReply_ArticleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListReply_ArticleMultiError) AllErrors() []error { return m }

// GetArticleListReply_ArticleValidationError is the validation error returned
// by GetArticleListReply_Article.Validate if the designated constraints
// aren't met.
type GetArticleListReply_ArticleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListReply_ArticleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListReply_ArticleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListReply_ArticleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListReply_ArticleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListReply_ArticleValidationError) ErrorName() string {
	return "GetArticleListReply_ArticleValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListReply_ArticleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListReply_Article.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListReply_ArticleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListReply_ArticleValidationError{}

// Validate checks the field values on GetArticleListHotReply_Article with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleListHotReply_Article) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListHotReply_Article with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetArticleListHotReply_ArticleMultiError, or nil if none found.
func (m *GetArticleListHotReply_Article) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListHotReply_Article) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetArticleListHotReply_ArticleMultiError(errors)
	}

	return nil
}

// GetArticleListHotReply_ArticleMultiError is an error wrapping multiple
// validation errors returned by GetArticleListHotReply_Article.ValidateAll()
// if the designated constraints aren't met.
type GetArticleListHotReply_ArticleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListHotReply_ArticleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListHotReply_ArticleMultiError) AllErrors() []error { return m }

// GetArticleListHotReply_ArticleValidationError is the validation error
// returned by GetArticleListHotReply_Article.Validate if the designated
// constraints aren't met.
type GetArticleListHotReply_ArticleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListHotReply_ArticleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListHotReply_ArticleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListHotReply_ArticleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListHotReply_ArticleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListHotReply_ArticleValidationError) ErrorName() string {
	return "GetArticleListHotReply_ArticleValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListHotReply_ArticleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListHotReply_Article.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListHotReply_ArticleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListHotReply_ArticleValidationError{}

// Validate checks the field values on GetArticleListStatisticReply_Count with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetArticleListStatisticReply_Count) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleListStatisticReply_Count
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetArticleListStatisticReply_CountMultiError, or nil if none found.
func (m *GetArticleListStatisticReply_Count) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleListStatisticReply_Count) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Agree

	// no validation rules for Collect

	// no validation rules for View

	// no validation rules for Comment

	if len(errors) > 0 {
		return GetArticleListStatisticReply_CountMultiError(errors)
	}

	return nil
}

// GetArticleListStatisticReply_CountMultiError is an error wrapping multiple
// validation errors returned by
// GetArticleListStatisticReply_Count.ValidateAll() if the designated
// constraints aren't met.
type GetArticleListStatisticReply_CountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleListStatisticReply_CountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleListStatisticReply_CountMultiError) AllErrors() []error { return m }

// GetArticleListStatisticReply_CountValidationError is the validation error
// returned by GetArticleListStatisticReply_Count.Validate if the designated
// constraints aren't met.
type GetArticleListStatisticReply_CountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleListStatisticReply_CountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleListStatisticReply_CountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleListStatisticReply_CountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleListStatisticReply_CountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleListStatisticReply_CountValidationError) ErrorName() string {
	return "GetArticleListStatisticReply_CountValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleListStatisticReply_CountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleListStatisticReply_Count.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleListStatisticReply_CountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleListStatisticReply_CountValidationError{}

// Validate checks the field values on GetArticleDraftListReply_Draft with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetArticleDraftListReply_Draft) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetArticleDraftListReply_Draft with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetArticleDraftListReply_DraftMultiError, or nil if none found.
func (m *GetArticleDraftListReply_Draft) ValidateAll() error {
	return m.validate(true)
}

func (m *GetArticleDraftListReply_Draft) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetArticleDraftListReply_DraftMultiError(errors)
	}

	return nil
}

// GetArticleDraftListReply_DraftMultiError is an error wrapping multiple
// validation errors returned by GetArticleDraftListReply_Draft.ValidateAll()
// if the designated constraints aren't met.
type GetArticleDraftListReply_DraftMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetArticleDraftListReply_DraftMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetArticleDraftListReply_DraftMultiError) AllErrors() []error { return m }

// GetArticleDraftListReply_DraftValidationError is the validation error
// returned by GetArticleDraftListReply_Draft.Validate if the designated
// constraints aren't met.
type GetArticleDraftListReply_DraftValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetArticleDraftListReply_DraftValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetArticleDraftListReply_DraftValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetArticleDraftListReply_DraftValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetArticleDraftListReply_DraftValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetArticleDraftListReply_DraftValidationError) ErrorName() string {
	return "GetArticleDraftListReply_DraftValidationError"
}

// Error satisfies the builtin error interface
func (e GetArticleDraftListReply_DraftValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetArticleDraftListReply_Draft.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetArticleDraftListReply_DraftValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetArticleDraftListReply_DraftValidationError{}
