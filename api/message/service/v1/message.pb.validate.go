// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: message/service/v1/message.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _message_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ImageReviewReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImageReviewReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageReviewReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImageReviewReqMultiError,
// or nil if none found.
func (m *ImageReviewReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageReviewReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJobsDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImageReviewReqValidationError{
					field:  "JobsDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImageReviewReqValidationError{
					field:  "JobsDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJobsDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImageReviewReqValidationError{
				field:  "JobsDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetEventName()) > 1000 {
		err := ImageReviewReqValidationError{
			field:  "EventName",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ImageReviewReqMultiError(errors)
	}

	return nil
}

// ImageReviewReqMultiError is an error wrapping multiple validation errors
// returned by ImageReviewReq.ValidateAll() if the designated constraints
// aren't met.
type ImageReviewReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageReviewReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageReviewReqMultiError) AllErrors() []error { return m }

// ImageReviewReqValidationError is the validation error returned by
// ImageReviewReq.Validate if the designated constraints aren't met.
type ImageReviewReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageReviewReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageReviewReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageReviewReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageReviewReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageReviewReqValidationError) ErrorName() string { return "ImageReviewReqValidationError" }

// Error satisfies the builtin error interface
func (e ImageReviewReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageReviewReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageReviewReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageReviewReqValidationError{}

// Validate checks the field values on TextReviewReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TextReviewReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TextReviewReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TextReviewReqMultiError, or
// nil if none found.
func (m *TextReviewReq) ValidateAll() error {
	return m.validate(true)
}

func (m *TextReviewReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJobsDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TextReviewReqValidationError{
					field:  "JobsDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TextReviewReqValidationError{
					field:  "JobsDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJobsDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TextReviewReqValidationError{
				field:  "JobsDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetEventName()) > 1000 {
		err := TextReviewReqValidationError{
			field:  "EventName",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TextReviewReqMultiError(errors)
	}

	return nil
}

// TextReviewReqMultiError is an error wrapping multiple validation errors
// returned by TextReviewReq.ValidateAll() if the designated constraints
// aren't met.
type TextReviewReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TextReviewReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TextReviewReqMultiError) AllErrors() []error { return m }

// TextReviewReqValidationError is the validation error returned by
// TextReviewReq.Validate if the designated constraints aren't met.
type TextReviewReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TextReviewReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TextReviewReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TextReviewReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TextReviewReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TextReviewReqValidationError) ErrorName() string { return "TextReviewReqValidationError" }

// Error satisfies the builtin error interface
func (e TextReviewReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTextReviewReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TextReviewReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TextReviewReqValidationError{}

// Validate checks the field values on GetMessageNotificationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMessageNotificationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMessageNotificationReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMessageNotificationReqMultiError, or nil if none found.
func (m *GetMessageNotificationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMessageNotificationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = GetMessageNotificationReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetMessageNotificationReqMultiError(errors)
	}

	return nil
}

func (m *GetMessageNotificationReq) _validateUuid(uuid string) error {
	if matched := _message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetMessageNotificationReqMultiError is an error wrapping multiple validation
// errors returned by GetMessageNotificationReq.ValidateAll() if the
// designated constraints aren't met.
type GetMessageNotificationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMessageNotificationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMessageNotificationReqMultiError) AllErrors() []error { return m }

// GetMessageNotificationReqValidationError is the validation error returned by
// GetMessageNotificationReq.Validate if the designated constraints aren't met.
type GetMessageNotificationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMessageNotificationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMessageNotificationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMessageNotificationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMessageNotificationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMessageNotificationReqValidationError) ErrorName() string {
	return "GetMessageNotificationReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetMessageNotificationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMessageNotificationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMessageNotificationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMessageNotificationReqValidationError{}

// Validate checks the field values on GetMailBoxLastTimeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMailBoxLastTimeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMailBoxLastTimeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMailBoxLastTimeReqMultiError, or nil if none found.
func (m *GetMailBoxLastTimeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMailBoxLastTimeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = GetMailBoxLastTimeReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetMailBoxLastTimeReqMultiError(errors)
	}

	return nil
}

func (m *GetMailBoxLastTimeReq) _validateUuid(uuid string) error {
	if matched := _message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetMailBoxLastTimeReqMultiError is an error wrapping multiple validation
// errors returned by GetMailBoxLastTimeReq.ValidateAll() if the designated
// constraints aren't met.
type GetMailBoxLastTimeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMailBoxLastTimeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMailBoxLastTimeReqMultiError) AllErrors() []error { return m }

// GetMailBoxLastTimeReqValidationError is the validation error returned by
// GetMailBoxLastTimeReq.Validate if the designated constraints aren't met.
type GetMailBoxLastTimeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMailBoxLastTimeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMailBoxLastTimeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMailBoxLastTimeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMailBoxLastTimeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMailBoxLastTimeReqValidationError) ErrorName() string {
	return "GetMailBoxLastTimeReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetMailBoxLastTimeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMailBoxLastTimeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMailBoxLastTimeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMailBoxLastTimeReqValidationError{}

// Validate checks the field values on GetMessageNotificationReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMessageNotificationReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMessageNotificationReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMessageNotificationReplyMultiError, or nil if none found.
func (m *GetMessageNotificationReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMessageNotificationReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timeline

	// no validation rules for Comment

	// no validation rules for SubComment

	// no validation rules for System

	if len(errors) > 0 {
		return GetMessageNotificationReplyMultiError(errors)
	}

	return nil
}

// GetMessageNotificationReplyMultiError is an error wrapping multiple
// validation errors returned by GetMessageNotificationReply.ValidateAll() if
// the designated constraints aren't met.
type GetMessageNotificationReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMessageNotificationReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMessageNotificationReplyMultiError) AllErrors() []error { return m }

// GetMessageNotificationReplyValidationError is the validation error returned
// by GetMessageNotificationReply.Validate if the designated constraints
// aren't met.
type GetMessageNotificationReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMessageNotificationReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMessageNotificationReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMessageNotificationReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMessageNotificationReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMessageNotificationReplyValidationError) ErrorName() string {
	return "GetMessageNotificationReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetMessageNotificationReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMessageNotificationReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMessageNotificationReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMessageNotificationReplyValidationError{}

// Validate checks the field values on GetMailBoxLastTimeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMailBoxLastTimeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMailBoxLastTimeReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMailBoxLastTimeReplyMultiError, or nil if none found.
func (m *GetMailBoxLastTimeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMailBoxLastTimeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Time

	if len(errors) > 0 {
		return GetMailBoxLastTimeReplyMultiError(errors)
	}

	return nil
}

// GetMailBoxLastTimeReplyMultiError is an error wrapping multiple validation
// errors returned by GetMailBoxLastTimeReply.ValidateAll() if the designated
// constraints aren't met.
type GetMailBoxLastTimeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMailBoxLastTimeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMailBoxLastTimeReplyMultiError) AllErrors() []error { return m }

// GetMailBoxLastTimeReplyValidationError is the validation error returned by
// GetMailBoxLastTimeReply.Validate if the designated constraints aren't met.
type GetMailBoxLastTimeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMailBoxLastTimeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMailBoxLastTimeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMailBoxLastTimeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMailBoxLastTimeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMailBoxLastTimeReplyValidationError) ErrorName() string {
	return "GetMailBoxLastTimeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetMailBoxLastTimeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMailBoxLastTimeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMailBoxLastTimeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMailBoxLastTimeReplyValidationError{}

// Validate checks the field values on SetMailBoxLastTimeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetMailBoxLastTimeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetMailBoxLastTimeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetMailBoxLastTimeReqMultiError, or nil if none found.
func (m *SetMailBoxLastTimeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetMailBoxLastTimeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = SetMailBoxLastTimeReqValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Time

	if len(errors) > 0 {
		return SetMailBoxLastTimeReqMultiError(errors)
	}

	return nil
}

func (m *SetMailBoxLastTimeReq) _validateUuid(uuid string) error {
	if matched := _message_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SetMailBoxLastTimeReqMultiError is an error wrapping multiple validation
// errors returned by SetMailBoxLastTimeReq.ValidateAll() if the designated
// constraints aren't met.
type SetMailBoxLastTimeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetMailBoxLastTimeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetMailBoxLastTimeReqMultiError) AllErrors() []error { return m }

// SetMailBoxLastTimeReqValidationError is the validation error returned by
// SetMailBoxLastTimeReq.Validate if the designated constraints aren't met.
type SetMailBoxLastTimeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetMailBoxLastTimeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetMailBoxLastTimeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetMailBoxLastTimeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetMailBoxLastTimeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetMailBoxLastTimeReqValidationError) ErrorName() string {
	return "SetMailBoxLastTimeReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetMailBoxLastTimeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetMailBoxLastTimeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetMailBoxLastTimeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetMailBoxLastTimeReqValidationError{}

// Validate checks the field values on SectionPornInfoStruct with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SectionPornInfoStruct) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SectionPornInfoStruct with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SectionPornInfoStructMultiError, or nil if none found.
func (m *SectionPornInfoStruct) ValidateAll() error {
	return m.validate(true)
}

func (m *SectionPornInfoStruct) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HitFlag

	// no validation rules for Score

	if utf8.RuneCountInString(m.GetKeywords()) > 1000 {
		err := SectionPornInfoStructValidationError{
			field:  "Keywords",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SectionPornInfoStructMultiError(errors)
	}

	return nil
}

// SectionPornInfoStructMultiError is an error wrapping multiple validation
// errors returned by SectionPornInfoStruct.ValidateAll() if the designated
// constraints aren't met.
type SectionPornInfoStructMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SectionPornInfoStructMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SectionPornInfoStructMultiError) AllErrors() []error { return m }

// SectionPornInfoStructValidationError is the validation error returned by
// SectionPornInfoStruct.Validate if the designated constraints aren't met.
type SectionPornInfoStructValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SectionPornInfoStructValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SectionPornInfoStructValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SectionPornInfoStructValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SectionPornInfoStructValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SectionPornInfoStructValidationError) ErrorName() string {
	return "SectionPornInfoStructValidationError"
}

// Error satisfies the builtin error interface
func (e SectionPornInfoStructValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSectionPornInfoStruct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SectionPornInfoStructValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SectionPornInfoStructValidationError{}

// Validate checks the field values on SectionAdsInfoStruct with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SectionAdsInfoStruct) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SectionAdsInfoStruct with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SectionAdsInfoStructMultiError, or nil if none found.
func (m *SectionAdsInfoStruct) ValidateAll() error {
	return m.validate(true)
}

func (m *SectionAdsInfoStruct) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HitFlag

	// no validation rules for Score

	if utf8.RuneCountInString(m.GetKeywords()) > 1000 {
		err := SectionAdsInfoStructValidationError{
			field:  "Keywords",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SectionAdsInfoStructMultiError(errors)
	}

	return nil
}

// SectionAdsInfoStructMultiError is an error wrapping multiple validation
// errors returned by SectionAdsInfoStruct.ValidateAll() if the designated
// constraints aren't met.
type SectionAdsInfoStructMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SectionAdsInfoStructMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SectionAdsInfoStructMultiError) AllErrors() []error { return m }

// SectionAdsInfoStructValidationError is the validation error returned by
// SectionAdsInfoStruct.Validate if the designated constraints aren't met.
type SectionAdsInfoStructValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SectionAdsInfoStructValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SectionAdsInfoStructValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SectionAdsInfoStructValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SectionAdsInfoStructValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SectionAdsInfoStructValidationError) ErrorName() string {
	return "SectionAdsInfoStructValidationError"
}

// Error satisfies the builtin error interface
func (e SectionAdsInfoStructValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSectionAdsInfoStruct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SectionAdsInfoStructValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SectionAdsInfoStructValidationError{}

// Validate checks the field values on SectionIllegalInfoStruct with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SectionIllegalInfoStruct) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SectionIllegalInfoStruct with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SectionIllegalInfoStructMultiError, or nil if none found.
func (m *SectionIllegalInfoStruct) ValidateAll() error {
	return m.validate(true)
}

func (m *SectionIllegalInfoStruct) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HitFlag

	// no validation rules for Score

	if utf8.RuneCountInString(m.GetKeywords()) > 1000 {
		err := SectionIllegalInfoStructValidationError{
			field:  "Keywords",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SectionIllegalInfoStructMultiError(errors)
	}

	return nil
}

// SectionIllegalInfoStructMultiError is an error wrapping multiple validation
// errors returned by SectionIllegalInfoStruct.ValidateAll() if the designated
// constraints aren't met.
type SectionIllegalInfoStructMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SectionIllegalInfoStructMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SectionIllegalInfoStructMultiError) AllErrors() []error { return m }

// SectionIllegalInfoStructValidationError is the validation error returned by
// SectionIllegalInfoStruct.Validate if the designated constraints aren't met.
type SectionIllegalInfoStructValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SectionIllegalInfoStructValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SectionIllegalInfoStructValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SectionIllegalInfoStructValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SectionIllegalInfoStructValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SectionIllegalInfoStructValidationError) ErrorName() string {
	return "SectionIllegalInfoStructValidationError"
}

// Error satisfies the builtin error interface
func (e SectionIllegalInfoStructValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSectionIllegalInfoStruct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SectionIllegalInfoStructValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SectionIllegalInfoStructValidationError{}

// Validate checks the field values on SectionAbuseInfoStruct with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SectionAbuseInfoStruct) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SectionAbuseInfoStruct with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SectionAbuseInfoStructMultiError, or nil if none found.
func (m *SectionAbuseInfoStruct) ValidateAll() error {
	return m.validate(true)
}

func (m *SectionAbuseInfoStruct) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HitFlag

	// no validation rules for Score

	if utf8.RuneCountInString(m.GetKeywords()) > 1000 {
		err := SectionAbuseInfoStructValidationError{
			field:  "Keywords",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SectionAbuseInfoStructMultiError(errors)
	}

	return nil
}

// SectionAbuseInfoStructMultiError is an error wrapping multiple validation
// errors returned by SectionAbuseInfoStruct.ValidateAll() if the designated
// constraints aren't met.
type SectionAbuseInfoStructMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SectionAbuseInfoStructMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SectionAbuseInfoStructMultiError) AllErrors() []error { return m }

// SectionAbuseInfoStructValidationError is the validation error returned by
// SectionAbuseInfoStruct.Validate if the designated constraints aren't met.
type SectionAbuseInfoStructValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SectionAbuseInfoStructValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SectionAbuseInfoStructValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SectionAbuseInfoStructValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SectionAbuseInfoStructValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SectionAbuseInfoStructValidationError) ErrorName() string {
	return "SectionAbuseInfoStructValidationError"
}

// Error satisfies the builtin error interface
func (e SectionAbuseInfoStructValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSectionAbuseInfoStruct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SectionAbuseInfoStructValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SectionAbuseInfoStructValidationError{}

// Validate checks the field values on SectionStruct with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SectionStruct) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SectionStruct with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SectionStructMultiError, or
// nil if none found.
func (m *SectionStruct) ValidateAll() error {
	return m.validate(true)
}

func (m *SectionStruct) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetLabel()) > 1000 {
		err := SectionStructValidationError{
			field:  "Label",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetPornInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SectionStructValidationError{
					field:  "PornInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SectionStructValidationError{
					field:  "PornInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPornInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SectionStructValidationError{
				field:  "PornInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAdsInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SectionStructValidationError{
					field:  "AdsInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SectionStructValidationError{
					field:  "AdsInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAdsInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SectionStructValidationError{
				field:  "AdsInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIllegalInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SectionStructValidationError{
					field:  "IllegalInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SectionStructValidationError{
					field:  "IllegalInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIllegalInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SectionStructValidationError{
				field:  "IllegalInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAbuseInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SectionStructValidationError{
					field:  "AbuseInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SectionStructValidationError{
					field:  "AbuseInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAbuseInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SectionStructValidationError{
				field:  "AbuseInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SectionStructMultiError(errors)
	}

	return nil
}

// SectionStructMultiError is an error wrapping multiple validation errors
// returned by SectionStruct.ValidateAll() if the designated constraints
// aren't met.
type SectionStructMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SectionStructMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SectionStructMultiError) AllErrors() []error { return m }

// SectionStructValidationError is the validation error returned by
// SectionStruct.Validate if the designated constraints aren't met.
type SectionStructValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SectionStructValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SectionStructValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SectionStructValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SectionStructValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SectionStructValidationError) ErrorName() string { return "SectionStructValidationError" }

// Error satisfies the builtin error interface
func (e SectionStructValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSectionStruct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SectionStructValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SectionStructValidationError{}

// Validate checks the field values on JobsDetailStruct with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JobsDetailStruct) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobsDetailStruct with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JobsDetailStructMultiError, or nil if none found.
func (m *JobsDetailStruct) ValidateAll() error {
	return m.validate(true)
}

func (m *JobsDetailStruct) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCode()) > 1000 {
		err := JobsDetailStructValidationError{
			field:  "Code",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMessage()) > 1000 {
		err := JobsDetailStructValidationError{
			field:  "Message",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetJobId()) > 1000 {
		err := JobsDetailStructValidationError{
			field:  "JobId",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDataId()) > 1000 {
		err := JobsDetailStructValidationError{
			field:  "DataId",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetState()) > 1000 {
		err := JobsDetailStructValidationError{
			field:  "State",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCreationTime()) > 1000 {
		err := JobsDetailStructValidationError{
			field:  "CreationTime",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetObject()) > 1000 {
		err := JobsDetailStructValidationError{
			field:  "Object",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLabel()) > 1000 {
		err := JobsDetailStructValidationError{
			field:  "Label",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Result

	if utf8.RuneCountInString(m.GetBucketId()) > 1000 {
		err := JobsDetailStructValidationError{
			field:  "BucketId",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegion()) > 1000 {
		err := JobsDetailStructValidationError{
			field:  "Region",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	{
		sorted_keys := make([]string, len(m.GetCosHeaders()))
		i := 0
		for key := range m.GetCosHeaders() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetCosHeaders()[key]
			_ = val

			if utf8.RuneCountInString(key) > 1000 {
				err := JobsDetailStructValidationError{
					field:  fmt.Sprintf("CosHeaders[%v]", key),
					reason: "value length must be at most 1000 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if utf8.RuneCountInString(val) > 1000 {
				err := JobsDetailStructValidationError{
					field:  fmt.Sprintf("CosHeaders[%v]", key),
					reason: "value length must be at most 1000 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	for idx, item := range m.GetSection() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobsDetailStructValidationError{
						field:  fmt.Sprintf("Section[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobsDetailStructValidationError{
						field:  fmt.Sprintf("Section[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobsDetailStructValidationError{
					field:  fmt.Sprintf("Section[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return JobsDetailStructMultiError(errors)
	}

	return nil
}

// JobsDetailStructMultiError is an error wrapping multiple validation errors
// returned by JobsDetailStruct.ValidateAll() if the designated constraints
// aren't met.
type JobsDetailStructMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobsDetailStructMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobsDetailStructMultiError) AllErrors() []error { return m }

// JobsDetailStructValidationError is the validation error returned by
// JobsDetailStruct.Validate if the designated constraints aren't met.
type JobsDetailStructValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobsDetailStructValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobsDetailStructValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobsDetailStructValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobsDetailStructValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobsDetailStructValidationError) ErrorName() string { return "JobsDetailStructValidationError" }

// Error satisfies the builtin error interface
func (e JobsDetailStructValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobsDetailStruct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobsDetailStructValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobsDetailStructValidationError{}

// Validate checks the field values on ImageReviewReq_JobsDetailStruct with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImageReviewReq_JobsDetailStruct) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageReviewReq_JobsDetailStruct with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ImageReviewReq_JobsDetailStructMultiError, or nil if none found.
func (m *ImageReviewReq_JobsDetailStruct) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageReviewReq_JobsDetailStruct) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCode()) > 1000 {
		err := ImageReviewReq_JobsDetailStructValidationError{
			field:  "Code",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMessage()) > 1000 {
		err := ImageReviewReq_JobsDetailStructValidationError{
			field:  "Message",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetJobId()) > 1000 {
		err := ImageReviewReq_JobsDetailStructValidationError{
			field:  "JobId",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetState()) > 1000 {
		err := ImageReviewReq_JobsDetailStructValidationError{
			field:  "State",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetObject()) > 1000 {
		err := ImageReviewReq_JobsDetailStructValidationError{
			field:  "Object",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUrl()) > 1000 {
		err := ImageReviewReq_JobsDetailStructValidationError{
			field:  "Url",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLabel()) > 1000 {
		err := ImageReviewReq_JobsDetailStructValidationError{
			field:  "Label",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Result

	// no validation rules for Score

	if utf8.RuneCountInString(m.GetCategory()) > 1000 {
		err := ImageReviewReq_JobsDetailStructValidationError{
			field:  "Category",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSubLabel()) > 1000 {
		err := ImageReviewReq_JobsDetailStructValidationError{
			field:  "SubLabel",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBucketId()) > 1000 {
		err := ImageReviewReq_JobsDetailStructValidationError{
			field:  "BucketId",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegion()) > 1000 {
		err := ImageReviewReq_JobsDetailStructValidationError{
			field:  "Region",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	{
		sorted_keys := make([]string, len(m.GetCosHeaders()))
		i := 0
		for key := range m.GetCosHeaders() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetCosHeaders()[key]
			_ = val

			if utf8.RuneCountInString(key) > 1000 {
				err := ImageReviewReq_JobsDetailStructValidationError{
					field:  fmt.Sprintf("CosHeaders[%v]", key),
					reason: "value length must be at most 1000 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if utf8.RuneCountInString(val) > 1000 {
				err := ImageReviewReq_JobsDetailStructValidationError{
					field:  fmt.Sprintf("CosHeaders[%v]", key),
					reason: "value length must be at most 1000 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return ImageReviewReq_JobsDetailStructMultiError(errors)
	}

	return nil
}

// ImageReviewReq_JobsDetailStructMultiError is an error wrapping multiple
// validation errors returned by ImageReviewReq_JobsDetailStruct.ValidateAll()
// if the designated constraints aren't met.
type ImageReviewReq_JobsDetailStructMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageReviewReq_JobsDetailStructMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageReviewReq_JobsDetailStructMultiError) AllErrors() []error { return m }

// ImageReviewReq_JobsDetailStructValidationError is the validation error
// returned by ImageReviewReq_JobsDetailStruct.Validate if the designated
// constraints aren't met.
type ImageReviewReq_JobsDetailStructValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageReviewReq_JobsDetailStructValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageReviewReq_JobsDetailStructValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageReviewReq_JobsDetailStructValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageReviewReq_JobsDetailStructValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageReviewReq_JobsDetailStructValidationError) ErrorName() string {
	return "ImageReviewReq_JobsDetailStructValidationError"
}

// Error satisfies the builtin error interface
func (e ImageReviewReq_JobsDetailStructValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageReviewReq_JobsDetailStruct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageReviewReq_JobsDetailStructValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageReviewReq_JobsDetailStructValidationError{}
