// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package biz

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson899f4d6bDecodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz(in *jlexer.Lexer, out *TextReview) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int32(in.Int32())
		case "commentId":
			out.CommentId = int32(in.Int32())
		case "createAt":
			out.CreateAt = string(in.String())
		case "comment":
			out.Comment = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "jobId":
			out.JobId = string(in.String())
		case "label":
			out.Label = string(in.String())
		case "result":
			out.Result = int32(in.Int32())
		case "uuid":
			out.Uuid = string(in.String())
		case "mode":
			out.Mode = string(in.String())
		case "section":
			out.Section = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson899f4d6bEncodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz(out *jwriter.Writer, in TextReview) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Id))
	}
	{
		const prefix string = ",\"commentId\":"
		out.RawString(prefix)
		out.Int32(int32(in.CommentId))
	}
	{
		const prefix string = ",\"createAt\":"
		out.RawString(prefix)
		out.String(string(in.CreateAt))
	}
	{
		const prefix string = ",\"comment\":"
		out.RawString(prefix)
		out.String(string(in.Comment))
	}
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		out.String(string(in.Kind))
	}
	{
		const prefix string = ",\"jobId\":"
		out.RawString(prefix)
		out.String(string(in.JobId))
	}
	{
		const prefix string = ",\"label\":"
		out.RawString(prefix)
		out.String(string(in.Label))
	}
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix)
		out.Int32(int32(in.Result))
	}
	{
		const prefix string = ",\"uuid\":"
		out.RawString(prefix)
		out.String(string(in.Uuid))
	}
	{
		const prefix string = ",\"mode\":"
		out.RawString(prefix)
		out.String(string(in.Mode))
	}
	{
		const prefix string = ",\"section\":"
		out.RawString(prefix)
		out.String(string(in.Section))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TextReview) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson899f4d6bEncodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TextReview) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson899f4d6bEncodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TextReview) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson899f4d6bDecodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TextReview) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson899f4d6bDecodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz(l, v)
}
func easyjson899f4d6bDecodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz1(in *jlexer.Lexer, out *SendSubCommentMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uuid":
			out.Uuid = string(in.String())
		case "id":
			out.Id = int32(in.Int32())
		case "rootId":
			out.RootId = int32(in.Int32())
		case "parentId":
			out.ParentId = int32(in.Int32())
		case "mode":
			out.Mode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson899f4d6bEncodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz1(out *jwriter.Writer, in SendSubCommentMap) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uuid\":"
		out.RawString(prefix[1:])
		out.String(string(in.Uuid))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int32(int32(in.Id))
	}
	{
		const prefix string = ",\"rootId\":"
		out.RawString(prefix)
		out.Int32(int32(in.RootId))
	}
	{
		const prefix string = ",\"parentId\":"
		out.RawString(prefix)
		out.Int32(int32(in.ParentId))
	}
	{
		const prefix string = ",\"mode\":"
		out.RawString(prefix)
		out.String(string(in.Mode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendSubCommentMap) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson899f4d6bEncodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendSubCommentMap) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson899f4d6bEncodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendSubCommentMap) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson899f4d6bDecodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendSubCommentMap) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson899f4d6bDecodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz1(l, v)
}
func easyjson899f4d6bDecodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz2(in *jlexer.Lexer, out *SendSubCommentAgreeMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uuid":
			out.Uuid = string(in.String())
		case "id":
			out.Id = int32(in.Int32())
		case "userUuid":
			out.UserUuid = string(in.String())
		case "mode":
			out.Mode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson899f4d6bEncodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz2(out *jwriter.Writer, in SendSubCommentAgreeMap) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uuid\":"
		out.RawString(prefix[1:])
		out.String(string(in.Uuid))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int32(int32(in.Id))
	}
	{
		const prefix string = ",\"userUuid\":"
		out.RawString(prefix)
		out.String(string(in.UserUuid))
	}
	{
		const prefix string = ",\"mode\":"
		out.RawString(prefix)
		out.String(string(in.Mode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendSubCommentAgreeMap) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson899f4d6bEncodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendSubCommentAgreeMap) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson899f4d6bEncodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendSubCommentAgreeMap) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson899f4d6bDecodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendSubCommentAgreeMap) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson899f4d6bDecodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz2(l, v)
}
func easyjson899f4d6bDecodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz3(in *jlexer.Lexer, out *SendScoreMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uuid":
			out.Uuid = string(in.String())
		case "score":
			out.Score = int32(in.Int32())
		case "mode":
			out.Mode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson899f4d6bEncodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz3(out *jwriter.Writer, in SendScoreMap) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uuid\":"
		out.RawString(prefix[1:])
		out.String(string(in.Uuid))
	}
	{
		const prefix string = ",\"score\":"
		out.RawString(prefix)
		out.Int32(int32(in.Score))
	}
	{
		const prefix string = ",\"mode\":"
		out.RawString(prefix)
		out.String(string(in.Mode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendScoreMap) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson899f4d6bEncodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendScoreMap) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson899f4d6bEncodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendScoreMap) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson899f4d6bDecodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendScoreMap) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson899f4d6bDecodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz3(l, v)
}
func easyjson899f4d6bDecodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz4(in *jlexer.Lexer, out *SendCommentStatisticMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uuid":
			out.Uuid = string(in.String())
		case "userUuid":
			out.UserUuid = string(in.String())
		case "mode":
			out.Mode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson899f4d6bEncodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz4(out *jwriter.Writer, in SendCommentStatisticMap) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uuid\":"
		out.RawString(prefix[1:])
		out.String(string(in.Uuid))
	}
	{
		const prefix string = ",\"userUuid\":"
		out.RawString(prefix)
		out.String(string(in.UserUuid))
	}
	{
		const prefix string = ",\"mode\":"
		out.RawString(prefix)
		out.String(string(in.Mode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendCommentStatisticMap) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson899f4d6bEncodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendCommentStatisticMap) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson899f4d6bEncodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendCommentStatisticMap) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson899f4d6bDecodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendCommentStatisticMap) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson899f4d6bDecodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz4(l, v)
}
func easyjson899f4d6bDecodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz5(in *jlexer.Lexer, out *SendCommentMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uuid":
			out.Uuid = string(in.String())
		case "id":
			out.Id = int32(in.Int32())
		case "creationId":
			out.CreationId = int32(in.Int32())
		case "creationType":
			out.CreationType = int32(in.Int32())
		case "mode":
			out.Mode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson899f4d6bEncodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz5(out *jwriter.Writer, in SendCommentMap) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uuid\":"
		out.RawString(prefix[1:])
		out.String(string(in.Uuid))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int32(int32(in.Id))
	}
	{
		const prefix string = ",\"creationId\":"
		out.RawString(prefix)
		out.Int32(int32(in.CreationId))
	}
	{
		const prefix string = ",\"creationType\":"
		out.RawString(prefix)
		out.Int32(int32(in.CreationType))
	}
	{
		const prefix string = ",\"mode\":"
		out.RawString(prefix)
		out.String(string(in.Mode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendCommentMap) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson899f4d6bEncodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendCommentMap) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson899f4d6bEncodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendCommentMap) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson899f4d6bDecodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendCommentMap) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson899f4d6bDecodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz5(l, v)
}
func easyjson899f4d6bDecodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz6(in *jlexer.Lexer, out *SendCommentAgreeMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uuid":
			out.Uuid = string(in.String())
		case "id":
			out.Id = int32(in.Int32())
		case "creationId":
			out.CreationId = int32(in.Int32())
		case "creationType":
			out.CreationType = int32(in.Int32())
		case "userUuid":
			out.UserUuid = string(in.String())
		case "mode":
			out.Mode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson899f4d6bEncodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz6(out *jwriter.Writer, in SendCommentAgreeMap) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uuid\":"
		out.RawString(prefix[1:])
		out.String(string(in.Uuid))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int32(int32(in.Id))
	}
	{
		const prefix string = ",\"creationId\":"
		out.RawString(prefix)
		out.Int32(int32(in.CreationId))
	}
	{
		const prefix string = ",\"creationType\":"
		out.RawString(prefix)
		out.Int32(int32(in.CreationType))
	}
	{
		const prefix string = ",\"userUuid\":"
		out.RawString(prefix)
		out.String(string(in.UserUuid))
	}
	{
		const prefix string = ",\"mode\":"
		out.RawString(prefix)
		out.String(string(in.Mode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendCommentAgreeMap) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson899f4d6bEncodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendCommentAgreeMap) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson899f4d6bEncodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendCommentAgreeMap) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson899f4d6bDecodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendCommentAgreeMap) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson899f4d6bDecodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz6(l, v)
}
func easyjson899f4d6bDecodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz7(in *jlexer.Lexer, out *CommentReview) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uuid":
			out.Uuid = string(in.String())
		case "id":
			out.Id = int32(in.Int32())
		case "mode":
			out.Mode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson899f4d6bEncodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz7(out *jwriter.Writer, in CommentReview) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uuid\":"
		out.RawString(prefix[1:])
		out.String(string(in.Uuid))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int32(int32(in.Id))
	}
	{
		const prefix string = ",\"mode\":"
		out.RawString(prefix)
		out.String(string(in.Mode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommentReview) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson899f4d6bEncodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentReview) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson899f4d6bEncodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentReview) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson899f4d6bDecodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentReview) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson899f4d6bDecodeGithubComTheZionMatrixCoreAppCommentServiceInternalBiz7(l, v)
}
