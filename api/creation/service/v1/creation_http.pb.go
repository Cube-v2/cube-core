// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.20.0
// source: creation/service/v1/creation.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCreationGetHealth = "/creation.v1.Creation/GetHealth"
const OperationCreationGetNews = "/creation.v1.Creation/GetNews"

type CreationHTTPServer interface {
	GetHealth(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetNews(context.Context, *GetNewsReq) (*GetNewsReply, error)
}

func RegisterCreationHTTPServer(s *http.Server, srv CreationHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/get/news", _Creation_GetNews0_HTTP_Handler(srv))
	r.GET("/v1/get/health", _Creation_GetHealth4_HTTP_Handler(srv))
}

func _Creation_GetNews0_HTTP_Handler(srv CreationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetNewsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCreationGetNews)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNews(ctx, req.(*GetNewsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetNewsReply)
		return ctx.Result(200, reply)
	}
}

func _Creation_GetHealth4_HTTP_Handler(srv CreationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCreationGetHealth)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetHealth(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type CreationHTTPClient interface {
	GetHealth(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetNews(ctx context.Context, req *GetNewsReq, opts ...http.CallOption) (rsp *GetNewsReply, err error)
}

type CreationHTTPClientImpl struct {
	cc *http.Client
}

func NewCreationHTTPClient(client *http.Client) CreationHTTPClient {
	return &CreationHTTPClientImpl{client}
}

func (c *CreationHTTPClientImpl) GetHealth(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/get/health"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCreationGetHealth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CreationHTTPClientImpl) GetNews(ctx context.Context, in *GetNewsReq, opts ...http.CallOption) (*GetNewsReply, error) {
	var out GetNewsReply
	pattern := "/v1/get/news"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCreationGetNews))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
