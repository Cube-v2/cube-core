// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: comment/service/v1/comment.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommentClient is the client API for Comment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentClient interface {
	GetLastCommentDraft(ctx context.Context, in *GetLastCommentDraftReq, opts ...grpc.CallOption) (*GetLastCommentDraftReply, error)
	GetUserCommentAgree(ctx context.Context, in *GetUserCommentAgreeReq, opts ...grpc.CallOption) (*GetUserCommentAgreeReply, error)
	GetCommentUser(ctx context.Context, in *GetCommentUserReq, opts ...grpc.CallOption) (*GetCommentUserReply, error)
	GetCommentList(ctx context.Context, in *GetCommentListReq, opts ...grpc.CallOption) (*GetCommentListReply, error)
	GetSubCommentList(ctx context.Context, in *GetSubCommentListReq, opts ...grpc.CallOption) (*GetSubCommentListReply, error)
	GetCommentListHot(ctx context.Context, in *GetCommentListReq, opts ...grpc.CallOption) (*GetCommentListReply, error)
	GetCommentListStatistic(ctx context.Context, in *GetCommentListStatisticReq, opts ...grpc.CallOption) (*GetCommentListStatisticReply, error)
	GetSubCommentListStatistic(ctx context.Context, in *GetCommentListStatisticReq, opts ...grpc.CallOption) (*GetCommentListStatisticReply, error)
	GetUserCommentArticleReplyList(ctx context.Context, in *GetUserCommentArticleReplyListReq, opts ...grpc.CallOption) (*GetUserCommentArticleReplyListReply, error)
	GetUserSubCommentArticleReplyList(ctx context.Context, in *GetUserSubCommentArticleReplyListReq, opts ...grpc.CallOption) (*GetUserSubCommentArticleReplyListReply, error)
	GetUserCommentTalkReplyList(ctx context.Context, in *GetUserCommentTalkReplyListReq, opts ...grpc.CallOption) (*GetUserCommentTalkReplyListReply, error)
	GetUserSubCommentTalkReplyList(ctx context.Context, in *GetUserSubCommentTalkReplyListReq, opts ...grpc.CallOption) (*GetUserSubCommentTalkReplyListReply, error)
	GetUserCommentArticleRepliedList(ctx context.Context, in *GetUserCommentArticleRepliedListReq, opts ...grpc.CallOption) (*GetUserCommentArticleRepliedListReply, error)
	GetUserSubCommentArticleRepliedList(ctx context.Context, in *GetUserSubCommentArticleRepliedListReq, opts ...grpc.CallOption) (*GetUserSubCommentArticleRepliedListReply, error)
	GetUserCommentTalkRepliedList(ctx context.Context, in *GetUserCommentTalkRepliedListReq, opts ...grpc.CallOption) (*GetUserCommentTalkRepliedListReply, error)
	GetUserSubCommentTalkRepliedList(ctx context.Context, in *GetUserSubCommentTalkRepliedListReq, opts ...grpc.CallOption) (*GetUserSubCommentTalkRepliedListReply, error)
	GetUserCommentRepliedList(ctx context.Context, in *GetUserCommentRepliedListReq, opts ...grpc.CallOption) (*GetUserCommentRepliedListReply, error)
	GetUserSubCommentRepliedList(ctx context.Context, in *GetUserSubCommentRepliedListReq, opts ...grpc.CallOption) (*GetUserSubCommentRepliedListReply, error)
	GetCommentContentReview(ctx context.Context, in *GetCommentContentReviewReq, opts ...grpc.CallOption) (*GetCommentContentReviewReply, error)
	CommentContentIrregular(ctx context.Context, in *CommentContentIrregularReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateCommentDraft(ctx context.Context, in *CreateCommentDraftReq, opts ...grpc.CallOption) (*CreateCommentDraftReply, error)
	CreateComment(ctx context.Context, in *CreateCommentReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateSubComment(ctx context.Context, in *CreateSubCommentReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateCommentDbAndCache(ctx context.Context, in *CreateCommentDbAndCacheReq, opts ...grpc.CallOption) (*CreateCommentDbAndCacheReply, error)
	CreateSubCommentDbAndCache(ctx context.Context, in *CreateSubCommentDbAndCacheReq, opts ...grpc.CallOption) (*CreateSubCommentDbAndCacheReply, error)
	SendComment(ctx context.Context, in *SendCommentReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendSubComment(ctx context.Context, in *SendSubCommentReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetCommentAgree(ctx context.Context, in *SetCommentAgreeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetSubCommentAgree(ctx context.Context, in *SetSubCommentAgreeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetCommentAgreeDbAndCache(ctx context.Context, in *SetCommentAgreeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetSubCommentAgreeDbAndCache(ctx context.Context, in *SetSubCommentAgreeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CancelCommentAgree(ctx context.Context, in *CancelCommentAgreeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CancelSubCommentAgree(ctx context.Context, in *CancelSubCommentAgreeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CancelCommentAgreeDbAndCache(ctx context.Context, in *CancelCommentAgreeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CancelSubCommentAgreeDbAndCache(ctx context.Context, in *CancelSubCommentAgreeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddCommentContentReviewDbAndCache(ctx context.Context, in *AddCommentContentReviewDbAndCacheReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveComment(ctx context.Context, in *RemoveCommentReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveSubComment(ctx context.Context, in *RemoveSubCommentReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveCommentDbAndCache(ctx context.Context, in *RemoveCommentDbAndCacheReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveSubCommentDbAndCache(ctx context.Context, in *RemoveSubCommentDbAndCacheReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetHealth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type commentClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentClient(cc grpc.ClientConnInterface) CommentClient {
	return &commentClient{cc}
}

func (c *commentClient) GetLastCommentDraft(ctx context.Context, in *GetLastCommentDraftReq, opts ...grpc.CallOption) (*GetLastCommentDraftReply, error) {
	out := new(GetLastCommentDraftReply)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/GetLastCommentDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) GetUserCommentAgree(ctx context.Context, in *GetUserCommentAgreeReq, opts ...grpc.CallOption) (*GetUserCommentAgreeReply, error) {
	out := new(GetUserCommentAgreeReply)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/GetUserCommentAgree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) GetCommentUser(ctx context.Context, in *GetCommentUserReq, opts ...grpc.CallOption) (*GetCommentUserReply, error) {
	out := new(GetCommentUserReply)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/GetCommentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) GetCommentList(ctx context.Context, in *GetCommentListReq, opts ...grpc.CallOption) (*GetCommentListReply, error) {
	out := new(GetCommentListReply)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/GetCommentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) GetSubCommentList(ctx context.Context, in *GetSubCommentListReq, opts ...grpc.CallOption) (*GetSubCommentListReply, error) {
	out := new(GetSubCommentListReply)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/GetSubCommentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) GetCommentListHot(ctx context.Context, in *GetCommentListReq, opts ...grpc.CallOption) (*GetCommentListReply, error) {
	out := new(GetCommentListReply)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/GetCommentListHot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) GetCommentListStatistic(ctx context.Context, in *GetCommentListStatisticReq, opts ...grpc.CallOption) (*GetCommentListStatisticReply, error) {
	out := new(GetCommentListStatisticReply)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/GetCommentListStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) GetSubCommentListStatistic(ctx context.Context, in *GetCommentListStatisticReq, opts ...grpc.CallOption) (*GetCommentListStatisticReply, error) {
	out := new(GetCommentListStatisticReply)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/GetSubCommentListStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) GetUserCommentArticleReplyList(ctx context.Context, in *GetUserCommentArticleReplyListReq, opts ...grpc.CallOption) (*GetUserCommentArticleReplyListReply, error) {
	out := new(GetUserCommentArticleReplyListReply)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/GetUserCommentArticleReplyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) GetUserSubCommentArticleReplyList(ctx context.Context, in *GetUserSubCommentArticleReplyListReq, opts ...grpc.CallOption) (*GetUserSubCommentArticleReplyListReply, error) {
	out := new(GetUserSubCommentArticleReplyListReply)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/GetUserSubCommentArticleReplyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) GetUserCommentTalkReplyList(ctx context.Context, in *GetUserCommentTalkReplyListReq, opts ...grpc.CallOption) (*GetUserCommentTalkReplyListReply, error) {
	out := new(GetUserCommentTalkReplyListReply)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/GetUserCommentTalkReplyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) GetUserSubCommentTalkReplyList(ctx context.Context, in *GetUserSubCommentTalkReplyListReq, opts ...grpc.CallOption) (*GetUserSubCommentTalkReplyListReply, error) {
	out := new(GetUserSubCommentTalkReplyListReply)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/GetUserSubCommentTalkReplyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) GetUserCommentArticleRepliedList(ctx context.Context, in *GetUserCommentArticleRepliedListReq, opts ...grpc.CallOption) (*GetUserCommentArticleRepliedListReply, error) {
	out := new(GetUserCommentArticleRepliedListReply)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/GetUserCommentArticleRepliedList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) GetUserSubCommentArticleRepliedList(ctx context.Context, in *GetUserSubCommentArticleRepliedListReq, opts ...grpc.CallOption) (*GetUserSubCommentArticleRepliedListReply, error) {
	out := new(GetUserSubCommentArticleRepliedListReply)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/GetUserSubCommentArticleRepliedList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) GetUserCommentTalkRepliedList(ctx context.Context, in *GetUserCommentTalkRepliedListReq, opts ...grpc.CallOption) (*GetUserCommentTalkRepliedListReply, error) {
	out := new(GetUserCommentTalkRepliedListReply)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/GetUserCommentTalkRepliedList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) GetUserSubCommentTalkRepliedList(ctx context.Context, in *GetUserSubCommentTalkRepliedListReq, opts ...grpc.CallOption) (*GetUserSubCommentTalkRepliedListReply, error) {
	out := new(GetUserSubCommentTalkRepliedListReply)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/GetUserSubCommentTalkRepliedList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) GetUserCommentRepliedList(ctx context.Context, in *GetUserCommentRepliedListReq, opts ...grpc.CallOption) (*GetUserCommentRepliedListReply, error) {
	out := new(GetUserCommentRepliedListReply)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/GetUserCommentRepliedList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) GetUserSubCommentRepliedList(ctx context.Context, in *GetUserSubCommentRepliedListReq, opts ...grpc.CallOption) (*GetUserSubCommentRepliedListReply, error) {
	out := new(GetUserSubCommentRepliedListReply)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/GetUserSubCommentRepliedList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) GetCommentContentReview(ctx context.Context, in *GetCommentContentReviewReq, opts ...grpc.CallOption) (*GetCommentContentReviewReply, error) {
	out := new(GetCommentContentReviewReply)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/GetCommentContentReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) CommentContentIrregular(ctx context.Context, in *CommentContentIrregularReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/CommentContentIrregular", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) CreateCommentDraft(ctx context.Context, in *CreateCommentDraftReq, opts ...grpc.CallOption) (*CreateCommentDraftReply, error) {
	out := new(CreateCommentDraftReply)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/CreateCommentDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) CreateComment(ctx context.Context, in *CreateCommentReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) CreateSubComment(ctx context.Context, in *CreateSubCommentReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/CreateSubComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) CreateCommentDbAndCache(ctx context.Context, in *CreateCommentDbAndCacheReq, opts ...grpc.CallOption) (*CreateCommentDbAndCacheReply, error) {
	out := new(CreateCommentDbAndCacheReply)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/CreateCommentDbAndCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) CreateSubCommentDbAndCache(ctx context.Context, in *CreateSubCommentDbAndCacheReq, opts ...grpc.CallOption) (*CreateSubCommentDbAndCacheReply, error) {
	out := new(CreateSubCommentDbAndCacheReply)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/CreateSubCommentDbAndCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) SendComment(ctx context.Context, in *SendCommentReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/SendComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) SendSubComment(ctx context.Context, in *SendSubCommentReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/SendSubComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) SetCommentAgree(ctx context.Context, in *SetCommentAgreeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/SetCommentAgree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) SetSubCommentAgree(ctx context.Context, in *SetSubCommentAgreeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/SetSubCommentAgree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) SetCommentAgreeDbAndCache(ctx context.Context, in *SetCommentAgreeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/SetCommentAgreeDbAndCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) SetSubCommentAgreeDbAndCache(ctx context.Context, in *SetSubCommentAgreeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/SetSubCommentAgreeDbAndCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) CancelCommentAgree(ctx context.Context, in *CancelCommentAgreeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/CancelCommentAgree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) CancelSubCommentAgree(ctx context.Context, in *CancelSubCommentAgreeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/CancelSubCommentAgree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) CancelCommentAgreeDbAndCache(ctx context.Context, in *CancelCommentAgreeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/CancelCommentAgreeDbAndCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) CancelSubCommentAgreeDbAndCache(ctx context.Context, in *CancelSubCommentAgreeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/CancelSubCommentAgreeDbAndCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) AddCommentContentReviewDbAndCache(ctx context.Context, in *AddCommentContentReviewDbAndCacheReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/AddCommentContentReviewDbAndCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) RemoveComment(ctx context.Context, in *RemoveCommentReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/RemoveComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) RemoveSubComment(ctx context.Context, in *RemoveSubCommentReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/RemoveSubComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) RemoveCommentDbAndCache(ctx context.Context, in *RemoveCommentDbAndCacheReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/RemoveCommentDbAndCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) RemoveSubCommentDbAndCache(ctx context.Context, in *RemoveSubCommentDbAndCacheReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/RemoveSubCommentDbAndCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) GetHealth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/comment.v1.Comment/GetHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentServer is the server API for Comment service.
// All implementations must embed UnimplementedCommentServer
// for forward compatibility
type CommentServer interface {
	GetLastCommentDraft(context.Context, *GetLastCommentDraftReq) (*GetLastCommentDraftReply, error)
	GetUserCommentAgree(context.Context, *GetUserCommentAgreeReq) (*GetUserCommentAgreeReply, error)
	GetCommentUser(context.Context, *GetCommentUserReq) (*GetCommentUserReply, error)
	GetCommentList(context.Context, *GetCommentListReq) (*GetCommentListReply, error)
	GetSubCommentList(context.Context, *GetSubCommentListReq) (*GetSubCommentListReply, error)
	GetCommentListHot(context.Context, *GetCommentListReq) (*GetCommentListReply, error)
	GetCommentListStatistic(context.Context, *GetCommentListStatisticReq) (*GetCommentListStatisticReply, error)
	GetSubCommentListStatistic(context.Context, *GetCommentListStatisticReq) (*GetCommentListStatisticReply, error)
	GetUserCommentArticleReplyList(context.Context, *GetUserCommentArticleReplyListReq) (*GetUserCommentArticleReplyListReply, error)
	GetUserSubCommentArticleReplyList(context.Context, *GetUserSubCommentArticleReplyListReq) (*GetUserSubCommentArticleReplyListReply, error)
	GetUserCommentTalkReplyList(context.Context, *GetUserCommentTalkReplyListReq) (*GetUserCommentTalkReplyListReply, error)
	GetUserSubCommentTalkReplyList(context.Context, *GetUserSubCommentTalkReplyListReq) (*GetUserSubCommentTalkReplyListReply, error)
	GetUserCommentArticleRepliedList(context.Context, *GetUserCommentArticleRepliedListReq) (*GetUserCommentArticleRepliedListReply, error)
	GetUserSubCommentArticleRepliedList(context.Context, *GetUserSubCommentArticleRepliedListReq) (*GetUserSubCommentArticleRepliedListReply, error)
	GetUserCommentTalkRepliedList(context.Context, *GetUserCommentTalkRepliedListReq) (*GetUserCommentTalkRepliedListReply, error)
	GetUserSubCommentTalkRepliedList(context.Context, *GetUserSubCommentTalkRepliedListReq) (*GetUserSubCommentTalkRepliedListReply, error)
	GetUserCommentRepliedList(context.Context, *GetUserCommentRepliedListReq) (*GetUserCommentRepliedListReply, error)
	GetUserSubCommentRepliedList(context.Context, *GetUserSubCommentRepliedListReq) (*GetUserSubCommentRepliedListReply, error)
	GetCommentContentReview(context.Context, *GetCommentContentReviewReq) (*GetCommentContentReviewReply, error)
	CommentContentIrregular(context.Context, *CommentContentIrregularReq) (*emptypb.Empty, error)
	CreateCommentDraft(context.Context, *CreateCommentDraftReq) (*CreateCommentDraftReply, error)
	CreateComment(context.Context, *CreateCommentReq) (*emptypb.Empty, error)
	CreateSubComment(context.Context, *CreateSubCommentReq) (*emptypb.Empty, error)
	CreateCommentDbAndCache(context.Context, *CreateCommentDbAndCacheReq) (*CreateCommentDbAndCacheReply, error)
	CreateSubCommentDbAndCache(context.Context, *CreateSubCommentDbAndCacheReq) (*CreateSubCommentDbAndCacheReply, error)
	SendComment(context.Context, *SendCommentReq) (*emptypb.Empty, error)
	SendSubComment(context.Context, *SendSubCommentReq) (*emptypb.Empty, error)
	SetCommentAgree(context.Context, *SetCommentAgreeReq) (*emptypb.Empty, error)
	SetSubCommentAgree(context.Context, *SetSubCommentAgreeReq) (*emptypb.Empty, error)
	SetCommentAgreeDbAndCache(context.Context, *SetCommentAgreeReq) (*emptypb.Empty, error)
	SetSubCommentAgreeDbAndCache(context.Context, *SetSubCommentAgreeReq) (*emptypb.Empty, error)
	CancelCommentAgree(context.Context, *CancelCommentAgreeReq) (*emptypb.Empty, error)
	CancelSubCommentAgree(context.Context, *CancelSubCommentAgreeReq) (*emptypb.Empty, error)
	CancelCommentAgreeDbAndCache(context.Context, *CancelCommentAgreeReq) (*emptypb.Empty, error)
	CancelSubCommentAgreeDbAndCache(context.Context, *CancelSubCommentAgreeReq) (*emptypb.Empty, error)
	AddCommentContentReviewDbAndCache(context.Context, *AddCommentContentReviewDbAndCacheReq) (*emptypb.Empty, error)
	RemoveComment(context.Context, *RemoveCommentReq) (*emptypb.Empty, error)
	RemoveSubComment(context.Context, *RemoveSubCommentReq) (*emptypb.Empty, error)
	RemoveCommentDbAndCache(context.Context, *RemoveCommentDbAndCacheReq) (*emptypb.Empty, error)
	RemoveSubCommentDbAndCache(context.Context, *RemoveSubCommentDbAndCacheReq) (*emptypb.Empty, error)
	GetHealth(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedCommentServer()
}

// UnimplementedCommentServer must be embedded to have forward compatible implementations.
type UnimplementedCommentServer struct {
}

func (UnimplementedCommentServer) GetLastCommentDraft(context.Context, *GetLastCommentDraftReq) (*GetLastCommentDraftReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastCommentDraft not implemented")
}
func (UnimplementedCommentServer) GetUserCommentAgree(context.Context, *GetUserCommentAgreeReq) (*GetUserCommentAgreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCommentAgree not implemented")
}
func (UnimplementedCommentServer) GetCommentUser(context.Context, *GetCommentUserReq) (*GetCommentUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentUser not implemented")
}
func (UnimplementedCommentServer) GetCommentList(context.Context, *GetCommentListReq) (*GetCommentListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentList not implemented")
}
func (UnimplementedCommentServer) GetSubCommentList(context.Context, *GetSubCommentListReq) (*GetSubCommentListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubCommentList not implemented")
}
func (UnimplementedCommentServer) GetCommentListHot(context.Context, *GetCommentListReq) (*GetCommentListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentListHot not implemented")
}
func (UnimplementedCommentServer) GetCommentListStatistic(context.Context, *GetCommentListStatisticReq) (*GetCommentListStatisticReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentListStatistic not implemented")
}
func (UnimplementedCommentServer) GetSubCommentListStatistic(context.Context, *GetCommentListStatisticReq) (*GetCommentListStatisticReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubCommentListStatistic not implemented")
}
func (UnimplementedCommentServer) GetUserCommentArticleReplyList(context.Context, *GetUserCommentArticleReplyListReq) (*GetUserCommentArticleReplyListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCommentArticleReplyList not implemented")
}
func (UnimplementedCommentServer) GetUserSubCommentArticleReplyList(context.Context, *GetUserSubCommentArticleReplyListReq) (*GetUserSubCommentArticleReplyListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSubCommentArticleReplyList not implemented")
}
func (UnimplementedCommentServer) GetUserCommentTalkReplyList(context.Context, *GetUserCommentTalkReplyListReq) (*GetUserCommentTalkReplyListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCommentTalkReplyList not implemented")
}
func (UnimplementedCommentServer) GetUserSubCommentTalkReplyList(context.Context, *GetUserSubCommentTalkReplyListReq) (*GetUserSubCommentTalkReplyListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSubCommentTalkReplyList not implemented")
}
func (UnimplementedCommentServer) GetUserCommentArticleRepliedList(context.Context, *GetUserCommentArticleRepliedListReq) (*GetUserCommentArticleRepliedListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCommentArticleRepliedList not implemented")
}
func (UnimplementedCommentServer) GetUserSubCommentArticleRepliedList(context.Context, *GetUserSubCommentArticleRepliedListReq) (*GetUserSubCommentArticleRepliedListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSubCommentArticleRepliedList not implemented")
}
func (UnimplementedCommentServer) GetUserCommentTalkRepliedList(context.Context, *GetUserCommentTalkRepliedListReq) (*GetUserCommentTalkRepliedListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCommentTalkRepliedList not implemented")
}
func (UnimplementedCommentServer) GetUserSubCommentTalkRepliedList(context.Context, *GetUserSubCommentTalkRepliedListReq) (*GetUserSubCommentTalkRepliedListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSubCommentTalkRepliedList not implemented")
}
func (UnimplementedCommentServer) GetUserCommentRepliedList(context.Context, *GetUserCommentRepliedListReq) (*GetUserCommentRepliedListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCommentRepliedList not implemented")
}
func (UnimplementedCommentServer) GetUserSubCommentRepliedList(context.Context, *GetUserSubCommentRepliedListReq) (*GetUserSubCommentRepliedListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSubCommentRepliedList not implemented")
}
func (UnimplementedCommentServer) GetCommentContentReview(context.Context, *GetCommentContentReviewReq) (*GetCommentContentReviewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentContentReview not implemented")
}
func (UnimplementedCommentServer) CommentContentIrregular(context.Context, *CommentContentIrregularReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentContentIrregular not implemented")
}
func (UnimplementedCommentServer) CreateCommentDraft(context.Context, *CreateCommentDraftReq) (*CreateCommentDraftReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommentDraft not implemented")
}
func (UnimplementedCommentServer) CreateComment(context.Context, *CreateCommentReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedCommentServer) CreateSubComment(context.Context, *CreateSubCommentReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubComment not implemented")
}
func (UnimplementedCommentServer) CreateCommentDbAndCache(context.Context, *CreateCommentDbAndCacheReq) (*CreateCommentDbAndCacheReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommentDbAndCache not implemented")
}
func (UnimplementedCommentServer) CreateSubCommentDbAndCache(context.Context, *CreateSubCommentDbAndCacheReq) (*CreateSubCommentDbAndCacheReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubCommentDbAndCache not implemented")
}
func (UnimplementedCommentServer) SendComment(context.Context, *SendCommentReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendComment not implemented")
}
func (UnimplementedCommentServer) SendSubComment(context.Context, *SendSubCommentReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSubComment not implemented")
}
func (UnimplementedCommentServer) SetCommentAgree(context.Context, *SetCommentAgreeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCommentAgree not implemented")
}
func (UnimplementedCommentServer) SetSubCommentAgree(context.Context, *SetSubCommentAgreeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSubCommentAgree not implemented")
}
func (UnimplementedCommentServer) SetCommentAgreeDbAndCache(context.Context, *SetCommentAgreeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCommentAgreeDbAndCache not implemented")
}
func (UnimplementedCommentServer) SetSubCommentAgreeDbAndCache(context.Context, *SetSubCommentAgreeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSubCommentAgreeDbAndCache not implemented")
}
func (UnimplementedCommentServer) CancelCommentAgree(context.Context, *CancelCommentAgreeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelCommentAgree not implemented")
}
func (UnimplementedCommentServer) CancelSubCommentAgree(context.Context, *CancelSubCommentAgreeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSubCommentAgree not implemented")
}
func (UnimplementedCommentServer) CancelCommentAgreeDbAndCache(context.Context, *CancelCommentAgreeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelCommentAgreeDbAndCache not implemented")
}
func (UnimplementedCommentServer) CancelSubCommentAgreeDbAndCache(context.Context, *CancelSubCommentAgreeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSubCommentAgreeDbAndCache not implemented")
}
func (UnimplementedCommentServer) AddCommentContentReviewDbAndCache(context.Context, *AddCommentContentReviewDbAndCacheReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCommentContentReviewDbAndCache not implemented")
}
func (UnimplementedCommentServer) RemoveComment(context.Context, *RemoveCommentReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveComment not implemented")
}
func (UnimplementedCommentServer) RemoveSubComment(context.Context, *RemoveSubCommentReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSubComment not implemented")
}
func (UnimplementedCommentServer) RemoveCommentDbAndCache(context.Context, *RemoveCommentDbAndCacheReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCommentDbAndCache not implemented")
}
func (UnimplementedCommentServer) RemoveSubCommentDbAndCache(context.Context, *RemoveSubCommentDbAndCacheReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSubCommentDbAndCache not implemented")
}
func (UnimplementedCommentServer) GetHealth(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedCommentServer) mustEmbedUnimplementedCommentServer() {}

// UnsafeCommentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentServer will
// result in compilation errors.
type UnsafeCommentServer interface {
	mustEmbedUnimplementedCommentServer()
}

func RegisterCommentServer(s grpc.ServiceRegistrar, srv CommentServer) {
	s.RegisterService(&Comment_ServiceDesc, srv)
}

func _Comment_GetLastCommentDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastCommentDraftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).GetLastCommentDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/GetLastCommentDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).GetLastCommentDraft(ctx, req.(*GetLastCommentDraftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_GetUserCommentAgree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCommentAgreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).GetUserCommentAgree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/GetUserCommentAgree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).GetUserCommentAgree(ctx, req.(*GetUserCommentAgreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_GetCommentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).GetCommentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/GetCommentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).GetCommentUser(ctx, req.(*GetCommentUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_GetCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).GetCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/GetCommentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).GetCommentList(ctx, req.(*GetCommentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_GetSubCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubCommentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).GetSubCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/GetSubCommentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).GetSubCommentList(ctx, req.(*GetSubCommentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_GetCommentListHot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).GetCommentListHot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/GetCommentListHot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).GetCommentListHot(ctx, req.(*GetCommentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_GetCommentListStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentListStatisticReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).GetCommentListStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/GetCommentListStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).GetCommentListStatistic(ctx, req.(*GetCommentListStatisticReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_GetSubCommentListStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentListStatisticReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).GetSubCommentListStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/GetSubCommentListStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).GetSubCommentListStatistic(ctx, req.(*GetCommentListStatisticReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_GetUserCommentArticleReplyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCommentArticleReplyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).GetUserCommentArticleReplyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/GetUserCommentArticleReplyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).GetUserCommentArticleReplyList(ctx, req.(*GetUserCommentArticleReplyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_GetUserSubCommentArticleReplyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSubCommentArticleReplyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).GetUserSubCommentArticleReplyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/GetUserSubCommentArticleReplyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).GetUserSubCommentArticleReplyList(ctx, req.(*GetUserSubCommentArticleReplyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_GetUserCommentTalkReplyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCommentTalkReplyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).GetUserCommentTalkReplyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/GetUserCommentTalkReplyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).GetUserCommentTalkReplyList(ctx, req.(*GetUserCommentTalkReplyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_GetUserSubCommentTalkReplyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSubCommentTalkReplyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).GetUserSubCommentTalkReplyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/GetUserSubCommentTalkReplyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).GetUserSubCommentTalkReplyList(ctx, req.(*GetUserSubCommentTalkReplyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_GetUserCommentArticleRepliedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCommentArticleRepliedListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).GetUserCommentArticleRepliedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/GetUserCommentArticleRepliedList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).GetUserCommentArticleRepliedList(ctx, req.(*GetUserCommentArticleRepliedListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_GetUserSubCommentArticleRepliedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSubCommentArticleRepliedListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).GetUserSubCommentArticleRepliedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/GetUserSubCommentArticleRepliedList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).GetUserSubCommentArticleRepliedList(ctx, req.(*GetUserSubCommentArticleRepliedListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_GetUserCommentTalkRepliedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCommentTalkRepliedListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).GetUserCommentTalkRepliedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/GetUserCommentTalkRepliedList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).GetUserCommentTalkRepliedList(ctx, req.(*GetUserCommentTalkRepliedListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_GetUserSubCommentTalkRepliedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSubCommentTalkRepliedListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).GetUserSubCommentTalkRepliedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/GetUserSubCommentTalkRepliedList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).GetUserSubCommentTalkRepliedList(ctx, req.(*GetUserSubCommentTalkRepliedListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_GetUserCommentRepliedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCommentRepliedListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).GetUserCommentRepliedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/GetUserCommentRepliedList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).GetUserCommentRepliedList(ctx, req.(*GetUserCommentRepliedListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_GetUserSubCommentRepliedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSubCommentRepliedListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).GetUserSubCommentRepliedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/GetUserSubCommentRepliedList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).GetUserSubCommentRepliedList(ctx, req.(*GetUserSubCommentRepliedListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_GetCommentContentReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentContentReviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).GetCommentContentReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/GetCommentContentReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).GetCommentContentReview(ctx, req.(*GetCommentContentReviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_CommentContentIrregular_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentContentIrregularReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).CommentContentIrregular(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/CommentContentIrregular",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).CommentContentIrregular(ctx, req.(*CommentContentIrregularReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_CreateCommentDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentDraftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).CreateCommentDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/CreateCommentDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).CreateCommentDraft(ctx, req.(*CreateCommentDraftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).CreateComment(ctx, req.(*CreateCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_CreateSubComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).CreateSubComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/CreateSubComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).CreateSubComment(ctx, req.(*CreateSubCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_CreateCommentDbAndCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentDbAndCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).CreateCommentDbAndCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/CreateCommentDbAndCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).CreateCommentDbAndCache(ctx, req.(*CreateCommentDbAndCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_CreateSubCommentDbAndCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubCommentDbAndCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).CreateSubCommentDbAndCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/CreateSubCommentDbAndCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).CreateSubCommentDbAndCache(ctx, req.(*CreateSubCommentDbAndCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_SendComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).SendComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/SendComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).SendComment(ctx, req.(*SendCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_SendSubComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSubCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).SendSubComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/SendSubComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).SendSubComment(ctx, req.(*SendSubCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_SetCommentAgree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCommentAgreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).SetCommentAgree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/SetCommentAgree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).SetCommentAgree(ctx, req.(*SetCommentAgreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_SetSubCommentAgree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSubCommentAgreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).SetSubCommentAgree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/SetSubCommentAgree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).SetSubCommentAgree(ctx, req.(*SetSubCommentAgreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_SetCommentAgreeDbAndCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCommentAgreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).SetCommentAgreeDbAndCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/SetCommentAgreeDbAndCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).SetCommentAgreeDbAndCache(ctx, req.(*SetCommentAgreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_SetSubCommentAgreeDbAndCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSubCommentAgreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).SetSubCommentAgreeDbAndCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/SetSubCommentAgreeDbAndCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).SetSubCommentAgreeDbAndCache(ctx, req.(*SetSubCommentAgreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_CancelCommentAgree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelCommentAgreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).CancelCommentAgree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/CancelCommentAgree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).CancelCommentAgree(ctx, req.(*CancelCommentAgreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_CancelSubCommentAgree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelSubCommentAgreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).CancelSubCommentAgree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/CancelSubCommentAgree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).CancelSubCommentAgree(ctx, req.(*CancelSubCommentAgreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_CancelCommentAgreeDbAndCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelCommentAgreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).CancelCommentAgreeDbAndCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/CancelCommentAgreeDbAndCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).CancelCommentAgreeDbAndCache(ctx, req.(*CancelCommentAgreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_CancelSubCommentAgreeDbAndCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelSubCommentAgreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).CancelSubCommentAgreeDbAndCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/CancelSubCommentAgreeDbAndCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).CancelSubCommentAgreeDbAndCache(ctx, req.(*CancelSubCommentAgreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_AddCommentContentReviewDbAndCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentContentReviewDbAndCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).AddCommentContentReviewDbAndCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/AddCommentContentReviewDbAndCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).AddCommentContentReviewDbAndCache(ctx, req.(*AddCommentContentReviewDbAndCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_RemoveComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).RemoveComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/RemoveComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).RemoveComment(ctx, req.(*RemoveCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_RemoveSubComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSubCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).RemoveSubComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/RemoveSubComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).RemoveSubComment(ctx, req.(*RemoveSubCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_RemoveCommentDbAndCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCommentDbAndCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).RemoveCommentDbAndCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/RemoveCommentDbAndCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).RemoveCommentDbAndCache(ctx, req.(*RemoveCommentDbAndCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_RemoveSubCommentDbAndCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSubCommentDbAndCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).RemoveSubCommentDbAndCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/RemoveSubCommentDbAndCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).RemoveSubCommentDbAndCache(ctx, req.(*RemoveSubCommentDbAndCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.v1.Comment/GetHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).GetHealth(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Comment_ServiceDesc is the grpc.ServiceDesc for Comment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Comment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comment.v1.Comment",
	HandlerType: (*CommentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLastCommentDraft",
			Handler:    _Comment_GetLastCommentDraft_Handler,
		},
		{
			MethodName: "GetUserCommentAgree",
			Handler:    _Comment_GetUserCommentAgree_Handler,
		},
		{
			MethodName: "GetCommentUser",
			Handler:    _Comment_GetCommentUser_Handler,
		},
		{
			MethodName: "GetCommentList",
			Handler:    _Comment_GetCommentList_Handler,
		},
		{
			MethodName: "GetSubCommentList",
			Handler:    _Comment_GetSubCommentList_Handler,
		},
		{
			MethodName: "GetCommentListHot",
			Handler:    _Comment_GetCommentListHot_Handler,
		},
		{
			MethodName: "GetCommentListStatistic",
			Handler:    _Comment_GetCommentListStatistic_Handler,
		},
		{
			MethodName: "GetSubCommentListStatistic",
			Handler:    _Comment_GetSubCommentListStatistic_Handler,
		},
		{
			MethodName: "GetUserCommentArticleReplyList",
			Handler:    _Comment_GetUserCommentArticleReplyList_Handler,
		},
		{
			MethodName: "GetUserSubCommentArticleReplyList",
			Handler:    _Comment_GetUserSubCommentArticleReplyList_Handler,
		},
		{
			MethodName: "GetUserCommentTalkReplyList",
			Handler:    _Comment_GetUserCommentTalkReplyList_Handler,
		},
		{
			MethodName: "GetUserSubCommentTalkReplyList",
			Handler:    _Comment_GetUserSubCommentTalkReplyList_Handler,
		},
		{
			MethodName: "GetUserCommentArticleRepliedList",
			Handler:    _Comment_GetUserCommentArticleRepliedList_Handler,
		},
		{
			MethodName: "GetUserSubCommentArticleRepliedList",
			Handler:    _Comment_GetUserSubCommentArticleRepliedList_Handler,
		},
		{
			MethodName: "GetUserCommentTalkRepliedList",
			Handler:    _Comment_GetUserCommentTalkRepliedList_Handler,
		},
		{
			MethodName: "GetUserSubCommentTalkRepliedList",
			Handler:    _Comment_GetUserSubCommentTalkRepliedList_Handler,
		},
		{
			MethodName: "GetUserCommentRepliedList",
			Handler:    _Comment_GetUserCommentRepliedList_Handler,
		},
		{
			MethodName: "GetUserSubCommentRepliedList",
			Handler:    _Comment_GetUserSubCommentRepliedList_Handler,
		},
		{
			MethodName: "GetCommentContentReview",
			Handler:    _Comment_GetCommentContentReview_Handler,
		},
		{
			MethodName: "CommentContentIrregular",
			Handler:    _Comment_CommentContentIrregular_Handler,
		},
		{
			MethodName: "CreateCommentDraft",
			Handler:    _Comment_CreateCommentDraft_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _Comment_CreateComment_Handler,
		},
		{
			MethodName: "CreateSubComment",
			Handler:    _Comment_CreateSubComment_Handler,
		},
		{
			MethodName: "CreateCommentDbAndCache",
			Handler:    _Comment_CreateCommentDbAndCache_Handler,
		},
		{
			MethodName: "CreateSubCommentDbAndCache",
			Handler:    _Comment_CreateSubCommentDbAndCache_Handler,
		},
		{
			MethodName: "SendComment",
			Handler:    _Comment_SendComment_Handler,
		},
		{
			MethodName: "SendSubComment",
			Handler:    _Comment_SendSubComment_Handler,
		},
		{
			MethodName: "SetCommentAgree",
			Handler:    _Comment_SetCommentAgree_Handler,
		},
		{
			MethodName: "SetSubCommentAgree",
			Handler:    _Comment_SetSubCommentAgree_Handler,
		},
		{
			MethodName: "SetCommentAgreeDbAndCache",
			Handler:    _Comment_SetCommentAgreeDbAndCache_Handler,
		},
		{
			MethodName: "SetSubCommentAgreeDbAndCache",
			Handler:    _Comment_SetSubCommentAgreeDbAndCache_Handler,
		},
		{
			MethodName: "CancelCommentAgree",
			Handler:    _Comment_CancelCommentAgree_Handler,
		},
		{
			MethodName: "CancelSubCommentAgree",
			Handler:    _Comment_CancelSubCommentAgree_Handler,
		},
		{
			MethodName: "CancelCommentAgreeDbAndCache",
			Handler:    _Comment_CancelCommentAgreeDbAndCache_Handler,
		},
		{
			MethodName: "CancelSubCommentAgreeDbAndCache",
			Handler:    _Comment_CancelSubCommentAgreeDbAndCache_Handler,
		},
		{
			MethodName: "AddCommentContentReviewDbAndCache",
			Handler:    _Comment_AddCommentContentReviewDbAndCache_Handler,
		},
		{
			MethodName: "RemoveComment",
			Handler:    _Comment_RemoveComment_Handler,
		},
		{
			MethodName: "RemoveSubComment",
			Handler:    _Comment_RemoveSubComment_Handler,
		},
		{
			MethodName: "RemoveCommentDbAndCache",
			Handler:    _Comment_RemoveCommentDbAndCache_Handler,
		},
		{
			MethodName: "RemoveSubCommentDbAndCache",
			Handler:    _Comment_RemoveSubCommentDbAndCache_Handler,
		},
		{
			MethodName: "GetHealth",
			Handler:    _Comment_GetHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comment/service/v1/comment.proto",
}
