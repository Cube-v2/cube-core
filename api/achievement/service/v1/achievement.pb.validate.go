// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: achievement/service/v1/achievement.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SetAchievementAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetAchievementAgreeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetAchievementAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetAchievementAgreeReqMultiError, or nil if none found.
func (m *SetAchievementAgreeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetAchievementAgreeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for UserUuid

	if len(errors) > 0 {
		return SetAchievementAgreeReqMultiError(errors)
	}

	return nil
}

// SetAchievementAgreeReqMultiError is an error wrapping multiple validation
// errors returned by SetAchievementAgreeReq.ValidateAll() if the designated
// constraints aren't met.
type SetAchievementAgreeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetAchievementAgreeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetAchievementAgreeReqMultiError) AllErrors() []error { return m }

// SetAchievementAgreeReqValidationError is the validation error returned by
// SetAchievementAgreeReq.Validate if the designated constraints aren't met.
type SetAchievementAgreeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetAchievementAgreeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetAchievementAgreeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetAchievementAgreeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetAchievementAgreeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetAchievementAgreeReqValidationError) ErrorName() string {
	return "SetAchievementAgreeReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetAchievementAgreeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetAchievementAgreeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetAchievementAgreeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetAchievementAgreeReqValidationError{}

// Validate checks the field values on CancelAchievementAgreeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelAchievementAgreeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelAchievementAgreeReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelAchievementAgreeReqMultiError, or nil if none found.
func (m *CancelAchievementAgreeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelAchievementAgreeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for UserUuid

	if len(errors) > 0 {
		return CancelAchievementAgreeReqMultiError(errors)
	}

	return nil
}

// CancelAchievementAgreeReqMultiError is an error wrapping multiple validation
// errors returned by CancelAchievementAgreeReq.ValidateAll() if the
// designated constraints aren't met.
type CancelAchievementAgreeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelAchievementAgreeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelAchievementAgreeReqMultiError) AllErrors() []error { return m }

// CancelAchievementAgreeReqValidationError is the validation error returned by
// CancelAchievementAgreeReq.Validate if the designated constraints aren't met.
type CancelAchievementAgreeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelAchievementAgreeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelAchievementAgreeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelAchievementAgreeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelAchievementAgreeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelAchievementAgreeReqValidationError) ErrorName() string {
	return "CancelAchievementAgreeReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelAchievementAgreeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelAchievementAgreeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelAchievementAgreeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelAchievementAgreeReqValidationError{}

// Validate checks the field values on SetAchievementViewReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetAchievementViewReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetAchievementViewReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetAchievementViewReqMultiError, or nil if none found.
func (m *SetAchievementViewReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetAchievementViewReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return SetAchievementViewReqMultiError(errors)
	}

	return nil
}

// SetAchievementViewReqMultiError is an error wrapping multiple validation
// errors returned by SetAchievementViewReq.ValidateAll() if the designated
// constraints aren't met.
type SetAchievementViewReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetAchievementViewReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetAchievementViewReqMultiError) AllErrors() []error { return m }

// SetAchievementViewReqValidationError is the validation error returned by
// SetAchievementViewReq.Validate if the designated constraints aren't met.
type SetAchievementViewReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetAchievementViewReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetAchievementViewReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetAchievementViewReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetAchievementViewReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetAchievementViewReqValidationError) ErrorName() string {
	return "SetAchievementViewReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetAchievementViewReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetAchievementViewReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetAchievementViewReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetAchievementViewReqValidationError{}

// Validate checks the field values on SetAchievementCollectReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetAchievementCollectReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetAchievementCollectReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetAchievementCollectReqMultiError, or nil if none found.
func (m *SetAchievementCollectReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetAchievementCollectReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return SetAchievementCollectReqMultiError(errors)
	}

	return nil
}

// SetAchievementCollectReqMultiError is an error wrapping multiple validation
// errors returned by SetAchievementCollectReq.ValidateAll() if the designated
// constraints aren't met.
type SetAchievementCollectReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetAchievementCollectReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetAchievementCollectReqMultiError) AllErrors() []error { return m }

// SetAchievementCollectReqValidationError is the validation error returned by
// SetAchievementCollectReq.Validate if the designated constraints aren't met.
type SetAchievementCollectReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetAchievementCollectReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetAchievementCollectReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetAchievementCollectReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetAchievementCollectReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetAchievementCollectReqValidationError) ErrorName() string {
	return "SetAchievementCollectReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetAchievementCollectReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetAchievementCollectReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetAchievementCollectReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetAchievementCollectReqValidationError{}

// Validate checks the field values on CancelAchievementCollectReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelAchievementCollectReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelAchievementCollectReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelAchievementCollectReqMultiError, or nil if none found.
func (m *CancelAchievementCollectReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelAchievementCollectReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return CancelAchievementCollectReqMultiError(errors)
	}

	return nil
}

// CancelAchievementCollectReqMultiError is an error wrapping multiple
// validation errors returned by CancelAchievementCollectReq.ValidateAll() if
// the designated constraints aren't met.
type CancelAchievementCollectReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelAchievementCollectReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelAchievementCollectReqMultiError) AllErrors() []error { return m }

// CancelAchievementCollectReqValidationError is the validation error returned
// by CancelAchievementCollectReq.Validate if the designated constraints
// aren't met.
type CancelAchievementCollectReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelAchievementCollectReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelAchievementCollectReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelAchievementCollectReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelAchievementCollectReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelAchievementCollectReqValidationError) ErrorName() string {
	return "CancelAchievementCollectReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelAchievementCollectReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelAchievementCollectReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelAchievementCollectReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelAchievementCollectReqValidationError{}

// Validate checks the field values on SetAchievementFollowReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetAchievementFollowReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetAchievementFollowReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetAchievementFollowReqMultiError, or nil if none found.
func (m *SetAchievementFollowReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetAchievementFollowReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Follow

	// no validation rules for Followed

	if len(errors) > 0 {
		return SetAchievementFollowReqMultiError(errors)
	}

	return nil
}

// SetAchievementFollowReqMultiError is an error wrapping multiple validation
// errors returned by SetAchievementFollowReq.ValidateAll() if the designated
// constraints aren't met.
type SetAchievementFollowReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetAchievementFollowReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetAchievementFollowReqMultiError) AllErrors() []error { return m }

// SetAchievementFollowReqValidationError is the validation error returned by
// SetAchievementFollowReq.Validate if the designated constraints aren't met.
type SetAchievementFollowReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetAchievementFollowReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetAchievementFollowReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetAchievementFollowReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetAchievementFollowReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetAchievementFollowReqValidationError) ErrorName() string {
	return "SetAchievementFollowReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetAchievementFollowReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetAchievementFollowReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetAchievementFollowReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetAchievementFollowReqValidationError{}

// Validate checks the field values on CancelAchievementFollowReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelAchievementFollowReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelAchievementFollowReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelAchievementFollowReqMultiError, or nil if none found.
func (m *CancelAchievementFollowReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelAchievementFollowReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Follow

	// no validation rules for Followed

	if len(errors) > 0 {
		return CancelAchievementFollowReqMultiError(errors)
	}

	return nil
}

// CancelAchievementFollowReqMultiError is an error wrapping multiple
// validation errors returned by CancelAchievementFollowReq.ValidateAll() if
// the designated constraints aren't met.
type CancelAchievementFollowReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelAchievementFollowReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelAchievementFollowReqMultiError) AllErrors() []error { return m }

// CancelAchievementFollowReqValidationError is the validation error returned
// by CancelAchievementFollowReq.Validate if the designated constraints aren't met.
type CancelAchievementFollowReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelAchievementFollowReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelAchievementFollowReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelAchievementFollowReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelAchievementFollowReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelAchievementFollowReqValidationError) ErrorName() string {
	return "CancelAchievementFollowReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelAchievementFollowReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelAchievementFollowReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelAchievementFollowReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelAchievementFollowReqValidationError{}

// Validate checks the field values on SetUserMedalReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetUserMedalReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserMedalReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserMedalReqMultiError, or nil if none found.
func (m *SetUserMedalReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserMedalReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_SetUserMedalReq_Uuid_Pattern.MatchString(m.GetUuid()) {
		err := SetUserMedalReqValidationError{
			field:  "Uuid",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]{20}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _SetUserMedalReq_Medal_InLookup[m.GetMedal()]; !ok {
		err := SetUserMedalReqValidationError{
			field:  "Medal",
			reason: "value must be in list [creation1 creation2 creation3 creation4 creation5 creation6 creation7 agree1 agree2 agree3 agree4 agree5 agree6 view1 view2 view3 comment1 comment2 comment3 collect1 collect2 collect3]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetUserMedalReqMultiError(errors)
	}

	return nil
}

// SetUserMedalReqMultiError is an error wrapping multiple validation errors
// returned by SetUserMedalReq.ValidateAll() if the designated constraints
// aren't met.
type SetUserMedalReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserMedalReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserMedalReqMultiError) AllErrors() []error { return m }

// SetUserMedalReqValidationError is the validation error returned by
// SetUserMedalReq.Validate if the designated constraints aren't met.
type SetUserMedalReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserMedalReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserMedalReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserMedalReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserMedalReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserMedalReqValidationError) ErrorName() string { return "SetUserMedalReqValidationError" }

// Error satisfies the builtin error interface
func (e SetUserMedalReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserMedalReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserMedalReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserMedalReqValidationError{}

var _SetUserMedalReq_Uuid_Pattern = regexp.MustCompile("^[a-zA-Z0-9]{20}$")

var _SetUserMedalReq_Medal_InLookup = map[string]struct{}{
	"creation1": {},
	"creation2": {},
	"creation3": {},
	"creation4": {},
	"creation5": {},
	"creation6": {},
	"creation7": {},
	"agree1":    {},
	"agree2":    {},
	"agree3":    {},
	"agree4":    {},
	"agree5":    {},
	"agree6":    {},
	"view1":     {},
	"view2":     {},
	"view3":     {},
	"comment1":  {},
	"comment2":  {},
	"comment3":  {},
	"collect1":  {},
	"collect2":  {},
	"collect3":  {},
}

// Validate checks the field values on CancelUserMedalSetReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelUserMedalSetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelUserMedalSetReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelUserMedalSetReqMultiError, or nil if none found.
func (m *CancelUserMedalSetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelUserMedalSetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CancelUserMedalSetReq_Uuid_Pattern.MatchString(m.GetUuid()) {
		err := CancelUserMedalSetReqValidationError{
			field:  "Uuid",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]{20}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CancelUserMedalSetReq_Medal_InLookup[m.GetMedal()]; !ok {
		err := CancelUserMedalSetReqValidationError{
			field:  "Medal",
			reason: "value must be in list [creation1 creation2 creation3 creation4 creation5 creation6 creation7 agree1 agree2 agree3 agree4 agree5 agree6 view1 view2 view3 comment1 comment2 comment3 collect1 collect2 collect3]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelUserMedalSetReqMultiError(errors)
	}

	return nil
}

// CancelUserMedalSetReqMultiError is an error wrapping multiple validation
// errors returned by CancelUserMedalSetReq.ValidateAll() if the designated
// constraints aren't met.
type CancelUserMedalSetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelUserMedalSetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelUserMedalSetReqMultiError) AllErrors() []error { return m }

// CancelUserMedalSetReqValidationError is the validation error returned by
// CancelUserMedalSetReq.Validate if the designated constraints aren't met.
type CancelUserMedalSetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelUserMedalSetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelUserMedalSetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelUserMedalSetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelUserMedalSetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelUserMedalSetReqValidationError) ErrorName() string {
	return "CancelUserMedalSetReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelUserMedalSetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelUserMedalSetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelUserMedalSetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelUserMedalSetReqValidationError{}

var _CancelUserMedalSetReq_Uuid_Pattern = regexp.MustCompile("^[a-zA-Z0-9]{20}$")

var _CancelUserMedalSetReq_Medal_InLookup = map[string]struct{}{
	"creation1": {},
	"creation2": {},
	"creation3": {},
	"creation4": {},
	"creation5": {},
	"creation6": {},
	"creation7": {},
	"agree1":    {},
	"agree2":    {},
	"agree3":    {},
	"agree4":    {},
	"agree5":    {},
	"agree6":    {},
	"view1":     {},
	"view2":     {},
	"view3":     {},
	"comment1":  {},
	"comment2":  {},
	"comment3":  {},
	"collect1":  {},
	"collect2":  {},
	"collect3":  {},
}

// Validate checks the field values on SetUserMedalDbAndCacheReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetUserMedalDbAndCacheReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserMedalDbAndCacheReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserMedalDbAndCacheReqMultiError, or nil if none found.
func (m *SetUserMedalDbAndCacheReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserMedalDbAndCacheReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Medal

	// no validation rules for Uuid

	if len(errors) > 0 {
		return SetUserMedalDbAndCacheReqMultiError(errors)
	}

	return nil
}

// SetUserMedalDbAndCacheReqMultiError is an error wrapping multiple validation
// errors returned by SetUserMedalDbAndCacheReq.ValidateAll() if the
// designated constraints aren't met.
type SetUserMedalDbAndCacheReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserMedalDbAndCacheReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserMedalDbAndCacheReqMultiError) AllErrors() []error { return m }

// SetUserMedalDbAndCacheReqValidationError is the validation error returned by
// SetUserMedalDbAndCacheReq.Validate if the designated constraints aren't met.
type SetUserMedalDbAndCacheReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserMedalDbAndCacheReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserMedalDbAndCacheReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserMedalDbAndCacheReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserMedalDbAndCacheReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserMedalDbAndCacheReqValidationError) ErrorName() string {
	return "SetUserMedalDbAndCacheReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetUserMedalDbAndCacheReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserMedalDbAndCacheReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserMedalDbAndCacheReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserMedalDbAndCacheReqValidationError{}

// Validate checks the field values on CancelUserMedalDbAndCacheReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelUserMedalDbAndCacheReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelUserMedalDbAndCacheReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelUserMedalDbAndCacheReqMultiError, or nil if none found.
func (m *CancelUserMedalDbAndCacheReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelUserMedalDbAndCacheReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Medal

	// no validation rules for Uuid

	if len(errors) > 0 {
		return CancelUserMedalDbAndCacheReqMultiError(errors)
	}

	return nil
}

// CancelUserMedalDbAndCacheReqMultiError is an error wrapping multiple
// validation errors returned by CancelUserMedalDbAndCacheReq.ValidateAll() if
// the designated constraints aren't met.
type CancelUserMedalDbAndCacheReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelUserMedalDbAndCacheReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelUserMedalDbAndCacheReqMultiError) AllErrors() []error { return m }

// CancelUserMedalDbAndCacheReqValidationError is the validation error returned
// by CancelUserMedalDbAndCacheReq.Validate if the designated constraints
// aren't met.
type CancelUserMedalDbAndCacheReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelUserMedalDbAndCacheReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelUserMedalDbAndCacheReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelUserMedalDbAndCacheReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelUserMedalDbAndCacheReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelUserMedalDbAndCacheReqValidationError) ErrorName() string {
	return "CancelUserMedalDbAndCacheReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelUserMedalDbAndCacheReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelUserMedalDbAndCacheReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelUserMedalDbAndCacheReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelUserMedalDbAndCacheReqValidationError{}

// Validate checks the field values on AccessUserMedalReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccessUserMedalReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccessUserMedalReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccessUserMedalReqMultiError, or nil if none found.
func (m *AccessUserMedalReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AccessUserMedalReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_AccessUserMedalReq_Uuid_Pattern.MatchString(m.GetUuid()) {
		err := AccessUserMedalReqValidationError{
			field:  "Uuid",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]{20}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AccessUserMedalReq_Medal_InLookup[m.GetMedal()]; !ok {
		err := AccessUserMedalReqValidationError{
			field:  "Medal",
			reason: "value must be in list [creation1 creation2 creation3 creation4 creation5 creation6 creation7 agree1 agree2 agree3 agree4 agree5 agree6 view1 view2 view3 comment1 comment2 comment3 collect1 collect2 collect3]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AccessUserMedalReqMultiError(errors)
	}

	return nil
}

// AccessUserMedalReqMultiError is an error wrapping multiple validation errors
// returned by AccessUserMedalReq.ValidateAll() if the designated constraints
// aren't met.
type AccessUserMedalReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccessUserMedalReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccessUserMedalReqMultiError) AllErrors() []error { return m }

// AccessUserMedalReqValidationError is the validation error returned by
// AccessUserMedalReq.Validate if the designated constraints aren't met.
type AccessUserMedalReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessUserMedalReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessUserMedalReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessUserMedalReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessUserMedalReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessUserMedalReqValidationError) ErrorName() string {
	return "AccessUserMedalReqValidationError"
}

// Error satisfies the builtin error interface
func (e AccessUserMedalReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessUserMedalReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessUserMedalReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessUserMedalReqValidationError{}

var _AccessUserMedalReq_Uuid_Pattern = regexp.MustCompile("^[a-zA-Z0-9]{20}$")

var _AccessUserMedalReq_Medal_InLookup = map[string]struct{}{
	"creation1": {},
	"creation2": {},
	"creation3": {},
	"creation4": {},
	"creation5": {},
	"creation6": {},
	"creation7": {},
	"agree1":    {},
	"agree2":    {},
	"agree3":    {},
	"agree4":    {},
	"agree5":    {},
	"agree6":    {},
	"view1":     {},
	"view2":     {},
	"view3":     {},
	"comment1":  {},
	"comment2":  {},
	"comment3":  {},
	"collect1":  {},
	"collect2":  {},
	"collect3":  {},
}

// Validate checks the field values on GetAchievementListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAchievementListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAchievementListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAchievementListReqMultiError, or nil if none found.
func (m *GetAchievementListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAchievementListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUuids() {
		_, _ = idx, item

		if !_GetAchievementListReq_Uuids_Pattern.MatchString(item) {
			err := GetAchievementListReqValidationError{
				field:  fmt.Sprintf("Uuids[%v]", idx),
				reason: "value does not match regex pattern \"^[a-zA-Z0-9]{20}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetAchievementListReqMultiError(errors)
	}

	return nil
}

// GetAchievementListReqMultiError is an error wrapping multiple validation
// errors returned by GetAchievementListReq.ValidateAll() if the designated
// constraints aren't met.
type GetAchievementListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAchievementListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAchievementListReqMultiError) AllErrors() []error { return m }

// GetAchievementListReqValidationError is the validation error returned by
// GetAchievementListReq.Validate if the designated constraints aren't met.
type GetAchievementListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAchievementListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAchievementListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAchievementListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAchievementListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAchievementListReqValidationError) ErrorName() string {
	return "GetAchievementListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetAchievementListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAchievementListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAchievementListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAchievementListReqValidationError{}

var _GetAchievementListReq_Uuids_Pattern = regexp.MustCompile("^[a-zA-Z0-9]{20}$")

// Validate checks the field values on GetAchievementListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAchievementListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAchievementListReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAchievementListReplyMultiError, or nil if none found.
func (m *GetAchievementListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAchievementListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAchievement() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAchievementListReplyValidationError{
						field:  fmt.Sprintf("Achievement[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAchievementListReplyValidationError{
						field:  fmt.Sprintf("Achievement[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAchievementListReplyValidationError{
					field:  fmt.Sprintf("Achievement[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAchievementListReplyMultiError(errors)
	}

	return nil
}

// GetAchievementListReplyMultiError is an error wrapping multiple validation
// errors returned by GetAchievementListReply.ValidateAll() if the designated
// constraints aren't met.
type GetAchievementListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAchievementListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAchievementListReplyMultiError) AllErrors() []error { return m }

// GetAchievementListReplyValidationError is the validation error returned by
// GetAchievementListReply.Validate if the designated constraints aren't met.
type GetAchievementListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAchievementListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAchievementListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAchievementListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAchievementListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAchievementListReplyValidationError) ErrorName() string {
	return "GetAchievementListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetAchievementListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAchievementListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAchievementListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAchievementListReplyValidationError{}

// Validate checks the field values on GetUserAchievementReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserAchievementReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserAchievementReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserAchievementReqMultiError, or nil if none found.
func (m *GetUserAchievementReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserAchievementReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetUserAchievementReq_Uuid_Pattern.MatchString(m.GetUuid()) {
		err := GetUserAchievementReqValidationError{
			field:  "Uuid",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]{20}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserAchievementReqMultiError(errors)
	}

	return nil
}

// GetUserAchievementReqMultiError is an error wrapping multiple validation
// errors returned by GetUserAchievementReq.ValidateAll() if the designated
// constraints aren't met.
type GetUserAchievementReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserAchievementReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserAchievementReqMultiError) AllErrors() []error { return m }

// GetUserAchievementReqValidationError is the validation error returned by
// GetUserAchievementReq.Validate if the designated constraints aren't met.
type GetUserAchievementReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserAchievementReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserAchievementReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserAchievementReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserAchievementReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserAchievementReqValidationError) ErrorName() string {
	return "GetUserAchievementReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserAchievementReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserAchievementReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserAchievementReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserAchievementReqValidationError{}

var _GetUserAchievementReq_Uuid_Pattern = regexp.MustCompile("^[a-zA-Z0-9]{20}$")

// Validate checks the field values on GetUserAchievementReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserAchievementReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserAchievementReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserAchievementReplyMultiError, or nil if none found.
func (m *GetUserAchievementReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserAchievementReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Agree

	// no validation rules for View

	// no validation rules for Collect

	// no validation rules for Follow

	// no validation rules for Followed

	// no validation rules for Score

	if len(errors) > 0 {
		return GetUserAchievementReplyMultiError(errors)
	}

	return nil
}

// GetUserAchievementReplyMultiError is an error wrapping multiple validation
// errors returned by GetUserAchievementReply.ValidateAll() if the designated
// constraints aren't met.
type GetUserAchievementReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserAchievementReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserAchievementReplyMultiError) AllErrors() []error { return m }

// GetUserAchievementReplyValidationError is the validation error returned by
// GetUserAchievementReply.Validate if the designated constraints aren't met.
type GetUserAchievementReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserAchievementReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserAchievementReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserAchievementReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserAchievementReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserAchievementReplyValidationError) ErrorName() string {
	return "GetUserAchievementReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserAchievementReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserAchievementReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserAchievementReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserAchievementReplyValidationError{}

// Validate checks the field values on AddAchievementScoreReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddAchievementScoreReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAchievementScoreReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAchievementScoreReqMultiError, or nil if none found.
func (m *AddAchievementScoreReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAchievementScoreReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Score

	if len(errors) > 0 {
		return AddAchievementScoreReqMultiError(errors)
	}

	return nil
}

// AddAchievementScoreReqMultiError is an error wrapping multiple validation
// errors returned by AddAchievementScoreReq.ValidateAll() if the designated
// constraints aren't met.
type AddAchievementScoreReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAchievementScoreReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAchievementScoreReqMultiError) AllErrors() []error { return m }

// AddAchievementScoreReqValidationError is the validation error returned by
// AddAchievementScoreReq.Validate if the designated constraints aren't met.
type AddAchievementScoreReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAchievementScoreReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAchievementScoreReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAchievementScoreReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAchievementScoreReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAchievementScoreReqValidationError) ErrorName() string {
	return "AddAchievementScoreReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddAchievementScoreReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAchievementScoreReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAchievementScoreReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAchievementScoreReqValidationError{}

// Validate checks the field values on GetUserMedalReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserMedalReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserMedalReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserMedalReqMultiError, or nil if none found.
func (m *GetUserMedalReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserMedalReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetUserMedalReq_Uuid_Pattern.MatchString(m.GetUuid()) {
		err := GetUserMedalReqValidationError{
			field:  "Uuid",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]{20}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserMedalReqMultiError(errors)
	}

	return nil
}

// GetUserMedalReqMultiError is an error wrapping multiple validation errors
// returned by GetUserMedalReq.ValidateAll() if the designated constraints
// aren't met.
type GetUserMedalReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserMedalReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserMedalReqMultiError) AllErrors() []error { return m }

// GetUserMedalReqValidationError is the validation error returned by
// GetUserMedalReq.Validate if the designated constraints aren't met.
type GetUserMedalReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserMedalReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserMedalReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserMedalReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserMedalReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserMedalReqValidationError) ErrorName() string { return "GetUserMedalReqValidationError" }

// Error satisfies the builtin error interface
func (e GetUserMedalReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserMedalReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserMedalReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserMedalReqValidationError{}

var _GetUserMedalReq_Uuid_Pattern = regexp.MustCompile("^[a-zA-Z0-9]{20}$")

// Validate checks the field values on GetUserMedalReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserMedalReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserMedalReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserMedalReplyMultiError, or nil if none found.
func (m *GetUserMedalReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserMedalReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Creation1

	// no validation rules for Creation2

	// no validation rules for Creation3

	// no validation rules for Creation4

	// no validation rules for Creation5

	// no validation rules for Creation6

	// no validation rules for Creation7

	// no validation rules for Agree1

	// no validation rules for Agree2

	// no validation rules for Agree3

	// no validation rules for Agree4

	// no validation rules for Agree5

	// no validation rules for Agree6

	// no validation rules for View1

	// no validation rules for View2

	// no validation rules for View3

	// no validation rules for Comment1

	// no validation rules for Comment2

	// no validation rules for Comment3

	// no validation rules for Collect1

	// no validation rules for Collect2

	// no validation rules for Collect3

	if len(errors) > 0 {
		return GetUserMedalReplyMultiError(errors)
	}

	return nil
}

// GetUserMedalReplyMultiError is an error wrapping multiple validation errors
// returned by GetUserMedalReply.ValidateAll() if the designated constraints
// aren't met.
type GetUserMedalReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserMedalReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserMedalReplyMultiError) AllErrors() []error { return m }

// GetUserMedalReplyValidationError is the validation error returned by
// GetUserMedalReply.Validate if the designated constraints aren't met.
type GetUserMedalReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserMedalReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserMedalReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserMedalReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserMedalReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserMedalReplyValidationError) ErrorName() string {
	return "GetUserMedalReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserMedalReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserMedalReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserMedalReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserMedalReplyValidationError{}

// Validate checks the field values on GetUserActiveReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserActiveReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserActiveReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserActiveReqMultiError, or nil if none found.
func (m *GetUserActiveReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserActiveReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetUserActiveReq_Uuid_Pattern.MatchString(m.GetUuid()) {
		err := GetUserActiveReqValidationError{
			field:  "Uuid",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]{20}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserActiveReqMultiError(errors)
	}

	return nil
}

// GetUserActiveReqMultiError is an error wrapping multiple validation errors
// returned by GetUserActiveReq.ValidateAll() if the designated constraints
// aren't met.
type GetUserActiveReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserActiveReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserActiveReqMultiError) AllErrors() []error { return m }

// GetUserActiveReqValidationError is the validation error returned by
// GetUserActiveReq.Validate if the designated constraints aren't met.
type GetUserActiveReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserActiveReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserActiveReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserActiveReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserActiveReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserActiveReqValidationError) ErrorName() string { return "GetUserActiveReqValidationError" }

// Error satisfies the builtin error interface
func (e GetUserActiveReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserActiveReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserActiveReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserActiveReqValidationError{}

var _GetUserActiveReq_Uuid_Pattern = regexp.MustCompile("^[a-zA-Z0-9]{20}$")

// Validate checks the field values on GetUserActiveReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserActiveReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserActiveReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserActiveReplyMultiError, or nil if none found.
func (m *GetUserActiveReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserActiveReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Agree

	// no validation rules for View

	if len(errors) > 0 {
		return GetUserActiveReplyMultiError(errors)
	}

	return nil
}

// GetUserActiveReplyMultiError is an error wrapping multiple validation errors
// returned by GetUserActiveReply.ValidateAll() if the designated constraints
// aren't met.
type GetUserActiveReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserActiveReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserActiveReplyMultiError) AllErrors() []error { return m }

// GetUserActiveReplyValidationError is the validation error returned by
// GetUserActiveReply.Validate if the designated constraints aren't met.
type GetUserActiveReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserActiveReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserActiveReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserActiveReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserActiveReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserActiveReplyValidationError) ErrorName() string {
	return "GetUserActiveReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserActiveReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserActiveReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserActiveReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserActiveReplyValidationError{}

// Validate checks the field values on GetAchievementListReply_Achievement with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetAchievementListReply_Achievement) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAchievementListReply_Achievement
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetAchievementListReply_AchievementMultiError, or nil if none found.
func (m *GetAchievementListReply_Achievement) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAchievementListReply_Achievement) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for View

	// no validation rules for Agree

	// no validation rules for Followed

	// no validation rules for Follow

	if len(errors) > 0 {
		return GetAchievementListReply_AchievementMultiError(errors)
	}

	return nil
}

// GetAchievementListReply_AchievementMultiError is an error wrapping multiple
// validation errors returned by
// GetAchievementListReply_Achievement.ValidateAll() if the designated
// constraints aren't met.
type GetAchievementListReply_AchievementMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAchievementListReply_AchievementMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAchievementListReply_AchievementMultiError) AllErrors() []error { return m }

// GetAchievementListReply_AchievementValidationError is the validation error
// returned by GetAchievementListReply_Achievement.Validate if the designated
// constraints aren't met.
type GetAchievementListReply_AchievementValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAchievementListReply_AchievementValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAchievementListReply_AchievementValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAchievementListReply_AchievementValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAchievementListReply_AchievementValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAchievementListReply_AchievementValidationError) ErrorName() string {
	return "GetAchievementListReply_AchievementValidationError"
}

// Error satisfies the builtin error interface
func (e GetAchievementListReply_AchievementValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAchievementListReply_Achievement.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAchievementListReply_AchievementValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAchievementListReply_AchievementValidationError{}
