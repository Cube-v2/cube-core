syntax = "proto3";

package achievement.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";

option go_package = "api/achievement/service/v1;v1";

service Achievement {
  rpc SetAchievementAgree(SetAchievementAgreeReq) returns (google.protobuf.Empty){}
  rpc CancelAchievementAgree(CancelAchievementAgreeReq) returns (google.protobuf.Empty){}
  rpc SetAchievementView(SetAchievementViewReq) returns (google.protobuf.Empty){}
  rpc SetAchievementCollect(SetAchievementCollectReq) returns (google.protobuf.Empty){}
  rpc CancelAchievementCollect(CancelAchievementCollectReq) returns (google.protobuf.Empty){}
  rpc SetAchievementFollow(SetAchievementFollowReq) returns (google.protobuf.Empty){}
  rpc CancelAchievementFollow(CancelAchievementFollowReq) returns (google.protobuf.Empty){}
  rpc GetAchievementList(GetAchievementListReq) returns (GetAchievementListReply){}
  rpc GetUserAchievement(GetUserAchievementReq) returns (GetUserAchievementReply){}
  rpc AddAchievementScore(AddAchievementScoreReq) returns (google.protobuf.Empty){}
  rpc GetHealth(google.protobuf.Empty) returns (google.protobuf.Empty){
    option (google.api.http) = {
      get: "/v1/get/achievement/health"
    };
  }
}

message SetAchievementAgreeReq{
  string uuid = 1 [(validate.rules).string.uuid = true];
}

message CancelAchievementAgreeReq{
  string uuid = 1 [(validate.rules).string.uuid = true];
}

message SetAchievementViewReq{
  string uuid = 1 [(validate.rules).string.uuid = true];
}

message SetAchievementCollectReq{
  string uuid = 1 [(validate.rules).string.uuid = true];
}

message CancelAchievementCollectReq{
  string uuid = 1 [(validate.rules).string.uuid = true];
}

message SetAchievementFollowReq{
  string follow = 1 [(validate.rules).string.uuid = true];
  string followed = 2 [(validate.rules).string.uuid = true];
}

message CancelAchievementFollowReq{
  string follow = 1 [(validate.rules).string.uuid = true];
  string followed = 2 [(validate.rules).string.uuid = true];
}

message GetAchievementListReq{
  repeated string uuids = 1 [(validate.rules).repeated.items.string.uuid = true];
}

message GetAchievementListReply{
  message Achievement{
    string uuid = 1;
    int32 view = 2;
    int32 agree = 3;
    int32 followed = 4;
    int32 follow = 5;
  }
  repeated Achievement achievement = 1;
}

message GetUserAchievementReq{
  string uuid = 1 [(validate.rules).string.uuid = true];
}

message GetUserAchievementReply{
  int32 agree = 1;
  int32 view = 2;
  int32 collect = 3;
  int32 follow = 4;
  int32 followed = 5;
}

message AddAchievementScoreReq{
  string uuid = 1;
  int32 score = 2;
}